unit uAnalyzer;

interface

procedure AnalisarDiretorio(const Dir: string);

implementation

uses
  System.SysUtils, System.IOUtils, System.Classes, System.RegularExpressions, System.JSON;

procedure AnalisarArquivo(const FileName: string; JsonArray: TJSONArray);
var
  Lines: TStringList;
  i, ParamCount, MethodStart, MethodEnd: Integer;
  Line, CurrentMethod: string;
  InMethod, InLoop: Boolean;
  MethodLines: Integer;
begin
  Lines := TStringList.Create;
  try
    Lines.LoadFromFile(FileName);
    InMethod := False;
    InLoop := False;
    MethodLines := 0;
    ParamCount := 0;

    for i := 0 to Lines.Count - 1 do
    begin
      Line := Trim(Lines[i]);

      // Detecta início de método
      if TRegEx.IsMatch(Line, 'function|procedure', [roIgnoreCase]) and not InMethod then
      begin
        InMethod := True;
        MethodStart := i;
        CurrentMethod := Line;

        // Conta parâmetros
        ParamCount := TRegEx.Matches(Line, ':').Count;
        if ParamCount > 5 then
          JsonArray.AddElement(TJSONObject.Create
            .AddPair('arquivo', FileName)
            .AddPair('smell', 'Muitos parâmetros')
            .AddPair('linha', i.ToString));
      end;

      // Detecta fim de método
      if InMethod and (Line = 'end;' ) then
      begin
        InMethod := False;
        MethodEnd := i;
        MethodLines := MethodEnd - MethodStart;
        if MethodLines > 50 then
          JsonArray.AddElement(TJSONObject.Create
            .AddPair('arquivo', FileName)
            .AddPair('smell', 'Método muito longo')
            .AddPair('linha', MethodStart.ToString));
      end;

      // Uso de "with"
      if Line.ToLower.StartsWith('with') then
        JsonArray.AddElement(TJSONObject.Create
          .AddPair('arquivo', FileName)
          .AddPair('smell', 'Uso de with')
          .AddPair('linha', i.ToString));

      // Variáveis globais
      if Line.ToLower.StartsWith('var') and (i > 0) and (Lines[i - 1].ToLower.Contains('interface')) then
        JsonArray.AddElement(TJSONObject.Create
          .AddPair('arquivo', FileName)
          .AddPair('smell', 'Variável global')
          .AddPair('linha', i.ToString));

      // Application.ProcessMessages em loop
      if Line.ToLower.Contains('for ') or Line.ToLower.Contains('while ') then
        InLoop := True;

      if InLoop and Line.ToLower.Contains('application.processmessages') then
        JsonArray.AddElement(TJSONObject.Create
          .AddPair('arquivo', FileName)
          .AddPair('smell', 'Uso de Application.ProcessMessages em loop')
          .AddPair('linha', i.ToString));

      if Line = '' then
        InLoop := False;
    end;
  finally
    Lines.Free;
  end;
end;

procedure AnalisarDiretorio(const Dir: string);
var
  Files: TArray<string>;
  FileName: string;
  JsonArray: TJSONArray;
  JsonStr: TStringList;
begin
  Files := TDirectory.GetFiles(Dir, '*.pas', TSearchOption.soAllDirectories);
  JsonArray := TJSONArray.Create;

  for FileName in Files do
    AnalisarArquivo(FileName, JsonArray);

  JsonStr := TStringList.Create;
  try
    JsonStr.Text := JsonArray.ToJSON;
    JsonStr.SaveToFile('resultado.json');
    Writeln('Análise concluída. Resultado salvo em resultado.json');
  finally
    JsonStr.Free;
    JsonArray.Free;
  end;
end;

end.
