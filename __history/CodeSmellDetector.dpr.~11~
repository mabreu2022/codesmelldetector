unit uProjeto;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections;

function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;

implementation

uses
  System.IOUtils, Xml.XMLDoc, Xml.XMLIntf;

function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;
var
  ArquivosDproj: TArray<string>;
  XML: IXMLDocument;
  Root, ItemGroup, Ref: IXMLNode;
  Lista: TList<string>;
  BaseDir, FilePath, DprojFile: string;
  PastasIgnoradas: TArray<string>;
  Ignorar: Boolean;
  Pasta: string;
  i, j: Integer;
  Escolha: Integer;
begin
  Lista := TList<string>.Create;
  try
    // Busca recursiva por arquivos .dproj
    ArquivosDproj := TDirectory.GetFiles(ProjetoPath, '*.dproj', TSearchOption.soAllDirectories);

    if Length(ArquivosDproj) = 0 then
      raise Exception.Create('Nenhum arquivo .dproj encontrado no diretório ou subpastas.');

    if Length(ArquivosDproj) > 1 then
    begin
      Writeln('?? Vários arquivos .dproj encontrados:');
      for i := 0 to High(ArquivosDproj) do
        Writeln(Format('  [%d] %s', [i + 1, ArquivosDproj[i]]));
      Writeln('');
      Write('Digite o número do projeto que deseja analisar: ');
      Readln(Escolha);
      if (Escolha < 1) or (Escolha > Length(ArquivosDproj)) then
        raise Exception.Create('Escolha inválida.');
      DprojFile := ArquivosDproj[Escolha - 1];
    end
    else
      DprojFile := ArquivosDproj[0];

    XML := TXMLDocument.Create(nil);
    XML.LoadFromFile(DprojFile);
    XML.Active := True;

    BaseDir := ExtractFilePath(DprojFile);
    PastasIgnoradas := ['\lib\', '\thirdparty\', '\vendor\', '\external\', '\packages\'];

    Root := XML.DocumentElement;

    for i := 0 to Root.ChildNodes.Count - 1 do
    begin
      ItemGroup := Root.ChildNodes[i];
      if SameText(ItemGroup.NodeName, 'ItemGroup') then
      begin
        for j := 0 to ItemGroup.ChildNodes.Count - 1 do
        begin
          Ref := ItemGroup.ChildNodes[j];
          if SameText(Ref.NodeName, 'DCCReference') then
          begin
            if Ref.HasAttribute('Include') then
            begin
              FilePath := TPath.Combine(BaseDir, Ref.Attributes['Include']);
              FilePath := TPath.GetFullPath(FilePath);

              Ignorar := False;
              for Pasta in PastasIgnoradas do
                if FilePath.ToLower.Contains(Pasta) then
                begin
                  Ignorar := True;
                  Break;
                end;

              if not Ignorar and TFile.Exists(FilePath) then
                Lista.Add(FilePath);
            end;
          end;
        end;
      end;
    end;

    Result := Lista.ToArray;
  finally
    Lista.Free;
  end;
end;

end.
