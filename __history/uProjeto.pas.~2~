unit uProjeto;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections;

function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;

implementation

uses
  System.IOUtils, Xml.XMLDoc, Xml.XMLIntf;

function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;
var
  DprojFile: string;
  XML: IXMLDocument;
  Node: IXMLNode;
  Lista: TList<string>;
  BaseDir, FilePath: string;
  PastasIgnoradas: TArray<string>;
  Ignorar: Boolean;
  Pasta: string;
begin
  Lista := TList<string>.Create;
  try
    DprojFile := '';
    for var F in TDirectory.GetFiles(ProjetoPath, '*.dproj') do
    begin
      DprojFile := F;
      Break;
    end;

    if DprojFile = '' then
      raise Exception.Create('Arquivo .dproj não encontrado no diretório.');

    XML := LoadXMLDocument(DprojFile);
    BaseDir := ExtractFilePath(DprojFile);
    PastasIgnoradas := ['\lib\', '\thirdparty\', '\vendor\', '\external\', '\packages\'];

    for Node in XML.DocumentElement.ChildNodes do
    begin
      if Node.NodeName = 'ItemGroup' then
      begin
        for var Ref in Node.ChildNodes do
        begin
          if SameText(Ref.NodeName, 'DCCReference') then
          begin
            FilePath := TPath.Combine(BaseDir, Ref.Attributes['Include']);
            FilePath := TPath.GetFullPath(FilePath);

            Ignorar := False;
            for Pasta in PastasIgnoradas do
              if FilePath.ToLower.Contains(Pasta) then
              begin
                Ignorar := True;
                Break;
              end;

            if not Ignorar and TFile.Exists(FilePath) then
              Lista.Add(FilePath);
          end;
        end;
      end;
    end;

    Result := Lista.ToArray;
  finally
    Lista.Free;
  end;
end;

end.
