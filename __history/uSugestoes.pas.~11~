ï»¿                                                                                                       unit uSugestoes;

interface

uses
  uSmellTypes, System.SysUtils;

procedure GerarSugestao(const Smell: TCodeSmell; const PastaSugestoes: string);

implementation

uses
  System.Classes, System.IOUtils, uIARefatorador, System.Threading, System.DateUtils, uLogger;

type
  TSugestaoTask = class
  private
    FSmell: TCodeSmell;
    FPasta: string;
    FArquivoBase: TStringList;
    procedure Executar;
  public
    constructor Create(const ASmell: TCodeSmell; const APasta: string; const ABase: TStringList);
    procedure Start;
  end;

function NormalizarNome(const Texto: string): string;
begin
  Result := StringReplace(Texto, ' ', '', [rfReplaceAll]);
end;

function ExtrairNomeMetodo(const Trecho: string): string;
var
  Linhas: TArray<string>;
  i, p: Integer;
  Linha: string;
begin
  Result := '[metodo nao identificado]';
  Linhas := Trecho.Split([sLineBreak]);
  for i := 0 to High(Linhas) do
  begin
    Linha := Trim(Linhas[i]);
    if (Linha.StartsWith('procedure', True)) or (Linha.StartsWith('function', True)) then
    begin
      p := Pos('(', Linha);
      if p > 0 then
        Result := Copy(Linha, 1, p - 1)
      else
        Result := Linha;
      Exit;
    end;
  end;
end;

constructor TSugestaoTask.Create(const ASmell: TCodeSmell; const APasta: string; const ABase: TStringList);
begin
  FSmell := ASmell;
  FPasta := APasta;
  FArquivoBase := TStringList.Create;
  FArquivoBase.Assign(ABase);
end;

procedure TSugestaoTask.Start;
begin
  TTask.Run(procedure begin Executar; end);
end;

procedure TSugestaoTask.Executar;
var
  Refatorado, NomeMetodo: string;
  StartTime, EndTime: TDateTime;
  ElapsedMs: Integer;
  TextoFinal: TStringList;
  NomeArquivo: string;
begin
  NomeMetodo := ExtrairNomeMetodo(FSmell.Trecho);
  Log(Format('ðŸ”§ Refatorando %s (linha %d)...', [NomeMetodo, FSmell.Linha]));

  StartTime := Now;
  try
    Refatorado := RefatorarMetodoCopilot(FSmell.Trecho); // <- chamada corrigida
  except
    on E: Exception do
    begin
      Refatorado := '// [Erro ao gerar sugestao automatica]' + sLineBreak + '// ' + E.Message;
      LogErro(Format('Erro ao refatorar %s: %s', [NomeMetodo, E.Message]));
    end;
  end;
  EndTime := Now;
  ElapsedMs := MilliSecondsBetween(EndTime, StartTime);

  TextoFinal := TStringList.Create;
  try
    TextoFinal.AddStrings(FArquivoBase);
    TextoFinal.AddStrings(Refatorado.Split([sLineBreak]));

    NomeArquivo := Format('%s_Linha%d_%s.pas',
      [TPath.GetFileNameWithoutExtension(FSmell.Arquivo), FSmell.Linha, NormalizarNome(FSmell.Smell)]);

    TThread.Synchronize(nil,
      procedure
      begin
        TextoFinal.SaveToFile(TPath.Combine(FPasta, NomeArquivo), TEncoding.UTF8);
        Log(Format('âœ… %s refatorado em %d ms', [NomeMetodo, ElapsedMs]));
      end);
  finally
    TextoFinal.Free;
    FArquivoBase.Free;
  end;
end;

procedure GerarSugestao(const Smell: TCodeSmell; const PastaSugestoes: string);
var
  NomeArquivo: string;
  Arq: TStringList;
  Task: TSugestaoTask;
begin
  NomeArquivo := Format('%s_Linha%d_%s.pas',
    [TPath.GetFileNameWithoutExtension(Smell.Arquivo), Smell.Linha, NormalizarNome(Smell.Smell)]);

  Arq := TStringList.Create;
  try
    Arq.Add('// Sugestao de correcao para o smell: ' + Smell.Smell);
    Arq.Add('// Arquivo original: ' + Smell.Arquivo);
    Arq.Add('// Linha: ' + Smell.Linha.ToString);
    Arq.Add('');
    Arq.Add('// Trecho original:');
    Arq.Add('// ------------------');
    Arq.AddStrings(Smell.Trecho.Split([sLineBreak]));
    Arq.Add('');
    Arq.Add('// Sugestao:');

    if Smell.Smell = 'Metodo muito longo' then
    begin
      Arq.Add('// Divida o metodo em submetodos menores com nomes descritivos.');
      Arq.Add('');
      Arq.Add('// Sugestao refatorada:');
      Arq.Add('// ---------------------');

      Task := TSugestaoTask.Create(Smell, PastaSugestoes, Arq);
      Task.Start;
    end
    else
    begin
      Arq.Add('// Refatore conforme boas praticas de design.');
      TDirectory.CreateDirectory(PastaSugestoes);
      Arq.SaveToFile(TPath.Combine(PastaSugestoes, NomeArquivo), TEncoding.UTF8);
    end;
  finally
    Arq.Free;
  end;
end;

end.
