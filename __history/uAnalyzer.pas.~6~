                                                                  unit uAnalyzer;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections, uSmellTypes;

procedure AnalisarDiretorio(const Diretorio: string; const PastaRelatorios: string);

implementation

uses
  System.IOUtils, uProjeto, uRelatorioJSON, uRelatorioCSV, uRelatorioHTML, uSugestoes;

function DetectarSmells(const Arquivo: string): TList<TCodeSmell>;
var
  Linhas: TStringList;
  i: Integer;
  Linha: string;
  Smell: TCodeSmell;
begin
  Result := TList<TCodeSmell>.Create;
  Linhas := TStringList.Create;
  try
    Linhas.LoadFromFile(Arquivo, TEncoding.UTF8);
    for i := 0 to Linhas.Count - 1 do
    begin
      Linha := Linhas[i];

      // Smell: uso de with
      if Trim(Linha).StartsWith('with ', True) then
      begin
        Smell.Arquivo := Arquivo;
        Smell.Smell := 'Uso de with';
        Smell.Linha := i + 1;
        Smell.Trecho := Linha;
        Result.Add(Smell);
      end;

      // Smell: método muito longo (simples heurística)
      if Trim(Linha).StartsWith('procedure ', True) or Trim(Linha).StartsWith('function ', True) then
      begin
        var j := i + 1;
        var Contador := 1;
        while (j < Linhas.Count) and (not Trim(Linhas[j]).StartsWith('end', True)) do
        begin
          Inc(Contador);
          Inc(j);
        end;

        if Contador > 30 then
        begin
          Smell.Arquivo := Arquivo;
          Smell.Smell := 'Método muito longo';
          Smell.Linha := i + 1;
          Smell.Trecho := '';
          for var k := i to j do
            Smell.Trecho := Smell.Trecho + Linhas[k] + sLineBreak;
          Result.Add(Smell);
        end;
      end;
    end;
  finally
    Linhas.Free;
  end;
end;

procedure AnalisarDiretorio(const Diretorio: string; const PastaRelatorios: string);
var
  Arquivos: TArray<string>;
  Smells: TList<TCodeSmell>;
  TodosSmells: TList<TCodeSmell>;
  Smell: TCodeSmell;
  RelatorioJSON, RelatorioCSV, RelatorioHTML: string;
begin
  Arquivos := ObterArquivosProjeto(Diretorio);
  TodosSmells := TList<TCodeSmell>.Create;
  try
    for var Arq in Arquivos do
    begin
      Smells := DetectarSmells(Arq);
      try
        TodosSmells.AddRange(Smells);
      finally
        Smells.Free;
      end;
    end;

    // Gerar relatórios
    RelatorioJSON := TPath.Combine(PastaRelatorios, 'relatorio.json');
    RelatorioCSV := TPath.Combine(PastaRelatorios, 'relatorio.csv');
    RelatorioHTML := TPath.Combine(PastaRelatorios, 'relatorio.html');

    GerarRelatorioJSON(TodosSmells.ToArray, RelatorioJSON);
    GerarRelatorioCSV(TodosSmells.ToArray, RelatorioCSV);
    GerarRelatorioHTML(TodosSmells.ToArray, RelatorioHTML);

    // Gerar sugestões
    for Smell in TodosSmells do
      GerarSugestao(Smell, PastaRelatorios);

  finally
    TodosSmells.Free;
  end;
end;

end.
