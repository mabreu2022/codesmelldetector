unit uIARefatorador;

interface

function RefatorarMetodoCopilot(const TrechoOriginal: string): string;

implementation

uses
  System.SysUtils, System.Classes, System.Net.HttpClient, System.JSON;

function RefatorarMetodoCopilot(const TrechoOriginal: string): string;
var
  Client: THttpClient;
  RequestBody, ResponseText: string;
  Response: IHTTPResponse;
  JSONReq, JSONResp: TJSONObject;
  Prompt: string;
begin
  Result := '';
  Prompt := 'Refatore o seguinte método Delphi em submétodos menores com nomes descritivos. Mantenha a lógica original:' + sLineBreak + TrechoOriginal;

  JSONReq := TJSONObject.Create;
  try
    JSONReq.AddPair('model', 'mistral');
    JSONReq.AddPair('prompt', Prompt);
    JSONReq.AddPair('stream', TJSONBool.Create(False));

    Client := THttpClient.Create;
    try
      Response := Client.Post('http://localhost:11434/api/generate',
        TStringStream.Create(JSONReq.ToJSON, TEncoding.UTF8, False),
        nil,
        [TNameValuePair.Create('Content-Type', 'application/json')]);

      if Response.StatusCode = 200 then
      begin
        JSONResp := TJSONObject.ParseJSONValue(Response.ContentAsString) as TJSONObject;
        if Assigned(JSONResp) and JSONResp.TryGetValue('response', Result) then
          Result := Result.Trim;
        JSONResp.Free;
      end
      else
        raise Exception.Create('Erro na chamada ao modelo local: ' + Response.StatusText);
    finally
      Client.Free;
    end;
  finally
    JSONReq.Free;
  end;
end;

end.
