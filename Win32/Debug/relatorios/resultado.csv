Arquivo;Smell;Linha;Trecho
c:\fontes\Analisador\Utils\uDashboardHTMLUtils.pas;Método muito longo;5;"procedure GerarGraficoHTMLEmbed;

implementation

uses
  System.SysUtils, System.Classes;

procedure GerarGraficoHTMLEmbed;
var
  SL, SLJson: TStringList;
  PastaGraficos, CaminhoHTML, LinhaJSON: string;
  Ferramentas: TArray<string>;
  i: Integer;
  NomeJson, IDCanvas: string;
begin
  SetLength(Ferramentas, 5);
  Ferramentas[0] := 'queryanalizer';
  Ferramentas[1] := 'solidchcker';
  Ferramentas[2] := 'scanneracoplamento';
  Ferramentas[3] := 'analisadorhints';
  Ferramentas[4] := 'verificadorcodigomorto';

  PastaGraficos := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0))) + 'graficos\';
  CaminhoHTML := PastaGraficos + 'grafico.html';

  SL := TStringList.Create;
  try
    SL.Add('<!DOCTYPE html>');
    SL.Add('<html><head>');
    SL.Add('<meta charset=""UTF-8"">');
    SL.Add('<title>Dashboard</title>');
    SL.Add('<script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>');
    SL.Add('<style>');
    SL.Add('body { font-family: Arial; margin: 40px; background: #f4f4f4; }');
    SL.Add('.grid { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; }');
    SL.Add('.grafico { background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }');
    SL.Add('canvas { width: 100%; height: 300px !important; }');
    SL.Add('</style></head><body>');
    SL.Add('<h1>?? Painel Integrado</h1>');
    SL.Add('<div class=""grid"">');

    for i := 0 to High(Ferramentas) do
    begin
      NomeJson := PastaGraficos + Ferramentas[i] + '.json';
      if FileExists(NomeJson) then
      begin
        SLJson := TStringList.Create;
        try
          SLJson.LoadFromFile(NomeJson, TEncoding.UTF8);
          LinhaJSON := SLJson.Text.Replace(#13#10, '').Replace('""', '\""');
          IDCanvas := 'canvas' + IntToStr(i+1);

          SL.Add('<div class=""grafico"">');
          SL.Add('<h3>' + Ferramentas[i] + '</h3>');
          SL.Add('<canvas id=""' + IDCanvas + '""></canvas>');
          SL.Add('<script>');
          SL.Add('var data = JSON.parse(""' + LinhaJSON + '"");');
          SL.Add('new Chart(document.getElementById(""' + IDCanvas + '""), { type: ""line"", data: data, options: { responsive: true, plugins: { legend: { position: ""bottom"" } } } });');
          SL.Add('</script>');
          SL.Add('</div>');
        finally
          SLJson.Free;
        end;
"
c:\fontes\analisdordehints\UBuscaDocWikiGoogle.pas;Método muito longo;5;"function BuscarDocWikiGoogle(const Codigo, Mensagem: string): string;

implementation

uses
  System.SysUtils, System.Classes, System.JSON, System.NetEncoding,
  IdHTTP, IdSSLOpenSSL;

const
  API_KEY = 'AIzaSyAOKWVgjABtxStLv-iRTYxheI_PX5y_H8Y'; // ?? Substitua por sua chave de API
  CSE_ID = '03399718856334828';      // ? Seu ID de mecanismo de busca

function BuscarDocWikiGoogle(const Codigo, Mensagem: string): string;
var
  HTTP: TIdHTTP;
  SSL: TIdSSLIOHandlerSocketOpenSSL;
  URL, Resposta, Query: string;
  JSONRoot, Item: TJSONObject;
  Items: TJSONArray;
  I: Integer;
  Stream: TStringStream;
begin
  Result := '';
  HTTP := TIdHTTP.Create(nil);
  SSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  Stream := TStringStream.Create('', TEncoding.UTF8);
  try
    HTTP.IOHandler := SSL;
    HTTP.HandleRedirects := True;
    HTTP.Request.UserAgent := 'Mozilla/5.0 (Delphi Indy)';
    HTTP.Request.AcceptEncoding := 'utf-8';

    Query := TNetEncoding.URL.Encode('Delphi ' + Codigo + ' ' + Mensagem);
    URL := Format(
      'https://www.googleapis.com/customsearch/v1?key=%s&cx=%s&q=%s',
      [API_KEY, CSE_ID, Query]
    );

    Resposta := HTTP.Get(URL);

    JSONRoot := TJSONObject.ParseJSONValue(Resposta) as TJSONObject;
    try
      if Assigned(JSONRoot) and JSONRoot.TryGetValue<TJSONArray>('items', Items) then
      begin
        for I := 0 to Items.Count - 1 do
        begin
          Item := Items.Items[I] as TJSONObject;
          if Item.TryGetValue<string>('link', Result) then
          begin
            if Result.StartsWith('https://docwiki.embarcadero.com/') then
              Exit
            else
              Result := ''; // ignora se não for docwiki
          end;
"
c:\fontes\analisdordehints\UGeradorRelatorio.pas;Método muito longo;14;"procedure GerarRelatorioUnico(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);
procedure ExportarCSV(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);

implementation


procedure GerarRelatorioUnico(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);
var
  HTML: TStringList;
  Relatorio: TRelatorioProjeto;
  Linha, HTMLFile, Codigo, Msg: string;
  Match: TMatch;
  Sugestao: TSugestaoIA;
begin
  if DestinoRelatorio <> '' then
    HTMLFile := TPath.Combine(DestinoRelatorio, 'RelatorioCompleto.html')
  else
    HTMLFile := 'RelatorioCompleto.html';

  HTML := TStringList.Create;
  try
    HTML.Add('<html><head><meta charset=""utf-8""><style>');
    HTML.Add('body{font-family:Arial;} h2{color:#003366;} h3{color:#333;} ul{margin-left:20px;}');
    HTML.Add('li{margin-bottom:8px;} .hint{color:green;} .warning{color:orange;}');
    HTML.Add('</style></head><body>');
    HTML.Add('<h1>Relatório Consolidado de Hints e Warnings</h1>');

    for Relatorio in Relatorios do
    begin
      HTML.Add('<hr><h2>' + Relatorio.NomeProjeto + '</h2>');

      if Relatorio.Hints.Count > 0 then
      begin
        HTML.Add('<h3>Hints</h3><ul>');
        for Linha in Relatorio.Hints do
        begin
          HTML.Add('<li class=""hint"">' + Linha);

          Match := TRegEx.Match(Linha, '^.+\(\d+\):\s+\[([HW]\d{4})\]\s+(.*)$');
          if Match.Success then
          begin
            Codigo := Match.Groups[1].Value;
            Msg := Match.Groups[2].Value;

            if USugestoesCache.ObterCache.TryGetValue(Codigo, Sugestao) then
            begin
              if Sugestao.Origem = osDocWiki then
                HTML.Add('<br><i>?? <a href=""' +
                         Sugestao.Solucao.Replace('Consulte a documentação oficial: ', '') +
                         '"">Ver documentação oficial</a></i>')
              else
                HTML.Add('<br><i>? Nenhuma sugestão encontrada</i>');
            end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.Client.pas;Método muito longo;23;"    procedure ExecuteRequest;
    procedure DoJoinComponents;
    function PrepareUrlSegments(const AValue: string): string;
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Timeout: Integer; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function ClearBody: IRequest;
    function AddParam(const AName, AValue: string; const AKind: TRESTRequestParameterKind = {$IF COMPILERVERSION < 33}TRESTRequestParameterKind.pkGETorPOST{$ELSE}TRESTRequestParameterKind.pkQUERY{$ENDIF}; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddBody(const AContent: string; const AContentType: TRESTContentType = ctAPPLICATION_JSON): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function FallbackCharsetEncoding(const AFallbackCharsetEncoding: string): IRequest;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
  protected
    procedure DoAfterExecute(Sender: TCustomRESTRequest); virtual;
    procedure DoBeforeExecute(Sender: TCustomRESTRequest); virtual;
    procedure DoHTTPProtocolError(Sender: TCustomRESTRequest); virtual;
  public
    constructor Create; virtual;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.Client.pas;Uso de with;206;"with FRESTRequest.Params.AddItem do"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.Contract.pas;Método muito longo;29;"  TRR4DCallbackOnBeforeExecute = procedure(const Req: IRequest);
  TRR4DCallbackOnAfterExecute = procedure(const Req: IRequest; const Res: IResponse);
{$ELSE}
  TRR4DCallbackOnBeforeExecute = reference to procedure(const Req: IRequest);
  TRR4DCallbackOnAfterExecute = reference to procedure(const Req: IRequest; const Res: IResponse);
{$ENDIF}

  IRequest = interface
    ['{2C882459-F4C3-4854-8F7A-F68E8F8DE98E}']
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
	{$IF DEFINED(RR4D_SYNAPSE)}
    function MimeType: string; overload;
    function MimeType(const AMimeType: string): IRequest; overload;
	{$ENDIF}
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    {$IF DEFINED(RR4D_NETHTTP)}
    function Asynchronous(const AValue: Boolean): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function ConnectionTimeout(const AConnectiomTimeout: Integer): IRequest;
    {$ENDIF}
    {$IF DEFINED(RR4D_INDY) or DEFINED(FPC) or DEFINED(RR4D_SYNAPSE) or DEFINED(RR4D_NETHTTP) or DEFINED(RR4D_ICS)}
    function AddParam(const AName, AValue: string): IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddHeader(const AName, AValue: string): IRequest;
    {$ELSE}
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function AddHeader(const AName, AValue: string; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddParam(const AName, AValue: string; const AKind: TRESTRequestParameterKind = {$IF COMPILERVERSION < 33}TRESTRequestParameterKind.pkGETorPOST{$ELSE}TRESTRequestParameterKind.pkQUERY{$ENDIF}; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddBody(const AContent: string; const AContentType: TRESTContentType = ctAPPLICATION_JSON): IRequest; overload;
    function FallbackCharsetEncoding(const AFallbackCharsetEncoding: string): IRequest;
    {$ENDIF}
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function ClearParams: IRequest;
    function UserAgent(const AName: string): IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    {$IF DEFINED(RR4D_INDY) or DEFINED(FPC) or DEFINED(RR4D_SYNAPSE) or DEFINED(RR4D_NETHTTP)}
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    {$ELSEIF DEFINED(RR4D_ICS)}
    function AddFile(const AFileName: string; UploadStrat:THttpUploadStrat): IRequest; overload;
    {$ELSE}
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    {$ENDIF}
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    {$IF DEFINED(RR4D_INDY) or DEFINED(RR4D_ICS) or DEFINED(RR4D_SYNAPSE)}
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    {$ENDIF}
    {$IF DEFINED(RR4D_INDY)}
    function HTTPOptions(const AHTTPOptions: TIdHTTPOptions): IRequest;
    {$ENDIF}
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.FPHTTPClient.pas;Método muito longo;43;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: Tstrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IResponse); virtual;
    procedure DoBeforeExecute(const Sender: TFPHTTPClient); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.ICS.pas;Método muito longo;23;"    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddHeader(const AName, AValue: string): IRequest;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function ClearParams: IRequest;
    function UserAgent(const AName: string): IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddFile(const AFileName: string; UploadStrat: THttpUploadStrat): IRequest; overload;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    function MakeURL(const AIncludeParams: Boolean = True): string;
  protected
    procedure DoBeforeExecute; virtual;
    procedure DoAfterExecute; virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.Indy.pas;Método muito longo;36;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    function HTTPOptions(const AHTTPOptions: TIdHTTPOptions): IRequest;
    procedure OnStatusInfoEx(ASender: TObject; const AsslSocket: PSSL; const AWhere, Aret: TIdC_INT; const AType, AMsg: string);
  protected
    procedure DoBeforeExecute; virtual;
    procedure DoAfterExecute; virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.NetHTTP.pas;Método muito longo;27;"    function ExecuteRequest(const AMethod: TMethodRequest): IHTTPResponse;
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function ConnectionTimeout(const AConnectiomTimeout: Integer): IRequest;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function Asynchronous(const AValue: Boolean): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    procedure NetHTTPClientValidateServerCertificate(const Sender: TObject; const ARequest: TURLRequest; const Certificate: TCertificate; var Accepted: Boolean);    
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IHTTPResponse); virtual;
    procedure DoBeforeExecute(const Sender: TNetHTTPClient); virtual;
    procedure DoHTTPProtocolError(const Sender: TObject; const AError: string); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\api\modules\restrequest4delphi\src\RESTRequest4D.Request.Synapse.pas;Método muito longo;47;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function MimeType: string; overload;
    function MimeType(const AMimeType: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: Tstrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IResponse); virtual;
    procedure DoBeforeExecute(const Sender: THTTPSend); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\calculadora precos minimos\view\uView.CadastroDePedidos.pas;Uso de with;208;"with mtbItensPedido.FieldDefs do"
c:\fontes\Cargas\cargas\DAO\Dao.Conexao.pas;Uso de with;73;"with Connection.Params do"
c:\fontes\Cargas\cargas\DAO\DAO.ConexaoLicencas.pas;Uso de with;73;"with Connection.Params do"
c:\fontes\Cargas\cargas\Encriptografar\View\View.Principal.pas;Método muito longo;75;"procedure TFrmPrincipal.BtnEncriptarClick(Sender: TObject);
var
  IniFile: TIniFile;
  EncryptedServer   : string;
  EncryptedPassword : string;
  EncryptedDataBase : string;
  EncryptedUserName : string;
  EncryptedServerLicencas   : string;
  EncryptedPasswordLicencas : string;
  EncryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas : string;
  Funcoes: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Server.ini');
  Funcoes:= TCriptografia.Create;
  try
     EncryptedServer   := Funcoes.EncryptString(EdtDadosBancoServer.Text, 123);
     EncryptedPassword := Funcoes.EncryptString(EdtDadosBancoPassword.Text, 123);
     EncryptedDataBase := Funcoes.EncryptString(EdtDadosBancoDataBase.Text,123);
     EncryptedUserName := Funcoes.EncryptString(EdtDadosBancoUserName.Text,123);

     EncryptedServerLicencas   := Funcoes.EncryptString(EdtDadosLicenasServer.Text,123);
     EncryptedPasswordLicencas := Funcoes.EncryptString(EdtDadosLicencasPassword.Text,123);
     EncryptedDataBaseLicencas := Funcoes.EncryptString(EdtDadosLicenasDataBase.Text,123);
     EncryptedUserNameLicencas := Funcoes.EncryptString(EdtDadosLicencasUserName.Text,123);

     //Escreve no arquivo ini
     IniFile.WriteString('Banco de Dados', 'Server', EncryptedServer);
     IniFile.WriteString('Banco de Dados', 'Password', EncryptedPassword);
     IniFile.WriteString('Banco de Dados', 'Database', EncryptedDataBase);
     IniFile.WriteString('Banco de Dados', 'User_Name', EncryptedUserName);

     IniFile.WriteString('BancoLicencas', 'Server',    EncryptedServerLicencas);
     IniFile.WriteString('BancoLicencas', 'Password',  EncryptedPasswordLicencas);
     IniFile.WriteString('BancoLicencas', 'Database',  EncryptedDataBaseLicencas);
     IniFile.WriteString('BancoLicencas', 'User_Name', EncryptedUserNameLicencas);

     //Preenche os Edits da Aba Encriptada - Banco
     EdtEncryptadosBancoServer.Text   := EncryptedServer;
     EdtEncryptadosBancoPassword.Text := EncryptedPassword;
     EdtEncryptadosBancoDataBase.Text := EncryptedDataBase;
     EdtEncryptadosBancoUserName.Text := EncryptedUserName;

     //Preenche os Edits da Aba Encriptada - Banco Licenças
     EdtEncryptadosBancoLicencasServer.Text   := EncryptedServerLicencas;
     EdtEncryptadosBancoLicencasPassword.Text := EncryptedPasswordLicencas;
     EdtEncryptadosBancoLicencasDataBase.Text := EncryptedDataBaseLicencas;
     EdtEncryptadosBancoLicencasUserName.Text := EncryptedUserNameLicencas;

     inifile.UpdateFile;

  finally
    IniFile.Free;
    Funcoes.Free;
  end;
"
c:\fontes\Cargas\cargas\Encriptografar\View\View.Principal.pas;Método muito longo;133;"procedure TFrmPrincipal.CarregarEdits;
var
  IniFile: TIniFile;
  EncryptedServer    : string;
  DecryptedServer    : string;
  EncryptedPassword  : string;
  DecryptedPassword  : string;
  EncryptedDataBase  : string;
  DescryptedDataBase : string;
  EncryptedUserName  : string;
  DescryptedUserName : string;

  EncryptedServerLicencas    : string;
  DecryptedServerLicencas    : string;
  EncryptedPasswordLicencas  : string;
  DecryptedPasswordLicencas  : string;
  EncryptedDataBaseLicencas  : string;
  DescryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas  : string;
  DescryptedUserNameLicencas : string;

  Funcao: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Server.ini');
  Funcao  := TCriptografia.Create;
  try
    EncryptedServer   := IniFile.ReadString('Banco de Dados', 'Server', '');
    EncryptedPassword := IniFile.ReadString('Banco de Dados', 'Password', '');
    EncryptedDataBase := IniFile.ReadString('Banco de Dados', 'Database', '');
    EncryptedUserName := IniFile.ReadString('Banco de Dados', 'User_Name', '');

    DecryptedServer    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPassword  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBase := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserName := Funcao.DecryptString(EncryptedUserName, 123);

    EncryptedServerLicencas   := IniFile.ReadString('BancoLicencas', 'Server', '');
    EncryptedPasswordLicencas := IniFile.ReadString('BancoLicencas', 'Password', '');
    EncryptedDataBaseLicencas := IniFile.ReadString('BancoLicencas', 'Database', '');
    EncryptedUserNameLicencas := IniFile.ReadString('BancoLicencas', 'User_Name', '');

    DecryptedServerLicencas    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPasswordLicencas  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBaseLicencas := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserNameLicencas := Funcao.DecryptString(EncryptedUserName, 123);

    // Carregar Edits Aba Banco - GroupBox Banco
    EdtDadosBancoServer.Text   := DecryptedServer;
    EdtDadosBancoPassword.Text := DecryptedPassword;
    EdtDadosBancoDataBase.Text := DescryptedDataBase;
    EdtDadosBancoUserName.Text := DescryptedUserName;

    //Carregar Edits Aba Dados Encryptados - GroupBox Licenças
    EdtEncryptadosBancoLicencasServer.Text   := DecryptedServerLicencas;
    EdtEncryptadosBancoLicencasPassword.Text := DecryptedPasswordLicencas;
    EdtEncryptadosBancoLicencasDataBase.Text := DescryptedDataBaseLicencas;
    EdtEncryptadosBancoLicencasUserName.Text := DescryptedUserNameLicencas;

  finally
    IniFile.Free;
    Funcao.Free;
  end;
"
c:\fontes\Cargas\cargas\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;22;"function TCNPJCPF.ValidarCNPJ(const CNPJ: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CNPJCalc: string;
  Multiplicador: array[1..14] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CNPJ
  CNPJCalc := '';
  for i := 1 to Length(CNPJ) do
    if CharInSet(CNPJ[i], ['0'..'9']) then
      CNPJCalc := CNPJCalc + CNPJ[i];

  // Verifica se o CNPJ possui 14 dígitos
  if Length(CNPJCalc) <> 14 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CNPJCalc = '00000000000000') or (CNPJCalc = '11111111111111') or
    (CNPJCalc = '22222222222222') or (CNPJCalc = '33333333333333') or
    (CNPJCalc = '44444444444444') or (CNPJCalc = '55555555555555') or
    (CNPJCalc = '66666666666666') or (CNPJCalc = '77777777777777') or
    (CNPJCalc = '88888888888888') or (CNPJCalc = '99999999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 5;
  Multiplicador[2] := 4;
  Multiplicador[3] := 3;
  Multiplicador[4] := 2;
  Multiplicador[5] := 9;
  Multiplicador[6] := 8;
  Multiplicador[7] := 7;
  Multiplicador[8] := 6;
  Multiplicador[9] := 5;
  Multiplicador[10] := 4;
  Multiplicador[11] := 3;
  Multiplicador[12] := 2;
  for i := 1 to 12 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[13]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 6;
  Multiplicador[2] := 5;
  Multiplicador[3] := 4;
  Multiplicador[4] := 3;
  Multiplicador[5] := 2;
  Multiplicador[6] := 9;
  Multiplicador[7] := 8;
  Multiplicador[8] := 7;
  Multiplicador[9] := 6;
  Multiplicador[10] := 5;
  Multiplicador[11] := 4;
  Multiplicador[12] := 3;
  Multiplicador[13] := 2;
  for i := 1 to 13 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[14]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Cargas\cargas\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;97;"function TCNPJCPF.ValidarCPF(const CPF: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CPFCalc: string;
  Multiplicador: array[1..11] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CPF
  CPFCalc := '';
  for i := 1 to Length(CPF) do
    if CharInSet(CPF[i], ['0'..'9']) then
      CPFCalc := CPFCalc + CPF[i];

  // Verifica se o CPF possui 11 dígitos
  if Length(CPFCalc) <> 11 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CPFCalc = '00000000000') or (CPFCalc = '11111111111') or
    (CPFCalc = '22222222222') or (CPFCalc = '33333333333') or
    (CPFCalc = '44444444444') or (CPFCalc = '55555555555') or
    (CPFCalc = '66666666666') or (CPFCalc = '77777777777') or
    (CPFCalc = '88888888888') or (CPFCalc = '99999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 10;
  Multiplicador[2] := 9;
  Multiplicador[3] := 8;
  Multiplicador[4] := 7;
  Multiplicador[5] := 6;
  Multiplicador[6] := 5;
  Multiplicador[7] := 4;
  Multiplicador[8] := 3;
  Multiplicador[9] := 2;
  for i := 1 to 9 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[10]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 11;
  Multiplicador[2] := 10;
  Multiplicador[3] := 9;
  Multiplicador[4] := 8;
  Multiplicador[5] := 7;
  Multiplicador[6] := 6;
  Multiplicador[7] := 5;
  Multiplicador[8] := 4;
  Multiplicador[9] := 3;
  Multiplicador[10] := 2;
  for i := 1 to 10 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[11]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Cargas\cargas\Funcoes\Funcoes.EnviarEmail.pas;Método muito longo;68;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure SetCEP(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setcontato(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
      procedure Setdataregistro(const Value: TDatetime);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setid_chave(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Setserial(const Value: string);
      procedure Setserialhd(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);

    public
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property ativo       : string read Fativo write Setativo;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
       property Linguagem   : string read FLinguagem write SetLinguagem;
       property serial      : string read Fserial write Setserial;
       property serialhd    : string read Fserialhd write Setserialhd;
       property ContraSenha : String read FContraSenha write SetContraSenha;
       property Data_exp    : TDateTime read FData_exp write SetData_exp;
       property id_chave    : string read Fid_chave write Setid_chave;
       function enviarPedido(aEmail: String): Boolean;
  end;
"
c:\fontes\Cargas\cargas\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de Application.ProcessMessages em loop;95;"Application.ProcessMessages;"
c:\fontes\Cargas\cargas\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de with;159;"with FDQuery1 do;"
c:\fontes\Cargas\cargas\Gerar Contra Senha\UnitGerarContrasenha.pas;Método muito longo;134;"procedure TFRMGerarContraSenha.Button1Click(Sender: TObject);
var
  strsql: string;
  strsql2: string;
  contrasenha: string;
  senhafinal: string;
  i: Integer;
const
  str = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%?';
  max = 15;
begin
  if Edit1.Text = '' then
  begin
    ShowMessage('Entre com a chave.');
    Edit1.SetFocus;
  end
  else
  begin
    if EdtData.Text = '' then
    begin
      ShowMessage('Entre com a data de vencimento.');
      EdtData.SetFocus;
    end
    else
    begin
      with FDQuery1 do;
      begin
        strsql := 'select * from registro where chave=' + #39 +
          Edit1.Text + #39;
        strsql := strsql + ' and contrasenha=0';

        strsql2 :=
          'select razao from chaves,registro where chaves.id_chave= registro.id_chave and registro.chave='
          + #39 + Edit1.Text + #39;
        FDQuery2.SQL.Clear;
        FDQuery2.SQL.Add(strsql2);
        FDQuery2.Open();
        Label6.Caption := FDQuery2.FieldByName('razao').AsString;

        // ShowMessage(strsql);
        FDQuery1.SQL.Clear;
        FDQuery1.SQL.Add(strsql);
        FDQuery1.Open();
        if (FDQuery1.RecordCount) = 1 then
        begin
          ShowMessage('Chave encontrada');
          // rotina de gerar a contra-senha
          contrasenha := FDQuery1.FieldByName('chave').AsString;
          // ShowMessage(contrasenha);
          // Gerar contra-senha
          Randomize;
          Label3.Caption := '';
          for i := 1 to max do
          begin
            try
              FDConnection1.StartTransaction;

              FDQuery1.Edit;
              Label3.Caption := Label3.Caption + str[Random(Length(str)) + 1];
              FDQuery1.FieldByName('contrasenha').AsString := contrasenha +
              Label3.Caption;
              senhafinal := contrasenha + Label3.Caption;

              Memo1.Lines.Clear;
              Memo1.Lines.Add(senhafinal);

              // Encriptar
              // Memo1.Lines.Add(Crypt('D',senhafinal));
              // fim de encriptar

              FDQuery1.FieldByName('ativado').AsString := 'S';
              FDQuery1.FieldByName('data_exp').AsDateTime :=
              StrToDateTime(EdtData.Text);
              FDQuery1.Post;
              FDCOnnection1.Commit;

             Except
             on E: Exception do
             begin
               ShowMessage('Erro ao gravar Contra Senha' + e.Message);
               FDConnection1.Rollback;
               Exit;
             end;
"
c:\fontes\Cargas\cargas\Model\Model.Agendamento.pas;Método muito longo;81;"      procedure SetAllDayEvent(const Value: Boolean);
      procedure SetEmail(const Value: string);
      procedure SetEndTime(const Value: TDateTime);
      procedure SetLabel01(const Value: string);
      procedure SetLocais(const Value: string);
      procedure SetLocation(const Value: string);
      procedure SetMenssagem(const Value: string);
      procedure SetNF(const Value: Integer);
      procedure SetOption(const Value: Integer);
      procedure SetParentID(const Value: Integer);
      procedure SetPlaca(const Value: string);
      procedure SetRecurrenceIndex(const Value: Integer);
      procedure SetRecurrenceInfo(const Value: TBlob);
      procedure SetReminderDate(const Value: TDateTime);
      procedure SetReminderMinutesBeforeStart(const Value: Integer);
      procedure SetRemindResourceData(const Value: TDateTime);
      procedure SetResourceID(const Value: Integer);
      procedure SetStart(const Value: TDateTime);
      procedure SetStarTime(const Value: TDateTime);
      procedure SetState(const Value: Integer);
      procedure Setsubject(const Value: string);
      procedure SetTaskCompleteField(const Value: Integer);
      procedure SetTaskIndexField(const Value: Integer);
      procedure SetTaskLinksField(const Value: TBlob);
      procedure SetTaskStatusField(const Value: Integer);
      procedure SetTelefone(const Value: string);
      procedure SetObs(const Value: string);
      procedure SetHora(const Value: TTime);


    public
      //Campos originais da tabela
      property subject  : string read Fsubject write Setsubject;
      property Menssagem: string read FMenssagem write SetMenssagem;
      property Option: Integer read FOption write SetOption;
      property ParentID: Integer read FParentID write SetParentID;
      property RecurrenceIndex: Integer read FRecurrenceIndex write SetRecurrenceIndex;
      property RecurrenceInfo: TBlob read FRecurrenceInfo write SetRecurrenceInfo;
      property ReminderDate: TDateTime read FReminderDate write SetReminderDate;
      property ReminderMinutesBeforeStart: Integer read FReminderMinutesBeforeStart write SetReminderMinutesBeforeStart;
      property RemindResourceData: TDateTime read FRemindResourceData write SetRemindResourceData;
      property ResourceID: Integer read FResourceID write SetResourceID;
      property Start: TDateTime read FStart write SetStart;
      property State: Integer read FState write SetState;
      property TaskCompleteField: Integer read FTaskCompleteField write SetTaskCompleteField;
      property TaskIndexField: Integer read FTaskIndexField write SetTaskIndexField;
      property TaskLinksField: TBlob read FTaskLinksField write SetTaskLinksField;
      property TaskStatusField: Integer read FTaskStatusField write SetTaskStatusField;
      property Placa: string read FPlaca write SetPlaca;

      property Location : string read FLocation write SetLocation;
      //da tela de agendamento
      property Label01  : string read FLabel01 write SetLabel01;
      property StarTime : TDateTime read FStarTime write SetStarTime;
      property EndTime  : TDateTime read FEndTime write SetEndTime;
      property AllDayEvent : Boolean read FAllDayEvent write SetAllDayEvent;

      //Campo criados
      property Locais: string read FLocais write SetLocais;
      property NF: Integer read FNF write SetNF;
      property Telefone: string read FTelefone write SetTelefone;
      property Email: string read FEmail write SetEmail;
      property Obs: string read FObs write SetObs;
      property Hora: TTime read FHora write SetHora;

      class function enviarEmail2(aSubject: string;aPlaca: String;aNF: Integer;aLocais: string;aTelefone: string;aEmail:string; aData: TDateTime; aHora: string; aObs:String): Boolean;
      class function EnviarEmail(const AAssunto, ADestino, AAnexo: String; ACorpo: String): Boolean;

      procedure EditarEmailEnviado;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\Cargas\cargas\Model\Model.Agendamento.pas;Método muito longo;171;"class function TModelAgendamento.EnviarEmail(const AAssunto, ADestino, AAnexo: String; ACorpo: String): Boolean;
var
  IniFile              : TIniFile;
  sFrom                : String;
  sBccList             : String;
  sHost                : String;
  iPort                : Integer;
  sUserName            : String;
  sPassword            : String;

  idMsg                : TIdMessage;
  IdText               : TIdText;
  idSMTP               : TIdSMTP;
  IdSSLIOHandlerSocket : TIdSSLIOHandlerSocketOpenSSL;
begin
  try
    try
      //Criação e leitura do arquivo INI com as configurações
      IniFile                          := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Config.ini');
      sFrom                            := IniFile.ReadString('Email' , 'From'     , sFrom);
      sBccList                         := IniFile.ReadString('Email' , 'BccList'  , sBccList);
      sHost                            := IniFile.ReadString('Email' , 'Host'     , sHost);
      iPort                            := IniFile.ReadInteger('Email', 'Port'     , iPort);
      sUserName                        := IniFile.ReadString('Email' , 'UserName' , sUserName);
      sPassword                        := IniFile.ReadString('Email' , 'Password' , sPassword);

      //Configura os parâmetros necessários para SSL
      IdSSLIOHandlerSocket                   := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
      IdSSLIOHandlerSocket.SSLOptions.Method := sslvSSLv23;
      IdSSLIOHandlerSocket.SSLOptions.Mode   := sslmClient;

      //Variável referente a mensagem
      idMsg                            := TIdMessage.Create;
      idMsg.CharSet                    := 'utf-8';
      idMsg.Encoding                   := meMIME;
      idMsg.From.Name                  := 'Agendamento do Centro de Distribuição Nome do Centro';
      idMsg.From.Address               := sFrom;
      idMsg.Priority                   := mpNormal;
      idMsg.Subject                    := AAssunto;

      //Add Destinatário(s)
      idMsg.Recipients.Add;
      idMsg.Recipients.EMailAddresses := ADestino;
      idMsg.CCList.EMailAddresses     := 'Comercial@conectsolutionsti.COM.BR';
      idMsg.BccList.EMailAddresses    := sBccList;
      //idMsg.BccList.EMailAddresses    := 'conectsolutions@hotmail.COM'; //Cópia Oculta

      //Variável do texto
      idText := TIdText.Create(idMsg.MessageParts);
      idText.Body.Add(ACorpo);
      idText.ContentType := 'text/html; text/plain; charset=iso-8859-1';

      //Prepara o Servidor
      IdSMTP                           := TIdSMTP.Create;
      IdSMTP.IOHandler                 := IdSSLIOHandlerSocket;
      IdSMTP.UseTLS                    := utUseExplicitTLS;//utUseImplicitTLS;
      IdSMTP.AuthType                  := satDefault;
      IdSMTP.Host                      := sHost;
      IdSMTP.Port                      := iPort;
      IdSMTP.Username                  := sUserName;
      IdSMTP.Password                  := sPassword;

      //Conecta e Autentica
      IdSMTP.Authenticate;
      IdSMTP.Connect;


      if AAnexo <> EmptyStr then
        if FileExists(AAnexo) then
          TIdAttachmentFile.Create(idMsg.MessageParts, AAnexo);

      //Se a conexão foi bem sucedida, envia a mensagem
      if IdSMTP.Connected then
      begin
        try
          IdSMTP.Send(idMsg);
        except on E:Exception do
          begin
            ShowMessage('Erro ao tentar enviar: ' + E.Message);
          end;
"
c:\fontes\Cargas\cargas\Model\Model.Agendamento.pas;Muitos parâmetros;275;"class function TModelAgendamento.enviarEmail2(aSubject: string;aPlaca: String;aNF: Integer;aLocais: string;aTelefone: string;aEmail:string; aData: TDateTime; aHora: string; aObs:String): Boolean;"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Método muito longo;70;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);
      procedure Setdataregistro(const Value: TDatetime);
      procedure SetCEP(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setcontato(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Setserial(const Value: string);
      function  GetWMIstring(const WMIClass, WMIProperty:string): string;
      procedure SetOnLabel6TextChanged(const Value: TNotifyEvent);
      procedure Setserialhd(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
    procedure Setid_chave(const Value: string);
    public
      property razao       : string    read Frazao write Setrazao;
      property cnpj        : string    read Fcnpj write Setcnpj;
      property ie          : string    read Fie write Setie;
      property im          : string    read Fim write Setim;
      property endereco    : string    read Fendereco write Setendereco;
      property numero      : integer   read Fnumero write Setnumero;
      property complemento : string    read Fcomplemento write Setcomplemento;
      property bairro      : string    read Fbairro write Setbairro;
      property cidade      : string    read Fcidade write Setcidade;
      property uf          : string    read Fuf write Setuf;
      property CEP         : string    read FCEP write SetCEP;
      property ativo       : string    read Fativo write Setativo;
      property responsavel : string    read Fresponsavel write Setresponsavel;
      property contato     : string    read Fcontato write Setcontato;
      property telcontato  : string    read Ftelcontato write Settelcontato;
      property telefone    : string    read Ftelefone write Settelefone;
      property email       : string    read Femail write Setemail;
      property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
      property Linguagem   : string    read FLinguagem write SetLinguagem;
      property serial      : string    read Fserial write Setserial;  //transferir do projeto antigo para esse
      property serialhd    : string    read Fserialhd write Setserialhd;
      property ContraSenha : String    read FContraSenha write SetContraSenha;
      property Data_exp    : TDateTime read FData_exp write SetData_exp;
      property id_chave    : string    read Fid_chave write Setid_chave;

      //Verificar se será necessário criar mais propertys para a tabela Registro
      property OnLabel6TextChanged: TNotifyEvent read FOnLabel6TextChanged write SetOnLabel6TextChanged;
      procedure enviarEmail; //Já chama  aqui a gravação no banco de  licenças
      function GerarSerial: string;
      class function validarDados(aRegistro: TModelRegistro ; aLingua: string) : boolean;
      class function GravarNoBancoLicencas(aRegistro : TModelRegistro): Boolean;  //Tabela Chaves
      class function ValidarLicenca(adata: TDateTime; acnpj: string): Boolean;
      class function GravarRegistro(aRegistro: TModelRegistro; achave: String): Boolean;
      class function GravarContraSenha(aRegistro: TModelRegistro): Boolean;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Uso de with;304;"with qry do"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Método muito longo;273;"function TModelRegistro.GerarSerial: string;
var
  x:string;
  Y:string;
  z:string;
  data : TDateTime;
  qry, qry2: TFDQuery;
  Registrarfrm: TFrmRegistrar;
begin
  Result:= '';
  FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  FWMIService   := FSWbemLocator.ConnectServer('localhost', 'root\CIMV2', '', '');
  X:=Trim(GetWMIstring('Win32_BIOS','SerialNumber')); //Serial da Bios
  Y:=Trim(GetWMIstring('Win32_PhysicalMedia','SerialNumber')); //Serial do HD

  //label6.Caption:= x;
  //label4.Caption:= y;
  z:=x+y+(DateToStr(date));
  //label5.Caption:=z;
  Result:= z;

  qry:= TFDquery.Create(nil);
  qry.Connection  := TConexaoLicencas.CreateConnection;
  try
    qry.SQL.Clear;
    qry.SQL.Add('select * from registro');
    qry.SQL.Add('');

    qry.ExecSQL;
    qry.Connection.Commit;

    with qry do

     //FDQuery1.Edit;
     //Desabilitar botao Geral Serial
     //Edit1.Enabled:=False;
     //BtnRegistrar.Enabled:=False;
     //Button1.Enabled:=False;
     //PageControl1.Pages[1].TabVisible := False;
     // fim


     qry.FieldByName('chave').AsString      := z;
     qry.FieldByName('Data_inc').AsDateTime := Date;
     Data := date;
     qry.FieldByName('Data_exp').AsDateTime:=Data;
     //ShowMessage(DateToStr(Data+30));
     qry.FieldByName('serialhd').AsString:=y;

     qry.FieldByName('ID_Chave').AsInteger := qry2.FieldByName('ID_Chave').AsInteger;

     qry.FieldByName('contrasenha').AsString:='0';
     qry.FieldByName('ativado').AsString:='N';
     qry.Post;

  finally
     qry.Free;
  end;
"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Método muito longo;354;"class function TModelRegistro.GravarContraSenha(
  aRegistro: TModelRegistro): Boolean;
var
  qry: TFDQuery;
begin
  Result := False;
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  //Checar se a CONTRASENHA Existe se não avisar ao usuário que a Contra Senha está errada e encerrar o programa?
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('select contrasenha from registro');
    qry.SQL.Add(' where contrasenha = :contrasenha');
    qry.ParamByName('contrasenha').DataType := ftString;
    qry.ParamByName('contrasenha').AsString := aRegistro.ContraSenha;
    qry.Open;

    if qry.RecordCount > 0 then //Encontrou a ContraSenha faz o update
    begin
      qry.Connection.StartTransaction;
      try
        qry.close;
        qry.SQL.Clear;

        qry.SQL.Text:='UPDATE LICENCAS.REGISTRO      ' +
                      'SET                           ' +
                     // 'ID           = :id,           ' +
                     // 'ID_CHAVE     = :ID_CHAVE,     ' +
                     // 'CHAVE        = :CHAVE,        ' +
                      'DATA_INC     = :DATA_INC,     ' +
                      'DATA_EXP     = :DATA_EXP,     ' +
                      'CONTRASENHA  = :CONTRASENHA,  ' +
                      'ATIVADO      = :ATIVADO,      ' +
                    //  'SERIALHD     = :SERIALHD      ' +
                      'WHERE                         ' +
                      'CONTRASENHA     = :CONTRASENHA      ';


        qry.ParamByName('DATA_INC').DataType     := ftDate;
        qry.ParamByName('DATA_INC').AsDateTime   := Now;
        qry.ParamByName('DATA_EXP').DataType     := ftDate;
        qry.ParamByName('DATA_EXP').AsDate       := aRegistro.Data_exp + 30;
        qry.ParamByName('CONTRASENHA').DataType  := ftString;
        qry.ParamByName('CONTRASENHA').AsString  := aRegistro.ContraSenha;
        qry.ParamByName('ATIVADO').DataType      := ftString;
        qry.ParamByName('ATIVADO').AsString      := aRegistro.ativo;

        qry.ExecSQL;
        qry.Connection.Commit;

        Result := True;
      Except
      On E: Exception do
        begin
           Showmessage('Erro ao gravar tabela registro!'+ E.Message);
           qry.Connection.Rollback;
           Result := False;
        end;
"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Método muito longo;426;"class function TModelRegistro.GravarNoBancoLicencas(
  aRegistro: TModelRegistro): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
  idChave : integer;
begin
  //Testar se a Licença já existe no banco de dados  buscar pelo cnpj  trazer o id e pesquisar na tabela registro
  //Se já existir o cnpj na tabela chaves e estiver aguardando a gravação da contrasenha na tabela registro o que fazer?
  // Informar o usuário que está aguardando a contrasenha e pular fora?
  qry:= TFDquery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('Select * from chaves');
    qry.SQL.Add(' where cnpj =:cnpj');
    qry.ParamByName('cnpj').DataType := ftString;
    qry.ParamByName('cnpj').AsString := aRegistro.cnpj;
    qry.Open;

    if qry.RecordCount > 0 then //O registro dos dados do cliente existe na tabela chaves
    begin
      ShowMessage('Registro encontrado');
      idChave:= qry.FieldByName('id_chave').AsInteger;

      qry.Close;
      qry.SQL.Clear;
      qry.SQL.Add('Select contrasenha from registro');
      qry.SQL.Add(' where id_chave=:id_chave');
      qry.ParamByName('id_chave').DataType  := ftInteger;
      qry.ParamByName('id_chave').AsInteger := idChave;
      qry.Open;

      if (qry.RecordCount > 0) and (qry.fieldbyname('contrasenha').AsString='') then
      begin
          //Gravar no Banco primeiro registro
          qry:= TFDquery.Create(nil);
          qry.Connection := TConexaoLicencas.CreateConnection;
          qry.Connection.StartTransaction;
          try
            qry.Close;
            qry.SQL.Clear;
            qry.SQL.Add('INSERT INTO      ' +
                        ' licencas.chaves ' +
                        '(id_chave,       ' + //1
                        'razao,           ' + //2
                        'cnpj,            ' + //3
                        'ie,              ' + //4
                        'im,              ' + //5
                        'endereco,        ' + //6
                        'numero,          ' + //7
                        'complemento,     ' + //8
                        'bairro,          ' + //9
                        'cidade,          ' + //10
                        'cep,             ' + //11
                        'uf,              ' + //12
                        'ativo,           ' + //13
                        'contato,         ' + //14
                        'telcontato,      ' + //15
                        'email,           ' + //16
                        'datacadastro,    ' + //17
                        'dataalteracao    ' + //18
                       // 'dataexclusao   ' + //19
                        ')                ' +
                        'VALUES (         ' +
                        ':id_chave,       ' + //1 ok
                        ':razao,          ' + //2 ok
                        ':cnpj,           ' + //3 ok
                        ':ie,             ' + //4 ok
                        ':im,             ' + //5 ok
                        ':endereco,       ' + //6 ok
                        ':numero,         ' + //7 ok
                        ':complemento,    ' + //8 ok
                        ':bairro,         ' + //9 ok
                        ':cidade,         ' + //10 ok
                        ':cep,            ' + //11 ok
                        ':uf,             ' + //12 ok
                        ':ativo,          ' + //13 ok
                        ':contato,        ' + //14
                        ':telcontato,     ' + //15
                        ':email,          ' + //16
                        ':datacadastro,   ' + //17 ok
                        ':dataalteracao   ' + //18 ok
                      //  ':dataexclusao, ' + //19 ok
                        ')                ');

             qry.ParamByName('id_chave').DataType    := ftInteger;             //1
             qry.ParamByName('razao').DataType       := ftString;
             qry.ParamByName('razao').AsString       := aRegistro.razao;       //2
             qry.ParamByName('cnpj').DataType        := ftString;
             qry.ParamByName('cnpj').AsString        := aRegistro.cnpj ;       //3
             qry.ParamByName('ie').DataType          := ftString;
             qry.ParamByName('ie').AsString          := aRegistro.ie;          //4
             qry.ParamByName('im').DataType          := ftString;
             qry.ParamByName('im').AsString          := aRegistro.im;          //5
             qry.ParamByName('endereco').DataType    := ftString;
             qry.ParamByName('endereco').AsString    := aRegistro.endereco;    //6
             qry.ParamByName('numero').DataType      := ftInteger;
             qry.ParamByName('numero').AsInteger     := aRegistro.numero;      //7
             qry.ParamByName('complemento').DataType := ftString;
             qry.ParamByName('complemento').AsString := aRegistro.complemento; //8
             qry.ParamByName('cep').DataType         := ftString;
             qry.ParamByName('cep').AsString         := aRegistro.CEP;         //9
             qry.ParamByName('cidade').DataType      := ftString;
             qry.ParamByName('cidade').AsString      := aRegistro.Cidade;      //10
             qry.ParamByName('bairro').DataType      := ftString;
             qry.ParamByName('bairro').AsString      := aRegistro.Bairro;      //11
             qry.ParamByName('uf').DataType          := ftString;
             if Length(aRegistro.UF) > 0 then
               UF := Copy(aRegistro.UF, 1, 2)
             else
               UF := '';

             qry.ParamByName('uf').AsString          := UF;                    //12

             qry.ParamByName('ativo').DataType       := ftString;
             if Length(aRegistro.ativo) > 0 then
               Ativo := Copy(aRegistro.ativo, 1, 1)
             else
               Ativo := '';

             qry.ParamByName('ativo').AsString       := Ativo;                 //13

             qry.ParamByName('contato').DataType     := ftString;
             qry.ParamByName('contato').AsString     := aRegistro.contato;     //14

             qry.ParamByName('telcontato').DataType     := ftString;
             qry.ParamByName('telcontato').AsString     := aRegistro.telcontato; //15

             qry.ParamByName('email').DataType     := ftString;
             qry.ParamByName('email').AsString     := aRegistro.email;           //16

             qry.ParamByName('datacadastro').DataType  := ftDateTime;
             qry.ParamByName('datacadastro').AsDateTime:= Now;                 //17

             qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //18
             qry.ParamByName('dataalteracao').AsDateTime:= Now;

        //     qry.ParamByName('dataexclusao').DataType := ftDateTime;
        //     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //19

             qry.ExecSQL;
             qry.Connection.Commit;

             Result := True;
          Except
           On E: Exception do
              begin
                if aRegistro.Linguagem='Portugues' then
                  ShowMessage('Erro ao tentar gravar licença!' + E.Message)
                else
                  ShowMessage('Error trying to write license!!' + E.Message);

                qry.Connection.Rollback;
                qry.Free;
              end;
"
c:\fontes\Cargas\cargas\Model\Model.Registro.pas;Método muito longo;610;"class function TModelRegistro.GravarRegistro(
  aRegistro: TModelRegistro; achave: String): Boolean;
var
  qry: TFDQuery;
  data: TDateTime;
begin
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO REGISTRO      ' +
                 '(id,                      ' +
                 'id_chave,                 ' +
                 'chave,                    ' +
                 'data_inc,                 ' +
                 'data_exp,                 ' +
                 'contrasenha,              ' +
                 'ativado,                  ' +
                 'serialhd                  ' +
               //  'WHERE id_chave =:id_chave ' +
                 ')                         ' +
                 'VALUES (                  ' +
                 ':id,                      ' +
                 ':id_chave,                ' +
                 ':chave,                   ' +
                 ':data_inc,                ' +
                 ':data_exp,                ' +
                 ':contrasenha,             ' +
                 ':ativado,                 ' +
                 ':serialhd                 ' +
                 ')                         ');

     qry.ParamByName('chave').DataType     := ftString;
     qry.ParamByName('chave').AsString      := aChave;

     qry.ParamByName('Data_inc').DataType   := ftDateTime;
     qry.ParamByName('Data_inc').AsDateTime := Date;

     Data := Date;

     qry.ParamByName('Data_exp').DataType    := ftDateTime;
     qry.ParamByName('Data_exp').AsDateTime  :=Data;

     //ShowMessage(DateToStr(Data+30));
     qry.ParamByName('serialhd').DataType    := ftDateTime;
     qry.ParamByName('serialhd').AsString    :=aRegistro.serialhd;

     qry.ParamByName('contrasenha').AsString :='0';
     qry.ParamByName('ativado').AsString     :='N';

     //Ver como fazer?
     //qry.ParamByName('id_chave').AsInteger := //qry2.FieldByName('ID_Chave').AsInteger;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
  On E: Exception do
    begin
       Showmessage('Erro ao gravar tabela registro!'+ E.Message);
       qry.Connection.Rollback;
       Result := False;
    end;
"
c:\fontes\Cargas\cargas\Painel\Unit1.pas;Método muito longo;101;"procedure TForm1.VerificaFila;
begin
  // Criar a Thread anonima
  TThread.CreateAnonymousThread(
    procedure
    var
      QryLocal, QryBoNota, QryChamados: TFDquery;
      LBoNota: String;
      Fila: TQueue<string>;
      Placa, Local: string;
      proximo: string;
      i: Integer;

      SearchString: string;
      LineIndex: Integer;
    begin
      Fila := TQueue<string>.Create;
      Queue := TQueue<string>.Create;

      QryLocal := TFDquery.Create(nil);
      QryLocal.Connection := FDConnection1;
      try
        QryLocal.Close;
        QryLocal.SQL.Clear;
        QryLocal.SQL.Add('select f.*, v.*, v.placa,l.local from fila f');
        QryLocal.SQL.Add
          (' inner join veiculos v on(f.idveiculo = v.idveiculos) ');
        QryLocal.SQL.Add(' inner join locais l on(f.idlocal = l.idlocais)');
        QryLocal.SQL.Add(' where f.ativo=''S'' '); // se comentar pega todos os
        QryLocal.SQL.Add(' order by f.datahoraentrada');

        // Se a conexão cair reconectar
        if not FDConnection1.Connected then
          FDConnection1.Connected := True;

        QryLocal.Open();

        {$IFDEF DEBUG}
          Showmessage('QryLocal Qtde Registros é de: ' +
          IntToStr(QryLocal.RecordCount));
        {$ENDIF}

        if QryLocal.RecordCount > 0 then
        begin

          // Adicionar Todas as placas ao Memo1
          Memo1.Clear; // Limpa o Memo1 antes de adicionar novos dados
          QryLocal.First;
          while not QryLocal.Eof do
          begin
            Placa := QryLocal.FieldByName('placa').AsString;
            Local := QryLocal.FieldByName('local').AsString;
            TThread.Synchronize(nil,
              procedure
              begin
                Memo1.Lines.Add(Placa + ' - ' + Local);
                // Adiciona a linha ao Memo1
              end);
            Placa := QryLocal.FieldByName('placa').AsString;
            Fila.Enqueue(Placa);
            QryLocal.Next;
          end;
"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Método muito longo;66;"  TcxSchedulerEditorIsValidEvent = function: Boolean of object;

  TcxSchedulerCustomEditorFormHelper = class
  private
    FEvent: TcxSchedulerControlEvent;
    FForceSeries: Boolean;
    FForm: TForm;
    FLockCount: Integer;
    FModified: Boolean;
    FReadOnly: Boolean;
    FOnChanged: TNotifyEvent;
    FOnIsValid: TcxSchedulerEditorIsValidEvent;
    FOnSaveChanges: TNotifyEvent;

    function GetStorage: TcxCustomSchedulerStorage;
    function IsValid: Boolean;
    procedure SetModified(AValue: Boolean);
    procedure SetReadOnly(AValue: Boolean);
  protected
    procedure DoChanged; virtual;
    procedure DoExecuteAction(var AModalResult: TModalResult); virtual;
    function DoIsValid: Boolean; virtual;
    procedure DoRefresh; virtual;
    procedure DoSaveChanges; virtual;
    function GetEvent: TcxSchedulerControlEvent; virtual;
    function IsEditorModal: Boolean; virtual;

    procedure Cancel(var AModalResult: TModalResult); virtual;
    procedure Close(var AModalResult: TModalResult); virtual;
    procedure Delete(var AModalResult: TModalResult); virtual;
    procedure Save(var AModalResult: TModalResult); virtual;

    property Form: TForm read FForm;
    property OnIsValid: TcxSchedulerEditorIsValidEvent read FOnIsValid write FOnIsValid;
  public
    constructor Create(AForm: TForm; AEvent: TcxSchedulerControlEvent); virtual;

    procedure ExecuteAction(AModalResult: TModalResult);
    procedure Changed;
    function ValidateOccurrenceDate(AEvent: TcxSchedulerControlEvent; ANewStart, ANewFinish: TDateTime): Boolean;

    procedure BeginUpdate;
    procedure CancelUpdate;
    procedure EndUpdate;
    function IsUpdating: Boolean;

    property Event: TcxSchedulerControlEvent read GetEvent;
    property ForceSeries: Boolean read FForceSeries write FForceSeries;
    property Modified: Boolean read FModified write SetModified;
    property ReadOnly: Boolean read FReadOnly write SetReadOnly;
    property Storage: TcxCustomSchedulerStorage read GetStorage;
    property OnChanged: TNotifyEvent read FOnChanged write FOnChanged;
    property OnSaveChanges: TNotifyEvent read FOnSaveChanges write FOnSaveChanges;
  end;
"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Método muito longo;150;"    function HasStorageEvent: Boolean;
    procedure SetAllowDelete(AValue: Boolean);
    procedure SetAllowRecurrence(AValue: Boolean);
    procedure SetIntersection(const Value: Boolean);
    procedure SetIsIntersectionValid(const Value: Boolean);
  protected
    procedure ApplyEventTime;
    procedure CalculateIntersection;
    procedure UpdateEditingInfo;

    procedure DoExecuteAction(var AModalResult: TModalResult); override;
    procedure DoInitialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo); virtual;
    procedure DoRefresh; override;
    function GetEvent: TcxSchedulerControlEvent; override;
    procedure NormalizeTopMostWindows;
    function PostEvent: TcxSchedulerEvent; virtual;
    procedure RefreshRecurrenceInfo;

    procedure Cancel(var AModalResult: TModalResult); override;
    procedure Close(var AModalResult: TModalResult); override;
    procedure Delete(var AModalResult: TModalResult); override;
    procedure Save(var AModalResult: TModalResult); override;

    property Source: TcxSchedulerEvent read FSource;
    property CanDelete: Boolean read FCanDelete;
    property EditingInfo: TcxSchedulerEditingEventInfo read FEditingInfo;
    property IsEventRecurring: Boolean read FIsEventRecurring;
  public
    constructor Create(AForm: TForm; AEvent: TcxSchedulerControlEvent); override;
    destructor Destroy; override;

    function CanClose: Boolean;
    function GetRecurrenceDescription: string;
    procedure Initialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo);
    function IsNewEvent: Boolean;
    function CanDeleteEvent: Boolean;
    procedure PopulateLabelColor(AProperties: TcxImageComboBoxProperties);
    procedure PopulateShowTimeAsPanel(AProperties: TcxImageComboBoxProperties);

    property AllowDelete: Boolean read FAllowDelete write SetAllowDelete;
    property AllowHiddenEvents: Boolean read FAllowHiddenEvents write FAllowHiddenEvents;
    property AllowRecurrence: Boolean read FAllowRecurrence write SetAllowRecurrence;
    property AllowShare: Boolean read FAllowShare write FAllowShare;
    property BiasTime: TDateTime read FBiasTime write FBiasTime;
    property DeleteExceptions: Boolean read FDeleteExceptions write FDeleteExceptions;
    property DeleteSeries: Boolean read FDeleteSeries write FDeleteSeries;
    property Duration: TDateTime read FDuration write FDuration;
    property Intersection: Boolean read FIntersection write SetIntersection;
    property IsIntersectionValid: Boolean read FIsIntersectionValid write SetIsIntersectionValid;
    property IsRemindersActive: Boolean read FIsRemindersActive;
    property LookAndFeel: TcxLookAndFeel read FLookAndFeel;
    property NeedCheckLossOfExceptions: Boolean read FNeedCheckLossOfExceptions
      write FNeedCheckLossOfExceptions;
    property PatternStart: TDateTime read FPatternStart write FPatternStart;
    property PatternFinish: TDateTime read FPatternFinish write FPatternFinish;
    property RecurrenceActivate: Boolean read FRecurrenceActivate write FRecurrenceActivate;
    property RecurrenceInfo: TcxSchedulerEventRecurrenceInfo read FRecurrenceInfo;
    property ShowResources: Boolean read FShowResources write FShowResources;
    property ShowTaskComplete: Boolean read FShowTaskComplete write FShowTaskComplete;
    property OnDelete: TcxOnDeleteEventFunc read FOnDelete write FOnDelete;
    property OnApplyEventTime: TNotifyEvent read FOnApplyEventTime write FOnApplyEventTime;
  end;
"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Método muito longo;393;"    procedure OnChanged(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormActivate(Sender: TObject);
    procedure cbAllDayEventPropertiesChange(Sender: TObject);
    procedure StartDateChanged(Sender: TObject);
    procedure cbReminderClick(Sender: TObject);
    procedure cbReminderMinutesBeforeStartPropertiesValidate(
      Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
    procedure cbReminderMinutesBeforeStartPropertiesPopup(Sender: TObject);
    procedure OnEventTimeChanged(Sender: TObject);
    procedure btnRecurrenceClick(Sender: TObject);
    procedure OnResourceIDChanged(Sender: TObject);
    procedure btnFindTimeClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure seTaskCompleteChange(Sender: TObject);
    procedure cbxTaskStatusChange(Sender: TObject);
    procedure cbResourcesPropertiesClickCheck(Sender: TObject;
      ItemIndex: Integer; var AllowToggle: Boolean);
    procedure FormShow(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnCancelClick(Sender: TObject);
  private
    FRecurrenceInfoHeight: Integer;
    procedure DoApplyEventTime(Sender: TObject);
    function GetAllowHiddenEvents: Boolean;
    function GetDeleteExceptions: Boolean;
    function GetEventName: string;
    function GetForceSeries: Boolean;
    function GetHelper: TcxSchedulerEventStandardEditorFormHelper;
    procedure SetAllowHiddenEvents(AValue: Boolean);
    procedure SetDeleteExceptions(AValue: Boolean);
    procedure SetForceSeries(AValue: Boolean);
  protected
    procedure ApplyEventTime;
    procedure CheckControlStates; virtual;
    function CheckTimeRange(var AStart, AFinish: TDateTime): Boolean; virtual;
    procedure CheckVisible; virtual;
    procedure ClearModifiedFlag; override;
    procedure DoHelperChanged; override;
    function DoHelperIsValid: Boolean; override;
    procedure DoHelperSaveChanges; override;
    function FindAvailableTime: Boolean; virtual;
    procedure GetEditingEventTime(var AStart, AFinish: TDateTime; var AState: Integer); virtual;
    function GetFormColor: TColor; override;
    function GetHelperClass: TcxSchedulerEditorHelperClass; override;
    function GetRecurrenceDescription: string; virtual;
    function GetResourcesPanelVisible: Boolean; virtual;
    procedure Initialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo); override;
    procedure InitializeControls; override;
    procedure InitializeHelper(AEvent: TcxSchedulerControlEvent); override;
    procedure InitializeTimeControls(const AStart, AFinish: TDateTime; AllDayEvent: Boolean); virtual;
    procedure InitLabelColor;
    procedure InitReminderPanel;
    procedure InitResources;
    procedure InitShowTimeAsPanel;
    procedure InitTaskCompletePanel;
    function IsValid: Boolean; virtual;
    procedure LoadEventValuesIntoControls; override;
    procedure RefreshRecurrenceInfo; virtual;
    procedure SaveResourceID; virtual;
    procedure SetActiveControl; virtual;
    procedure SetCaptions; virtual;
    procedure SetReminderMinutesBeforeStart; virtual;

    property DeleteExceptions: Boolean read GetDeleteExceptions write SetDeleteExceptions;
    property Helper: TcxSchedulerEventStandardEditorFormHelper read GetHelper;
  public
    property AllowHiddenEvents: Boolean read GetAllowHiddenEvents write SetAllowHiddenEvents;
    property EventName: string read GetEventName;
    property ForceSeries: Boolean read GetForceSeries write SetForceSeries;
  end;
"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Uso de with;1593;"with cbResources.Properties.Items do"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Uso de with;1606;"with TcxCheckComboBoxItem(Add) do"
c:\fontes\Cargas\cargas\View\cxSchedulerEventEditor.pas;Uso de with;1632;"with cbxTaskStatus.Properties do"
c:\fontes\Cargas\cargas\View\View.CustomizedEventEditorForm.pas;Método muito longo;135;"procedure TcxSchedulerEventEditorCustomized.btnOkClick(Sender: TObject);
var
  //EnviarConfirmacao: TModelAgendamento;
  LIdLocal: integer;
  qryIdLocal: TFDQuery;
  qryIdVeiculo:TFDQuery;
  qryFila: TFDQuery;
begin
  inherited;

  //localizar o veiculo pela placa no cadastro para pegar o idveiculo
  qryIdVeiculo:= TFDQuery.Create(nil);
  qryIdVeiculo.Connection:= DataModule3.FDConnection1;
  try
    qryIdVeiculo.SQL.Add('select idveiculos from veiculos');
    qryIdVeiculo.SQL.Add(' where placa = :placa');
    qryIdVeiculo.parambyname('placa').AsString := Event.GetCustomFieldValueByName('Placa'); //CBPlacasVeiculos.EditValue;//cxTextEdit1.editValue;
    qryIdVeiculo.open;

    if qryIdVeiculo.RecordCount > 0 then
    begin
      //Preenche parâmetros a serem enviados no e-mail
      LSubject    := teSubject.EditValue;
      LLocal      := Event.GetCustomFieldValueByName('Locais');// cxDBComboBoxLocais.;//cxDBComboBoxLocais.EditValue;     //como pegar o valor selecionado
      LPlaca      := Event.GetCustomFieldValueByName('Placa');//CBPlacasVeiculos.Text;//cxTextEdit1.EditValue;
      LNF         := cxTextEdit2.EditValue;
      LidVeiculo  := qryIdVeiculo.FieldByName('idveiculos').AsInteger;
      LNotaFiscal := cxTextEdit2.editValue;
      LTelefone   := cxTextEdit3.EditValue;
      LEmail      := cxTextEdit4.EditValue;
      LData       := deStart.EditingValue;
      LHora       := teStart.EditValue;
      LObs        := meMessage.EditValue;

      LMemo := TStringList.Create;
      LMemo.Add(LSubject);
      LMemo.Add('Local    :' + LLocal);
      LMemo.Add('Placa    :' + LPlaca);
      LMemo.Add('NF       :' + IntToStr(LNotaFiscal));
      LMemo.Add('Telefone :' + LTelefone);
      LMemo.Add('E-mail   :' + LEMail);
      LMemo.Add('Data     :' + DateTimeToStr(LData));
      LMemo.Add('Hora     :' + LHora);
      LMemo.Add('Obs.     :' + LObs);

    end
    else
    begin
      TThread.Synchronize(nil,
      procedure
      begin
        ShowMessage('Veiculo Não cadastrado!');
        //Inserir o veiculo na tabela veiculos
        Application.CreateForm(TFrmEntradaVeiculos, FrmEntradaVeiculos);
        FrmEntradaVeiculos.ShowModal;
      end);
    end;
"
c:\fontes\Cargas\cargas\View\View.GerenciaFila.pas;Método muito longo;112;"procedure TFrmGerenciarFila.FormShow(Sender: TObject);
begin
  //Enviar os e-mails do agendamento - ver a Thread para essa parte
  TTHread.CreateAnonymousThread(procedure
  var
    qryEmviarEmail, qry2: TFDQuery;
    LEnviar : TModelAgendamento;
    LSubject: string;
    LEmail: String;
    LMemo: String;
    LDataEnvio: TDate;
    LPlaca: String;
    LLocal: String;
    LNF: Integer;
    LTelefone: String;
    LHora: TTime;
    LOBs: String;
  begin
    qryEmviarEmail:= TFDquery.Create(nil);
    qryEmviarEmail.Connection:= DataModule3.FDConnection1;
    try
      qryEmviarEmail.Close;
      qryEmviarEmail.SQL.Clear;
      qryEmviarEmail.SQL.Add('select * from email');
      qryEmviarEmail.sql.Add(' where enviado=''N'' ');
      qryEmviarEmail.Open;

      if qryEmviarEmail.RecordCount > 0 then
      begin
        LSubject   := qryEmviarEmail.FieldByName('subject').AsString;
        LEmail     := qryEmviarEmail.FieldByName('email').AsString;
        LMemo      := qryEmviarEmail.FieldByName('memo').AsString;
        LDataEnvio := qryEmviarEmail.FieldByName('dataenvio').AsDateTime;
        LPlaca     := qryEmviarEmail.FieldByName('placa').AsString;;
        LLocal     := qryEmviarEmail.FieldByName('local').AsString;;
        LNF        := qryEmviarEmail.FieldByName('nf').AsInteger;
        LTelefone  := qryEmviarEmail.FieldByName('telefone').AsString;
        LHora      := qryEmviarEmail.FieldByName('hora').AsVariant;
        LOBs       := qryEmviarEmail.FieldByName('memo').AsString;


        qryEmviarEmail.First;
        while not qryEmviarEmail.Eof do
        begin
          LEnviar := TModelAgendamento.Create;
          try
            if LEnviar.EnviarEmail2(LSubject, LPlaca, LNF, LLocal, LTelefone, LEmail, LDataEnvio, TimeToStr(LHora) , LObs) then
            begin
                LEnviar.EditarEmailEnviado;
                //update da tabela email o campo enviado tem que mudar para S
                qry2:= TFDquery.Create(nil);
                qry2.Connection:= DM.DataModule3.FDConnection1;
                try
                  qry2.SQL.clear;
                  qry2.SQL.Text :=
                  'UPDATE email  ' +
                  'SET enviado = ''S'' ' +  //Nono N veiculos não vão para o monitor
                  'WHERE idemail = :idemail';

                  qry2.ParamByName('idemail').AsInteger := qryEmviarEmail.FieldByName('idemail').AsInteger;

                  qry2.ExecSQL;
                finally
                  qry2.Free;
                end;
"
c:\fontes\carregar vumeter em panel\Unit1.pas;Uso de with;349;"with ListView1.Columns.Add do"
c:\fontes\carregar vumeter em panel\Unit1.pas;Uso de with;355;"with ListView1.Columns.Add do"
c:\fontes\carregar vumeter em panel\Unit1.pas;Uso de with;361;"with ListView1.Columns.Add do"
c:\fontes\carregar vumeter em panel\Unit1.pas;Método muito longo;557;"procedure TForm1.ToggleFullScreen;
const
  ID_FULLSCREEN = 897;
begin
  if MPCHandle = 0 then Exit;

  if not MPCFullScreenMode then
  begin
    // === Entrar em tela cheia ===

    // Remove do painel
    Winapi.Windows.SetParent(MPCHandle, 0);

    // Restaura bordas/janela
    SetWindowLong(MPCHandle, GWL_STYLE,
      GetWindowLong(MPCHandle, GWL_STYLE) or WS_CAPTION or WS_THICKFRAME);

    // Traz para frente
    SetForegroundWindow(MPCHandle);

    // Entra em fullscreen (Alt+Enter)
    SendMessage(MPCHandle, WM_COMMAND, ID_FULLSCREEN, 0);

    // Marca estado
    MPCFullScreenMode := True;

    // Atualiza texto do botão
    btnToggleFull.Caption := 'Voltar ao Painel';
  end
  else
  begin
    // === Voltar ao painel ===

    // Sai do fullscreen
    SendMessage(MPCHandle, WM_COMMAND, ID_FULLSCREEN, 0);
    Sleep(300);

    // Remove bordas
    SetWindowLong(MPCHandle, GWL_STYLE,
      GetWindowLong(MPCHandle, GWL_STYLE) and not WS_CAPTION and not WS_THICKFRAME);

    // Volta ao painel
    Winapi.Windows.SetParent(MPCHandle, Panel3.Handle);

    // Redimensiona
    SetWindowPos(MPCHandle, 0, 0, 0, Panel3.Width, Panel3.Height, SWP_NOZORDER or SWP_SHOWWINDOW);

    // Marca estado
    MPCFullScreenMode := False;

    // Atualiza texto do botão
    btnToggleFull.Caption := 'Tela Cheia';
  end;
"
c:\fontes\CodeSmellDetector\uProjeto.pas;Método muito longo;8;"function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;

implementation

uses
  System.IOUtils, Xml.XMLDoc, Xml.XMLIntf;

function ObterArquivosDoProjeto(const ProjetoPath: string): TArray<string>;
var
  DprojFile: string;
  ArquivosDproj: TArray<string>;
  XML: IXMLDocument;
  Root, ItemGroup, Ref: IXMLNode;
  Lista: TList<string>;
  BaseDir, FilePath: string;
  PastasIgnoradas: TArray<string>;
  Ignorar: Boolean;
  Pasta: string;
  i, j: Integer;
begin
  Lista := TList<string>.Create;
  try
    // Localiza o primeiro .dproj no diretório
    ArquivosDproj := TDirectory.GetFiles(ProjetoPath, '*.dproj');
    if Length(ArquivosDproj) = 0 then
      raise Exception.Create('Arquivo .dproj não encontrado no diretório.');

    DprojFile := ArquivosDproj[0];

    XML := TXMLDocument.Create(nil);
    XML.LoadFromFile(DprojFile);
    XML.Active := True;

    BaseDir := ExtractFilePath(DprojFile);
    PastasIgnoradas := ['\lib\', '\thirdparty\', '\vendor\', '\external\', '\packages\'];

    Root := XML.DocumentElement;

    for i := 0 to Root.ChildNodes.Count - 1 do
    begin
      ItemGroup := Root.ChildNodes[i];
      if SameText(ItemGroup.NodeName, 'ItemGroup') then
      begin
        for j := 0 to ItemGroup.ChildNodes.Count - 1 do
        begin
          Ref := ItemGroup.ChildNodes[j];
          if SameText(Ref.NodeName, 'DCCReference') then
          begin
            if Ref.HasAttribute('Include') then
            begin
              FilePath := TPath.Combine(BaseDir, Ref.Attributes['Include']);
              FilePath := TPath.GetFullPath(FilePath);

              Ignorar := False;
              for Pasta in PastasIgnoradas do
                if FilePath.ToLower.Contains(Pasta) then
                begin
                  Ignorar := True;
                  Break;
                end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha150_Métodomuitolongo.pas;Método muito longo;7;"    function HasStorageEvent: Boolean;
    procedure SetAllowDelete(AValue: Boolean);
    procedure SetAllowRecurrence(AValue: Boolean);
    procedure SetIntersection(const Value: Boolean);
    procedure SetIsIntersectionValid(const Value: Boolean);
  protected
    procedure ApplyEventTime;
    procedure CalculateIntersection;
    procedure UpdateEditingInfo;

    procedure DoExecuteAction(var AModalResult: TModalResult); override;
    procedure DoInitialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo); virtual;
    procedure DoRefresh; override;
    function GetEvent: TcxSchedulerControlEvent; override;
    procedure NormalizeTopMostWindows;
    function PostEvent: TcxSchedulerEvent; virtual;
    procedure RefreshRecurrenceInfo;

    procedure Cancel(var AModalResult: TModalResult); override;
    procedure Close(var AModalResult: TModalResult); override;
    procedure Delete(var AModalResult: TModalResult); override;
    procedure Save(var AModalResult: TModalResult); override;

    property Source: TcxSchedulerEvent read FSource;
    property CanDelete: Boolean read FCanDelete;
    property EditingInfo: TcxSchedulerEditingEventInfo read FEditingInfo;
    property IsEventRecurring: Boolean read FIsEventRecurring;
  public
    constructor Create(AForm: TForm; AEvent: TcxSchedulerControlEvent); override;
    destructor Destroy; override;

    function CanClose: Boolean;
    function GetRecurrenceDescription: string;
    procedure Initialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo);
    function IsNewEvent: Boolean;
    function CanDeleteEvent: Boolean;
    procedure PopulateLabelColor(AProperties: TcxImageComboBoxProperties);
    procedure PopulateShowTimeAsPanel(AProperties: TcxImageComboBoxProperties);

    property AllowDelete: Boolean read FAllowDelete write SetAllowDelete;
    property AllowHiddenEvents: Boolean read FAllowHiddenEvents write FAllowHiddenEvents;
    property AllowRecurrence: Boolean read FAllowRecurrence write SetAllowRecurrence;
    property AllowShare: Boolean read FAllowShare write FAllowShare;
    property BiasTime: TDateTime read FBiasTime write FBiasTime;
    property DeleteExceptions: Boolean read FDeleteExceptions write FDeleteExceptions;
    property DeleteSeries: Boolean read FDeleteSeries write FDeleteSeries;
    property Duration: TDateTime read FDuration write FDuration;
    property Intersection: Boolean read FIntersection write SetIntersection;
    property IsIntersectionValid: Boolean read FIsIntersectionValid write SetIsIntersectionValid;
    property IsRemindersActive: Boolean read FIsRemindersActive;
    property LookAndFeel: TcxLookAndFeel read FLookAndFeel;
    property NeedCheckLossOfExceptions: Boolean read FNeedCheckLossOfExceptions
      write FNeedCheckLossOfExceptions;
    property PatternStart: TDateTime read FPatternStart write FPatternStart;
    property PatternFinish: TDateTime read FPatternFinish write FPatternFinish;
    property RecurrenceActivate: Boolean read FRecurrenceActivate write FRecurrenceActivate;
    property RecurrenceInfo: TcxSchedulerEventRecurrenceInfo read FRecurrenceInfo;
    property ShowResources: Boolean read FShowResources write FShowResources;
    property ShowTaskComplete: Boolean read FShowTaskComplete write FShowTaskComplete;
    property OnDelete: TcxOnDeleteEventFunc read FOnDelete write FOnDelete;
    property OnApplyEventTime: TNotifyEvent read FOnApplyEventTime write FOnApplyEventTime;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha1593_Usodewith.pas;Uso de with;7;"with cbResources.Properties.Items do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha1606_Usodewith.pas;Uso de with;7;"with TcxCheckComboBoxItem(Add) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha1632_Usodewith.pas;Uso de with;7;"with cbxTaskStatus.Properties do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha393_Métodomuitolongo.pas;Método muito longo;7;"    procedure OnChanged(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormActivate(Sender: TObject);
    procedure cbAllDayEventPropertiesChange(Sender: TObject);
    procedure StartDateChanged(Sender: TObject);
    procedure cbReminderClick(Sender: TObject);
    procedure cbReminderMinutesBeforeStartPropertiesValidate(
      Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
      var Error: Boolean);
    procedure cbReminderMinutesBeforeStartPropertiesPopup(Sender: TObject);
    procedure OnEventTimeChanged(Sender: TObject);
    procedure btnRecurrenceClick(Sender: TObject);
    procedure OnResourceIDChanged(Sender: TObject);
    procedure btnFindTimeClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure seTaskCompleteChange(Sender: TObject);
    procedure cbxTaskStatusChange(Sender: TObject);
    procedure cbResourcesPropertiesClickCheck(Sender: TObject;
      ItemIndex: Integer; var AllowToggle: Boolean);
    procedure FormShow(Sender: TObject);
    procedure btnOkClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnCancelClick(Sender: TObject);
  private
    FRecurrenceInfoHeight: Integer;
    procedure DoApplyEventTime(Sender: TObject);
    function GetAllowHiddenEvents: Boolean;
    function GetDeleteExceptions: Boolean;
    function GetEventName: string;
    function GetForceSeries: Boolean;
    function GetHelper: TcxSchedulerEventStandardEditorFormHelper;
    procedure SetAllowHiddenEvents(AValue: Boolean);
    procedure SetDeleteExceptions(AValue: Boolean);
    procedure SetForceSeries(AValue: Boolean);
  protected
    procedure ApplyEventTime;
    procedure CheckControlStates; virtual;
    function CheckTimeRange(var AStart, AFinish: TDateTime): Boolean; virtual;
    procedure CheckVisible; virtual;
    procedure ClearModifiedFlag; override;
    procedure DoHelperChanged; override;
    function DoHelperIsValid: Boolean; override;
    procedure DoHelperSaveChanges; override;
    function FindAvailableTime: Boolean; virtual;
    procedure GetEditingEventTime(var AStart, AFinish: TDateTime; var AState: Integer); virtual;
    function GetFormColor: TColor; override;
    function GetHelperClass: TcxSchedulerEditorHelperClass; override;
    function GetRecurrenceDescription: string; virtual;
    function GetResourcesPanelVisible: Boolean; virtual;
    procedure Initialize(AEventInfo: TcxSchedulerEventEditInfo;
      AEditingInfo: TcxSchedulerEditingEventInfo); override;
    procedure InitializeControls; override;
    procedure InitializeHelper(AEvent: TcxSchedulerControlEvent); override;
    procedure InitializeTimeControls(const AStart, AFinish: TDateTime; AllDayEvent: Boolean); virtual;
    procedure InitLabelColor;
    procedure InitReminderPanel;
    procedure InitResources;
    procedure InitShowTimeAsPanel;
    procedure InitTaskCompletePanel;
    function IsValid: Boolean; virtual;
    procedure LoadEventValuesIntoControls; override;
    procedure RefreshRecurrenceInfo; virtual;
    procedure SaveResourceID; virtual;
    procedure SetActiveControl; virtual;
    procedure SetCaptions; virtual;
    procedure SetReminderMinutesBeforeStart; virtual;

    property DeleteExceptions: Boolean read GetDeleteExceptions write SetDeleteExceptions;
    property Helper: TcxSchedulerEventStandardEditorFormHelper read GetHelper;
  public
    property AllowHiddenEvents: Boolean read GetAllowHiddenEvents write SetAllowHiddenEvents;
    property EventName: string read GetEventName;
    property ForceSeries: Boolean read GetForceSeries write SetForceSeries;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\cxSchedulerEventEditor_Linha66_Métodomuitolongo.pas;Método muito longo;7;"  TcxSchedulerEditorIsValidEvent = function: Boolean of object;

  TcxSchedulerCustomEditorFormHelper = class
  private
    FEvent: TcxSchedulerControlEvent;
    FForceSeries: Boolean;
    FForm: TForm;
    FLockCount: Integer;
    FModified: Boolean;
    FReadOnly: Boolean;
    FOnChanged: TNotifyEvent;
    FOnIsValid: TcxSchedulerEditorIsValidEvent;
    FOnSaveChanges: TNotifyEvent;

    function GetStorage: TcxCustomSchedulerStorage;
    function IsValid: Boolean;
    procedure SetModified(AValue: Boolean);
    procedure SetReadOnly(AValue: Boolean);
  protected
    procedure DoChanged; virtual;
    procedure DoExecuteAction(var AModalResult: TModalResult); virtual;
    function DoIsValid: Boolean; virtual;
    procedure DoRefresh; virtual;
    procedure DoSaveChanges; virtual;
    function GetEvent: TcxSchedulerControlEvent; virtual;
    function IsEditorModal: Boolean; virtual;

    procedure Cancel(var AModalResult: TModalResult); virtual;
    procedure Close(var AModalResult: TModalResult); virtual;
    procedure Delete(var AModalResult: TModalResult); virtual;
    procedure Save(var AModalResult: TModalResult); virtual;

    property Form: TForm read FForm;
    property OnIsValid: TcxSchedulerEditorIsValidEvent read FOnIsValid write FOnIsValid;
  public
    constructor Create(AForm: TForm; AEvent: TcxSchedulerControlEvent); virtual;

    procedure ExecuteAction(AModalResult: TModalResult);
    procedure Changed;
    function ValidateOccurrenceDate(AEvent: TcxSchedulerControlEvent; ANewStart, ANewFinish: TDateTime): Boolean;

    procedure BeginUpdate;
    procedure CancelUpdate;
    procedure EndUpdate;
    function IsUpdating: Boolean;

    property Event: TcxSchedulerControlEvent read GetEvent;
    property ForceSeries: Boolean read FForceSeries write FForceSeries;
    property Modified: Boolean read FModified write SetModified;
    property ReadOnly: Boolean read FReadOnly write SetReadOnly;
    property Storage: TcxCustomSchedulerStorage read GetStorage;
    property OnChanged: TNotifyEvent read FOnChanged write FOnChanged;
    property OnSaveChanges: TNotifyEvent read FOnSaveChanges write FOnSaveChanges;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\DAO.Clientes_Linha238_Métodomuitolongo.pas;Método muito longo;7;"function TClientes.SalvarCliente(Cliente: TClientes): Boolean;
var
  Ativo : string;
  UF    : string;
begin
  Result:= False;
  try
    qry:=TFDQuery.Create(nil);
    qry.Connection := FConn;
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' Clientes '    +
                '(idclientes, ' +
                'razao, '       +
                'cnpj_cpf, '    +
                'endereco, '    +
                'numero, '      +
                'complemento, ' +
                'cep, '         +
                'cidade, '      +
                'bairro, '      +
                'ativo, '       +
                'uf) '          +
                'VALUES ('      +
                ':idclientes, ' +
                ':razao, '      +
                ':cnpj_cpf, '   +
                ':endereco, '   +
                ':numero,  '    +
                ':complemento, '+
                ':cep, '        +
                ':cidade, '     +
                ':bairro, '     +
                ':ativo, '      +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB

     qry.ExecSQL;

     Result:=True;

  finally
    qry.Close;
    qry.Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\DAO.Clientes_Linha89_Métodomuitolongo.pas;Método muito longo;7;"function TClientes.AlterarCliente(Cliente: TClientes): Boolean;
begin
  //Alterar oo cliente do parâmetro acNPJ
  Result:=False;
  qry:=qry.Create(nil);
  qry.Connection := FConn;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE fulanorodas.clientes  ' +
                  'SET                          ' +
                  'idclientes  = :idclientes,   ' +
                  'razao       = :razao,        ' +
                  'cnpj_cpf    = :cnpj_cpf,     ' +
                  'endereco    = :endereco,     ' +
                  'numero      = :numero,       ' +
                  'complemento = :complemento,  ' +
                  'cep         = :cep,          ' +
                  'cidade      = :cidade,       ' +
                  'bairro      = :bairro,       ' +
                  'ativo       = :ativo,        ' +
                  'uf          = :uf            ' +
                  'WHERE                        ' +
                  'idclientes = :CNPJ           ';

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

    qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB
    qry.ParamByName('CNPJ').DataType:= ftString;
    qry.ParamByName('CNPJ').AsString:= Cliente.cnpj;

    qry.ExecSQL;

    Result:=True;

  finally
    qry.Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\DAO.ConexaoLicencas_Linha72_Usodewith.pas;Uso de with;7;"with Connection.Params do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\DAO.ConexaoLicencas_Linha73_Usodewith.pas;Uso de with;7;"with Connection.Params do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Dao.Conexao_Linha63_Usodewith.pas;Uso de with;7;"with Connection.Params do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Dao.Conexao_Linha73_Usodewith.pas;Uso de with;7;"with Connection.Params do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.MainMenu.Wizard_Linha282_Métodomuitolongo.pas;Método muito longo;7;"procedure TFSDMainMenuWizard.CreateMenu;
var
  menu: TMainMenu;
  menuName: string;
  itemFormacao: TMenuItem;
  itemUtilitarios: TMenuItem;
  itemCursos: TMenuItem;
  itemGitHubs: TMenuItem;
  itemYoutube: TMenuItem;
  itemAPI: TMenuItem;
  itemBlogs: TMenuItem;
  itemGruposFaceBook: TMenuItem;
  itemFerramentas: TMenuItem;
  itemLivros: TMenuItem;
  itemLoja: TMenuItem;
  itemVagas: TMenuItem;

  Lingua: string;
begin
  menu := (BorlandIDEServices as INTAServices).MainMenu;
  menuName := 'Informacao';

  if menu.FindComponent(menuName) <> nil then
    menu.FindComponent(menuName).Free;

  itemFormacao := TMenuItem.Create(menu);
  itemFormacao.Name := menuName;
  itemFormacao.Caption := 'Estagiário Eletrônico';

  menu.Items.Add(itemFormacao);

 // CreateSubMenu(itemFormacao, 'Novo Wirzard', 'imNovoWizard', OnClickNovoWizard);
  CreateSubMenu(itemFormacao, 'Histórico Projetos', 'imHistoricoProjetos', OnclickMenuHistoryProjects);
  CreateSubMenu(itemFormacao, 'Embarcadero Doc Wiki', 'imDocWiki', OnClickDocWiki);
  CreateSubMenu(itemFormacao, 'Transmitir via Google Meeting', 'imFerramentasGoogleMeeeting', OnClickFerramentasGoogleMeeting);
  CreateSubMenu(itemFormacao, 'Transmitir via FaceBook', 'imFaceBookVideo', OnClickFaceBookVideo);
  CreateSubMenu(itemFormacao, 'Transmitir via Linkedin', 'imLinkedinVideo', OnClickLinkedinVideo);


  //CreateSuBMenu(itemFormacao, 'Loja', 'imLoja', OnClickLoja);

  {Livros} //Recurso de Linguagem ainda em testes.
  FLingua:= GetWindowsDefaultLanguage;
  if FLingua <> 'Português(Brasil)' then
  begin
    itemLivros := CreateSubMenu(itemFormacao, 'Livros de Delphi (Compras)', 'imLivros', nil);
    CreateSubMenu(itemLivros, 'Delphi para Android e iOS: Desenvolvendo Aplicativos Móveis', 'imLivrosDelphiAndroid', OnClickLivroDelphiAndroid);
    CreateSubMenu(itemLivros, 'Object Pascal Para Delphi', 'imLivrosObjectPascal', OnClickLivroObjectPascal);
  end
  else
  begin
    itemLivros := CreateSubMenu(itemFormacao, 'Books Delphi (Buy)', 'imLivros', nil);
    CreateSubMenu(itemLivros, 'Delphi for Android and iOS: Desenvolvendo Aplicativos Móveis', 'imLivrosDelphiAndroid', OnClickLivroDelphiAndroid);
    CreateSubMenu(itemLivros, 'Object Pascal for Delphi', 'imLivrosObjectPascal', OnClickLivroObjectPascal);
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.MainMenu.Wizard_Linha36_Métodomuitolongo.pas;Método muito longo;7;"     function GetWindowsDefaultLanguage: string;

     procedure CreateMenu;

     procedure OnClickNovoWizard(Sender: TObject);
     procedure OnClickDocWiki(Sender: TObject);
     //procedure OnClickLoja(Sender: TObject);
     procedure OnClickMenuHistoryProjects(Sender: TObject);

     {Vagas}
     procedure OnClickVagasDelphi(Sender: TObject);

     {Utilitários}
     procedure OnClickSQLite(Sender: TObject);
     procedure OnClickMySQL(Sender: TObject);
     procedure OnClickForumDelphi(Sender: TObject);
     procedure OnClickPostGres(Sender: TObject);
     procedure OnClickPostman(Sender: TObject);
     procedure OnClickChatGPT(Sender: TObject);
     procedure OnClickAnalisarHints(Sender: TObject);
     procedure OnClickIBExpert(Sender: TObject);
     procedure OnClickSQLSErverManagerStudio(Sender: TObject);
     procedure OnClickJSONtoDelphiClass(Sender: TObject);
     procedure OnClickJSONFormater(Sender: TObject);
     procedure OnClickIconFinder(Sender: TObject);
     procedure OnClickIcons8(Sender: TObject);
     procedure OnClickAcoplamentosUnits(Sender: TObject);
     procedure OnClickimGetIt(Sender: TObject);


     {Cursos}
     procedure OnClickNutror(Sender: TOBject);
     procedure OnClickNovoEAD(Sender: TObject);
     procedure OnClickDevPoint(Sender: TObject);
     procedure OnclickGitHubBozon(Sender: TObject);
     procedure OnclickPostGresBozon(Sender: TObject);

     {YouTube}
     procedure OnClickEmbarcaderoBrasil(Sender: TObject);
     procedure OnClickEmbarcadero(Sender: TObject);
     procedure onClickYouTubeConectSolutions(Sender: Tobject);
     procedure onClickVoiceEnabledApp(Sender: TObject);
     procedure OnClickGitHubCurso(Sender: TObject);
     procedure OnClickCursoApiREst(Sender: TObject);
     procedure OnClickOpenToosAPI(Sender: TObject);
     procedure OnClickBossSSH(Sender: TObject);
     procedure OnClickDelphicon2023_day1(Sender: TObject);
     procedure OnClickDelphicon2023_day2(Sender: TObject);
     procedure OnClickDelphicon2023_day3(Sender: TObject);
     procedure OnClickmqfb(Sender: TObject);
     procedure OnClickChapmanWorld(Sender: TObject);

     procedure OnClickOTA(Sender: TObject);
     procedure OnclickDelphiBasics(Sender: TObject);

     procedure OnClickHorseBasicAuth(Sender: TObject);
     procedure OnClickHandleException(Sender: TObject);
     procedure OnClickHorseJWT(Sender: TObject);

     {Git Hubs}
     procedure OnClickSynopseSynPDF(Sender: TObject);
     procedure OnClickNewAudio(Sender: TObject);
     procedure OnClickRedisClient(Sender: TObject);
     procedure OnClickFireBase4Delphi(Sender: TObject);
     procedure OnClickTurboPackVCL(Sender: TObject);
     procedure OnClickFortesReportCE(Sender: TObject);
     procedure OnClickDelphiJose(Sebder: TObject);
     procedure OnClickXPAD(Sender: TObject);
     procedure OnClickHorse(Sender: TObject);
     procedure OnClickSimpleORM(Sender: TObject);
     procedure OnClickHorseETag(Sender: TObject);
     procedure OnClickDelphiMVCFrameWork(Sender: TObject);
     procedure OnclickJEDIJCL(Sender: TObject);
     procedure OnclickJEDIJVCL(Sender: TObject);
     procedure OnclickJediInc(Sender: TObject);
     procedure OnclickDelphiMessageBus(Sender: TObject);
     procedure OnclickDelphiDocker(Sender: TObject);
     procedure OnclickEmbarcaderoGitHub(Sender: TObject);
     procedure OnclickChromiumGitHub(Sender: TObject);
     procedure OnclickSkia4Delphi(Sender: TObject);
     procedure OnclickUserControl(Sender: TObject);
     procedure OnclickAeggys(Sender: TObject);

     {Blogs}
     procedure OnClickBlogConectSolutions(Sender: TObject);
     procedure OnClickBlogAndreCelestino(Sender: TObject);
     procedure OnClickBlogEmbarcadero(Sender: TObject);
     procedure OnClickBlogMarcoCantu(Sender: TObject);
     procedure OnClickBlogZettaOmmnis(Sender: TObject);
     procedure OnClickBlogChapmanWorld(Sender: TObject);
     procedure OnClickBlogRoadToDelphi(Sender: TObject);
     procedure OnClickBlogLandgrafDev(Sender: TObject);
     procedure OnClickBlogStephenBalls(Sender: TObject);
     procedure OnClickBlogKonopka(Sender: TObject);
     procedure OnClickBlogAndys(Sender: TObject);

     {Ferramentas para Download}
     procedure OnClickFerramentasIbExpert(Sender: TObject);
     procedure OnClickFerramentasFirebird(Sender: TObject);
     procedure OnClickFerramentasMySQL(Sender: TObject);
     procedure OnClickFerramentasSQLiteExpert(Sender: TObject);
     procedure OnClickFerramentasInnoSetup(Sender: TObject);
     procedure OnClickFerramentasCNPack(Sender: TObject);
     procedure OnClickFerramentasInnoScriptStudio(Sender: TObject);
     procedure OnClickFerramentasInsomnia(Sender: TObject);
     procedure OnClickFerramentasNavicat(Sender: TObject);
     procedure OnClickFerramentasIdeFixPack(Sender: TObject);
     procedure OnClickFerramentasToolsFree(Sender: TObject);
     procedure OnClickFerramentasSiteGitIgnore(Sender: TObject);
     procedure OnClickFerramentasSiteRegexLib(Sender: TObject);
     procedure OnClickFerramentasGoogleMeeting(Sender: TObject);
     procedure OnClickFaceBookVideo(Sender: TObject);
     procedure OnClickLinkedinVideo(Sender: TObject);


     {Grupos de Facebook}
     procedure OnClickFacebookDelphiTips(Sender: TObject);
     procedure OnClickFacebookLiteratudaDelphi(Sender: TObject);

     {Livros}
     procedure OnClickLivroDelphiAndroid(Sender: TObject);
     procedure OnClickLivroObjectPascal(Sender: TObject);



     function CreateSubMenu(AParent: TMenuItem;
                            ACaption: String;
                            AName: String;
                            AOnClick: TNotifyEvent;
                            AImageIndex: Integer = -1): TMenuItem;

     procedure AddImageToImageList;
     procedure OnClickYouTube(Sender: TObject);
     procedure VoiceEnabledApp(Sender: TObject);



  protected
     function GetIDString: string;
     function GetName: string;
     function GetState: TWizardState;


    { Launh the AddIn }
    procedure Execute;

  public

  constructor create;
end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewFormMain.SourceFile_Linha115_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewFormMain.SourceFile_Linha50_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewFormMain.Source_Linha38_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Behaviors_Linha10_Métodomuitolongo.pas;Uso de with;24;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Behaviors_Linha10_Métodomuitolongo.pas;Método muito longo;7;"procedure CreateUnitBehaviors(ProjectPath, NameSpace : string);


implementation

procedure CreateUnitBehaviors(ProjectPath, NameSpace : string);
var
 unitName: string;
 unitPath: string;
 unitFileName: string;
begin
  unitPath := ProjectPath  + 'src\Model\Behaviors\';
  unitName := NameSpace + '.Model.Behaviors';
  unitFileName := unitPath + unitName + '.pas';

  ForceDirectories(unitPath);

  with TStringList.Create do
  try
    Add('unit %0:s.Model.Behaviors;																');
    Add('                                                                                   ');
    Add('interface                                                                          ');
    Add('                                                                                   ');
    Add('uses                                                                               ');
    Add('  System.SysUtils,                                                                 ');
    Add('  System.UITypes,                                                                  ');
    Add('  Vcl.Dialogs,                                                                     ');
    Add('  Vcl.Forms;                                                                       ');
    Add('                                                                                   ');
    Add('type T%0:sBehaviors = class                                                        ');
    Add('                                                                                   ');
    Add('  private                                                                          ');
    Add('    procedure BehaviorException(Sender: TObject; E: Exception);                    ');
    Add('                                                                                   ');
    Add('  public                                                                           ');
    Add('    constructor create;                                                            ');
    Add('    destructor Destroy; override;                                                  ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('var                                                                                ');
    Add('  ModelBehaviors : T%0:sBehaviors;                                                 ');
    Add('                                                                                   ');
    Add('implementation                                                                     ');
    Add('                                                                                   ');
    Add('{ T%0:sBehaviors }                                                                 ');
    Add('                                                                                   ');
    Add('procedure T%0:sBehaviors.BehaviorException(Sender: TObject; E: Exception);         ');
    Add('begin                                                                              ');
    Add('  MessageDlg(E.Message, mtWarning, [mbOK], 0);                                     ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('constructor T%0:sBehaviors.create;                                                 ');
    Add('begin                                                                              ');
    Add('  ReportMemoryLeaksOnShutdown := True;                                             ');
    Add('  Application.OnException := BehaviorException;                                    ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('destructor T%0:sBehaviors.Destroy;                                                 ');
    Add('begin                                                                              ');
    Add('                                                                                   ');
    Add('  inherited;                                                                       ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('initialization                                                                     ');
    Add('  ModelBehaviors := T%0:sBehaviors.Create;                                         ');
    Add('                                                                                   ');
    Add('finalization                                                                       ');
    Add('  ModelBehaviors.DisposeOf;                                                        ');
    Add('                                                                                   ');
    Add('end.                                                                               ');

    Text := Format(Text, [Namespace, TGuid.NewGuid.ToString]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

  finally
    Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Behaviors_Linha27_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionFiredac_Linha10_Métodomuitolongo.pas;Uso de with;23;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionFiredac_Linha10_Métodomuitolongo.pas;Uso de with;151;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionFiredac_Linha10_Métodomuitolongo.pas;Método muito longo;7;"procedure CreateUnitComponentConnectionFiredac(ProjectPath, Namespace: string);

implementation

procedure CreateUnitComponentConnectionFiredac(ProjectPath, Namespace: string);
var
  unitName: string;
  unitPath: string;
  unitFileName: string;
begin
  unitPath := ProjectPath + '\src\Model\Components\Connection\';
  unitName := NameSpace + '.Components.Connection.Firedac';
  unitFileName := unitPath + unitName + '.pas';

  ForceDirectories(unitPath);

  with TStringList.Create do
  try
    Add('unit %0:s.Components.Connection.Firedac;																							');
    Add('                                                                                                                                   ');
    Add('interface                                                                                                                          ');
    Add('                                                                                                                                   ');
    Add('uses                                                                                                                               ');
    Add('  %0:s.Components.Connection.Interfaces,                                                                                           ');
    Add('  FireDAC.Stan.Intf,                                                                                                               ');
    Add('  FireDAC.Stan.Option,                                                                                                             ');
    Add('  FireDAC.Stan.Error,                                                                                                              ');
    Add('  FireDAC.UI.Intf,                                                                                                                 ');
    Add('  FireDAC.Phys.Intf,                                                                                                               ');
    Add('  FireDAC.Stan.Def,                                                                                                                ');
    Add('  FireDAC.Stan.Pool,                                                                                                               ');
    Add('  FireDAC.Stan.Async,                                                                                                              ');
    Add('  FireDAC.Phys,                                                                                                                    ');
    Add('  FireDAC.Phys.SQLite,                                                                                                             ');
    Add('  FireDAC.Phys.SQLiteDef,                                                                                                          ');
    Add('  FireDAC.Stan.ExprFuncs,                                                                                                          ');
    Add('  FireDAC.VCLUI.Wait,                                                                                                              ');
    Add('  FireDAC.DApt,                                                                                                                    ');
    Add('  Data.DB,                                                                                                                         ');
    Add('  FireDAC.Comp.Client,                                                                                                             ');
    Add('  FireDAC.Stan.Param,                                                                                                              ');
    Add('  System.SysUtils,                                                                                                                 ');
    Add('  System.Classes;                                                                                                                  ');
    Add('                                                                                                                                   ');
    Add('type T%0:sComponentsConnectionFiredac = class(TInterfacedObject, I%0:sComponentsConnection)                                       ');
    Add('  private                                                                                                                          ');
    Add('    FConnection : TFDConnection;                                                                                                   ');
    Add('    FQuery : TFDQuery;                                                                                                             ');
    Add('  public                                                                                                                           ');
    Add('    constructor Create;                                                                                                            ');
    Add('    destructor Destroy; override;                                                                                                  ');
    Add('    class function New : I%0:sComponentsConnection;                                                                                ');
    Add('    function Active ( aValue : Boolean ) : I%0:sComponentsConnection;                                                              ');
    Add('    function AddParam ( aParam : String; aValue : Variant ) : I%0:sComponentsConnection; overload;                                 ');
    Add('    function AddParam ( aParam : String; aValue : TPersistent ) : I%0:sComponentsConnection; overload;                             ');
    Add('    function DataSet : TDataSet;                                                                                                   ');
    Add('    function ExecSQL : I%0:sComponentsConnection;                                                                                  ');
    Add('    function Open : I%0:sComponentsConnection;                                                                                     ');
    Add('    function SQL ( aValue : String ) : I%0:sComponentsConnection;                                                                  ');
    Add('    function SQLClear : I%0:sComponentsConnection;                                                                                 ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('implementation                                                                                                                     ');
    Add('                                                                                                                                   ');
    Add('{ T%0:sComponentsConnectionFiredac }                                                                                              ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.Active(aValue: Boolean): I%0:sComponentsConnection;                                     ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.Active := aValue;                                                                                                         ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.AddParam(aParam: String; aValue: Variant): I%0:sComponentsConnection;                   ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ParamByName(aParam).Value := aValue;                                                                                      ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.AddParam(aParam: String; aValue: TPersistent): I%0:sComponentsConnection;               ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ParamByName(aParam).Assign(aValue);                                                                                       ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('constructor T%0:sComponentsConnectionFiredac.Create;                                                                              ');
    Add('begin                                                                                                                              ');
    Add('  FConnection := TFDConnection.Create(nil);                                                                                        ');
    Add('  FQuery := TFDQuery.Create(nil);                                                                                                  ');
    Add('  FQuery.Connection := FConnection;                                                                                                ');
    Add('  FConnection.Params.DriverID := ''SQLite'';                                                                                         ');
    Add('  FConnection.Params.Database := ExtractFilePath(GetModuleName(HInstance)) + ''%0:s.db3'';                                           ');
    Add('  FConnection.Params.Add(''LockingMode=Normal'');                                                                                    ');
    Add('  FConnection.Connected;                                                                                                           ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.DataSet: TDataSet;                                                                      ');
    Add('begin                                                                                                                              ');
    Add('  Result := FQuery;                                                                                                                ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('destructor T%0:sComponentsConnectionFiredac.Destroy;                                                                              ');
    Add('begin                                                                                                                              ');
    Add('  FQuery.DisposeOf;                                                                                                                ');
    Add('  FConnection.DisposeOf;                                                                                                           ');
    Add('  inherited;                                                                                                                       ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.ExecSQL: I%0:sComponentsConnection;                                                     ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ExecSQL;                                                                                                                  ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('class function T%0:sComponentsConnectionFiredac.New: I%0:sComponentsConnection;                                                   ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self.Create;                                                                                                           ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.Open: I%0:sComponentsConnection;                                                        ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.Open;                                                                                                                     ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.SQL(aValue: String): I%0:sComponentsConnection;                                         ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.SQL.Add(aValue);                                                                                                          ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.SQLClear: I%0:sComponentsConnection;                                                    ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.SQL.Clear;                                                                                                                ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('end.                                                                                                                               ');

    Text := Format(Text, [Namespace]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

    // Criar Arquivo de Banco SQLite
    with TStringList.Create do
    try
      SaveToFile(ProjectPath + Namespace + '.db3');
    finally
      Free;
    end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionFiredac_Linha154_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionFiredac_Linha26_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionInterfaces_Linha10_Métodomuitolongo.pas;Variável global;13;"var"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionInterfaces_Linha10_Métodomuitolongo.pas;Uso de with;24;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionInterfaces_Linha10_Métodomuitolongo.pas;Método muito longo;7;"procedure CreateUnitComponentConnectionInterfaces(ProjectPath, NameSpace: string);

implementation


procedure CreateUnitComponentConnectionInterfaces(ProjectPath, NameSpace: string);
var
  unitName: string;
  unitPath: string;
  unitFileName: string;
begin
   unitPath := ProjectPath + '\src\Model\Components\Connection\';
   unitName := NameSpace + '.Components.Connection.Interfaces';
   unitFileName := unitPath + unitName + '.pas';

   ForceDirectories(unitPath);

   with TStringList.Create do
  try
    Add('unit %0:s.Components.Connection.Interfaces;');
    Add('');
    Add('interface');
    Add('');
    Add('uses');
    Add('  Data.DB, ');
    Add('  System.SysUtils,');
    Add('  System.Classes;');
    Add('');
    Add('type');
    Add('  I%0:sComponentsConnection = interface');
    Add('    [''%1:s'']');
    Add('    function Active ( aValue : Boolean ) : IEstoqueComponentsConnection;');
    Add('    function AddParam ( aParam : String; aValue : Variant ) : IEstoqueComponentsConnection; overload;');
    Add('    function AddParam ( aParam : String; aValue : TPersistent ) : IEstoqueComponentsConnection; overload;');
    Add('    function DataSet : TDataSet;');
    Add('    function ExecSQL : IEstoqueComponentsConnection;');
    Add('    function Open : IEstoqueComponentsConnection;');
    Add('    function SQL ( aValue : String ) : IEstoqueComponentsConnection;');
    Add('    function SQLClear : IEstoqueComponentsConnection;');
    Add('  end;');
    Add('');
    Add('implementation');
    Add('');
    Add('end.');

    Text := Format(Text, [Namespace, TGuid.NewGuid.ToString]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

  finally
    Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\FSD.NewProject.NewUnit.Component.ConnectionInterfaces_Linha27_Usodewith.pas;Uso de with;7;"with TStringList.Create do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Funcoes.CNPJCPF_Linha22_Métodomuitolongo.pas;Método muito longo;7;"function TCNPJCPF.ValidarCNPJ(const CNPJ: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CNPJCalc: string;
  Multiplicador: array[1..14] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CNPJ
  CNPJCalc := '';
  for i := 1 to Length(CNPJ) do
    if CharInSet(CNPJ[i], ['0'..'9']) then
      CNPJCalc := CNPJCalc + CNPJ[i];

  // Verifica se o CNPJ possui 14 dígitos
  if Length(CNPJCalc) <> 14 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CNPJCalc = '00000000000000') or (CNPJCalc = '11111111111111') or
    (CNPJCalc = '22222222222222') or (CNPJCalc = '33333333333333') or
    (CNPJCalc = '44444444444444') or (CNPJCalc = '55555555555555') or
    (CNPJCalc = '66666666666666') or (CNPJCalc = '77777777777777') or
    (CNPJCalc = '88888888888888') or (CNPJCalc = '99999999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 5;
  Multiplicador[2] := 4;
  Multiplicador[3] := 3;
  Multiplicador[4] := 2;
  Multiplicador[5] := 9;
  Multiplicador[6] := 8;
  Multiplicador[7] := 7;
  Multiplicador[8] := 6;
  Multiplicador[9] := 5;
  Multiplicador[10] := 4;
  Multiplicador[11] := 3;
  Multiplicador[12] := 2;
  for i := 1 to 12 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[13]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 6;
  Multiplicador[2] := 5;
  Multiplicador[3] := 4;
  Multiplicador[4] := 3;
  Multiplicador[5] := 2;
  Multiplicador[6] := 9;
  Multiplicador[7] := 8;
  Multiplicador[8] := 7;
  Multiplicador[9] := 6;
  Multiplicador[10] := 5;
  Multiplicador[11] := 4;
  Multiplicador[12] := 3;
  Multiplicador[13] := 2;
  for i := 1 to 13 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[14]) then
    Exit;

  Result := True;

end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Funcoes.CNPJCPF_Linha97_Métodomuitolongo.pas;Método muito longo;7;"function TCNPJCPF.ValidarCPF(const CPF: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CPFCalc: string;
  Multiplicador: array[1..11] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CPF
  CPFCalc := '';
  for i := 1 to Length(CPF) do
    if CharInSet(CPF[i], ['0'..'9']) then
      CPFCalc := CPFCalc + CPF[i];

  // Verifica se o CPF possui 11 dígitos
  if Length(CPFCalc) <> 11 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CPFCalc = '00000000000') or (CPFCalc = '11111111111') or
    (CPFCalc = '22222222222') or (CPFCalc = '33333333333') or
    (CPFCalc = '44444444444') or (CPFCalc = '55555555555') or
    (CPFCalc = '66666666666') or (CPFCalc = '77777777777') or
    (CPFCalc = '88888888888') or (CPFCalc = '99999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 10;
  Multiplicador[2] := 9;
  Multiplicador[3] := 8;
  Multiplicador[4] := 7;
  Multiplicador[5] := 6;
  Multiplicador[6] := 5;
  Multiplicador[7] := 4;
  Multiplicador[8] := 3;
  Multiplicador[9] := 2;
  for i := 1 to 9 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[10]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 11;
  Multiplicador[2] := 10;
  Multiplicador[3] := 9;
  Multiplicador[4] := 8;
  Multiplicador[5] := 7;
  Multiplicador[6] := 6;
  Multiplicador[7] := 5;
  Multiplicador[8] := 4;
  Multiplicador[9] := 3;
  Multiplicador[10] := 2;
  for i := 1 to 10 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[11]) then
    Exit;

  Result := True;

end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Funcoes.EnviarEmail_Linha68_Métodomuitolongo.pas;Método muito longo;7;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure SetCEP(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setcontato(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
      procedure Setdataregistro(const Value: TDatetime);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setid_chave(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Setserial(const Value: string);
      procedure Setserialhd(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);

    public
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property ativo       : string read Fativo write Setativo;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
       property Linguagem   : string read FLinguagem write SetLinguagem;
       property serial      : string read Fserial write Setserial;
       property serialhd    : string read Fserialhd write Setserialhd;
       property ContraSenha : String read FContraSenha write SetContraSenha;
       property Data_exp    : TDateTime read FData_exp write SetData_exp;
       property id_chave    : string read Fid_chave write Setid_chave;
       function enviarPedido(aEmail: String): Boolean;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Funcoes.EnviarPedido_Linha74_Métodomuitolongo.pas;Método muito longo;7;"    procedure SetidCliente(const Value: Integer);
    procedure SetStatusPedido(const Value: Integer);
    procedure SetTotalPedido(const Value: currency);
    procedure Setbairro(const Value: string);
    procedure SetCEP(const Value: string);
    procedure Setcidade(const Value: string);
    procedure Setcnpj(const Value: string);
    procedure Setcomplemento(const Value: string);
    procedure Setcontato(const Value: string);
    procedure Setemail(const Value: string);
    procedure Setendereco(const Value: string);
    procedure Setie(const Value: string);
    procedure Setim(const Value: string);
    procedure Setnumero(const Value: integer);
    procedure Setrazao(const Value: string);
    procedure Setresponsavel(const Value: string);
    procedure Settelcontato(const Value: string);
    procedure Settelefone(const Value: string);
    procedure Setuf(const Value: string);
    procedure SetidPedido(const Value: Integer);
    procedure SetidProduto(const Value: Integer);
    procedure SetPrecoUnitario(const Value: Currency);
    procedure SetQuantidade(const Value: Integer);
    procedure SetTotaldoItem(const Value: Currency);
    procedure SetCelularContato(const Value: String);
    procedure SetEmailContato(const Value: String);
    procedure SetNomeContato(const Value: String);
    procedure SetTelefoneConteto(const Value: String);
    procedure SetLinguagem(const Value: string);

    public
      //Dados do Pedido
      property IdPedido: Integer read FIdPedido write SetIdPedido;
      property idCliente: Integer read FidCliente write SetidCliente;
      property StatusPedido: Integer read FStatusPedido write SetStatusPedido;
      property TotalPedido: currency read FTotalPedido write SetTotalPedido;

      //Itens do Pedido
      property idProduto: Integer read FidProduto write SetidProduto;
      property Quantidade: Integer read FQuantidade write SetQuantidade;
      property PrecoUnitario: Currency read FPrecoUnitario write SetPrecoUnitario;
      property TotaldoItem: Currency read FTotaldoItem write SetTotaldoItem;

      //Dados do cliente
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property NomeContato: String read FNomeContato write SetNomeContato;
       property TelefoneConteto: String read FTelefoneConteto write SetTelefoneConteto;
       property CelularContato: String read FCelularContato write SetCelularContato;
       property EmailContato: String read FEmailContato write SetEmailContato;
       property Linguagem   : string read FLinguagem write SetLinguagem;

      function enviarPedido(aEmail: String): Boolean;
      procedure PrencherDadosDoPedido(aidcliente: Integer;aStatusPedido:Integer;aTotalPedido: Currency);
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Horse.Core_Linha49_Métodomuitolongo.pas;Método muito longo;7;"    class function TrimPath(const APath: string): string;
    class function RegisterRoute(const AHTTPType: TMethodType; const APath: string; const ACallback: THorseCallback): THorseCore;
    class var FDefaultHorse: THorseCore;

    function InternalRoute(const APath: string): IHorseCoreRoute<THorseCore>;
    function InternalGroup: IHorseCoreGroup<THorseCore>;
    function InternalGetRoutes: THorseRouterTree;
    procedure InternalSetRoutes(const AValue: THorseRouterTree);
    class function GetRoutes: THorseRouterTree; static;
    class procedure SetRoutes(const AValue: THorseRouterTree); static;
    class function MakeHorseModule: THorseModule;

    class function GetCallback(const ACallbackRequest: THorseCallbackRequestResponse): THorseCallback; overload;
    class function GetCallback(const ACallbackRequest: THorseCallbackRequest): THorseCallback; overload;
{$IFNDEF FPC}
    class function GetCallback(const ACallbackResponse: THorseCallbackResponse): THorseCallback; overload;
{$ENDIF}
    class function GetCallbacks: TArray<THorseCallback>;
    class function RegisterCallbacksRoute(const AMethod: TMethodType; const APath: string): THorseCore;
  public
    constructor Create; virtual;
    class function ToModule: THorseModule;
    class destructor UnInitialize; {$IFNDEF FPC}virtual; {$ENDIF}
    class function AddCallback(const ACallback: THorseCallback): THorseCore;
    class function AddCallbacks(const ACallbacks: TArray<THorseCallback>): THorseCore;

    class function Group: IHorseCoreGroup<THorseCore>;
    class function Route(const APath: string): IHorseCoreRoute<THorseCore>;

    class function Use(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Use(const ACallback: THorseCallback): THorseCore; overload;
    class function Use(const APath: string; const ACallbacks: array of THorseCallback): THorseCore; overload;
    class function Use(const ACallbacks: array of THorseCallback): THorseCore; overload;

    class function All(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function All(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function All(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function All(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Get(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Get(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Get(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Get(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Put(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Put(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Put(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Put(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IF (DEFINED(FPC) or (CompilerVersion > 27.0))}
    class function Patch(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Patch(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Patch(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Patch(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IFEND}
    class function Head(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Head(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Head(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Head(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Post(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Post(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Post(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Post(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IF (defined(fpc) or (CompilerVersion > 27.0))}
    class function Delete(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Delete(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Delete(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Delete(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IFEND}
    class property Routes: THorseRouterTree read GetRoutes write SetRoutes;
    class function GetInstance: THorseCore;
    class function Version: string;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Horse.Mime_Linha153_Métodomuitolongo.pas;Método muito longo;7;"procedure THorseMimeTypesExt.InitializeFileType;
begin
  {$REGION 'MIME CONST'}
  FFileType.AddOrSetValue('ez', 'application/andrew-inset');
  FFileType.AddOrSetValue('aw', 'application/applixware');
  FFileType.AddOrSetValue('atom', 'application/atom+xml');
  FFileType.AddOrSetValue('atomcat', 'application/atomcat+xml');
  FFileType.AddOrSetValue('atomsvc', 'application/atomsvc+xml');
  FFileType.AddOrSetValue('bson', 'application/bson');
  FFileType.AddOrSetValue('ccxml', 'application/ccxml+xml');
  FFileType.AddOrSetValue('cdmia', 'application/cdmi-capability');
  FFileType.AddOrSetValue('cdmic', 'application/cdmi-container');
  FFileType.AddOrSetValue('cdmid', 'application/cdmi-domain');
  FFileType.AddOrSetValue('cdmio', 'application/cdmi-object');
  FFileType.AddOrSetValue('cdmiq', 'application/cdmi-queue');
  FFileType.AddOrSetValue('cu', 'application/cu-seeme');
  FFileType.AddOrSetValue('davmount', 'application/davmount+xml');
  FFileType.AddOrSetValue('dbk', 'application/docbook+xml');
  FFileType.AddOrSetValue('dssc', 'application/dssc+der');
  FFileType.AddOrSetValue('xdssc', 'application/dssc+xml');
  FFileType.AddOrSetValue('ecma', 'application/ecmascript');
  FFileType.AddOrSetValue('emma', 'application/emma+xml');
  FFileType.AddOrSetValue('epub', 'application/epub+zip');
  FFileType.AddOrSetValue('exi', 'application/exi');
  FFileType.AddOrSetValue('pfr', 'application/font-tdpfr');
  FFileType.AddOrSetValue('gml', 'application/gml+xml');
  FFileType.AddOrSetValue('gpx', 'application/gpx+xml');
  FFileType.AddOrSetValue('gxf', 'application/gxf');
  FFileType.AddOrSetValue('stk', 'application/hyperstudio');
  FFileType.AddOrSetValue('ink', 'application/inkml+xml');
  FFileType.AddOrSetValue('inkml', 'application/inkml+xml');
  FFileType.AddOrSetValue('ipfix', 'application/ipfix');
  FFileType.AddOrSetValue('jar', 'application/java-archive');
  FFileType.AddOrSetValue('ser', 'application/java-serialized-object');
  FFileType.AddOrSetValue('class', 'application/java-vm');
  FFileType.AddOrSetValue('js', 'application/javascript');
  FFileType.AddOrSetValue('json', 'application/json');
  FFileType.AddOrSetValue('map', 'application/json');
  FFileType.AddOrSetValue('jsonml', 'application/jsonml+json');
  FFileType.AddOrSetValue('lostxml', 'application/lost+xml');
  FFileType.AddOrSetValue('hqx', 'application/mac-binhex40');
  FFileType.AddOrSetValue('cpt', 'application/mac-compactpro');
  FFileType.AddOrSetValue('mads', 'application/mads+xml');
  FFileType.AddOrSetValue('mrc', 'application/marc');
  FFileType.AddOrSetValue('mrcx', 'application/marcxml+xml');
  FFileType.AddOrSetValue('ma', 'application/mathematica');
  FFileType.AddOrSetValue('nb', 'application/mathematica');
  FFileType.AddOrSetValue('mb', 'application/mathematica');
  FFileType.AddOrSetValue('mathml', 'application/mathml+xml');
  FFileType.AddOrSetValue('mbox', 'application/mbox');
  FFileType.AddOrSetValue('mscml', 'application/mediaservercontrol+xml');
  FFileType.AddOrSetValue('metalink', 'application/metalink+xml');
  FFileType.AddOrSetValue('meta4', 'application/metalink4+xml');
  FFileType.AddOrSetValue('mets', 'application/mets+xml');
  FFileType.AddOrSetValue('mods', 'application/mods+xml');
  FFileType.AddOrSetValue('m21', 'application/mp21');
  FFileType.AddOrSetValue('mp21', 'application/mp21');
  FFileType.AddOrSetValue('mp4s', 'application/mp4');
  FFileType.AddOrSetValue('doc', 'application/msword');
  FFileType.AddOrSetValue('dot', 'application/msword');
  FFileType.AddOrSetValue('mxf', 'application/mxf');
  FFileType.AddOrSetValue('bin', 'application/octet-stream');
  FFileType.AddOrSetValue('bpk', 'application/octet-stream');
  FFileType.AddOrSetValue('class', 'application/octet-stream');
  FFileType.AddOrSetValue('deploy', 'application/octet-stream');
  FFileType.AddOrSetValue('dist', 'application/octet-stream');
  FFileType.AddOrSetValue('distz', 'application/octet-stream');
  FFileType.AddOrSetValue('dmg', 'application/octet-stream');
  FFileType.AddOrSetValue('dms', 'application/octet-stream');
  FFileType.AddOrSetValue('dump', 'application/octet-stream');
  FFileType.AddOrSetValue('elc', 'application/octet-stream');
  FFileType.AddOrSetValue('iso', 'application/octet-stream');
  FFileType.AddOrSetValue('lha', 'application/octet-stream');
  FFileType.AddOrSetValue('lrf', 'application/octet-stream');
  FFileType.AddOrSetValue('lzh', 'application/octet-stream');
  FFileType.AddOrSetValue('mar', 'application/octet-stream');
  FFileType.AddOrSetValue('pkg', 'application/octet-stream');
  FFileType.AddOrSetValue('so', 'application/octet-stream');
  FFileType.AddOrSetValue('oda', 'application/oda');
  FFileType.AddOrSetValue('opf', 'application/oebps-package+xml');
  FFileType.AddOrSetValue('ogx', 'application/ogg');
  FFileType.AddOrSetValue('omdoc', 'application/omdoc+xml');
  FFileType.AddOrSetValue('onetoc', 'application/onenote');
  FFileType.AddOrSetValue('onetoc2', 'application/onenote');
  FFileType.AddOrSetValue('onetmp', 'application/onenote');
  FFileType.AddOrSetValue('onepkg', 'application/onenote');
  FFileType.AddOrSetValue('oxps', 'application/oxps');
  FFileType.AddOrSetValue('xer', 'application/patch-ops-error+xml');
  FFileType.AddOrSetValue('pdf', 'application/pdf');
  FFileType.AddOrSetValue('pgp', 'application/pgp-encrypted');
  FFileType.AddOrSetValue('asc', 'application/pgp-signature');
  FFileType.AddOrSetValue('sig', 'application/pgp-signature');
  FFileType.AddOrSetValue('prf', 'application/pics-rules');
  FFileType.AddOrSetValue('p10', 'application/pkcs10');
  FFileType.AddOrSetValue('p7m', 'application/pkcs7-mime');
  FFileType.AddOrSetValue('p7c', 'application/pkcs7-mime');
  FFileType.AddOrSetValue('p7s', 'application/pkcs7-signature');
  FFileType.AddOrSetValue('p8', 'application/pkcs8');
  FFileType.AddOrSetValue('ac', 'application/pkix-attr-cert');
  FFileType.AddOrSetValue('cer', 'application/pkix-cert');
  FFileType.AddOrSetValue('crl', 'application/pkix-crl');
  FFileType.AddOrSetValue('pkipath', 'application/pkix-pkipath');
  FFileType.AddOrSetValue('pki', 'application/pkixcmp');
  FFileType.AddOrSetValue('pls', 'application/pls+xml');
  FFileType.AddOrSetValue('ai', 'application/postscript');
  FFileType.AddOrSetValue('eps', 'application/postscript');
  FFileType.AddOrSetValue('ps', 'application/postscript');
  FFileType.AddOrSetValue('cww', 'application/prs.cww');
  FFileType.AddOrSetValue('pskcxml', 'application/pskc+xml');
  FFileType.AddOrSetValue('rdf', 'application/rdf+xml');
  FFileType.AddOrSetValue('rif', 'application/reginfo+xml');
  FFileType.AddOrSetValue('rnc', 'application/relax-ng-compact-syntax');
  FFileType.AddOrSetValue('rl', 'application/resource-lists+xml');
  FFileType.AddOrSetValue('rld', 'application/resource-lists-diff+xml');
  FFileType.AddOrSetValue('rs', 'application/rls-services+xml');
  FFileType.AddOrSetValue('gbr', 'application/rpki-ghostbusters');
  FFileType.AddOrSetValue('mft', 'application/rpki-manifest');
  FFileType.AddOrSetValue('roa', 'application/rpki-roa');
  FFileType.AddOrSetValue('rsd', 'application/rsd+xml');
  FFileType.AddOrSetValue('rss', 'application/rss+xml');
  FFileType.AddOrSetValue('rtf', 'application/rtf');
  FFileType.AddOrSetValue('sbml', 'application/sbml+xml');
  FFileType.AddOrSetValue('scq', 'application/scvp-cv-request');
  FFileType.AddOrSetValue('scs', 'application/scvp-cv-response');
  FFileType.AddOrSetValue('spq', 'application/scvp-vp-request');
  FFileType.AddOrSetValue('spp', 'application/scvp-vp-response');
  FFileType.AddOrSetValue('sdp', 'application/sdp');
  FFileType.AddOrSetValue('setpay', 'application/set-payment-initiation');
  FFileType.AddOrSetValue('setreg', 'application/set-registration-initiation');
  FFileType.AddOrSetValue('shf', 'application/shf+xml');
  FFileType.AddOrSetValue('smi', 'application/smil+xml');
  FFileType.AddOrSetValue('smil', 'application/smil+xml');
  FFileType.AddOrSetValue('soap', 'application/soap+xml');
  FFileType.AddOrSetValue('rq', 'application/sparql-query');
  FFileType.AddOrSetValue('srx', 'application/sparql-results+xml');
  FFileType.AddOrSetValue('gram', 'application/srgs');
  FFileType.AddOrSetValue('grxml', 'application/srgs+xml');
  FFileType.AddOrSetValue('sru', 'application/sru+xml');
  FFileType.AddOrSetValue('ssdl', 'application/ssdl+xml');
  FFileType.AddOrSetValue('ssml', 'application/ssml+xml');
  FFileType.AddOrSetValue('tei', 'application/tei+xml');
  FFileType.AddOrSetValue('teicorpus', 'application/tei+xml');
  FFileType.AddOrSetValue('tfi', 'application/thraud+xml');
  FFileType.AddOrSetValue('tsd', 'application/timestamped-data');
  FFileType.AddOrSetValue('plb', 'application/vnd.3gpp.pic-bw-large');
  FFileType.AddOrSetValue('psb', 'application/vnd.3gpp.pic-bw-small');
  FFileType.AddOrSetValue('pvb', 'application/vnd.3gpp.pic-bw-var');
  FFileType.AddOrSetValue('tcap', 'application/vnd.3gpp2.tcap');
  FFileType.AddOrSetValue('pwn', 'application/vnd.3m.post-it-notes');
  FFileType.AddOrSetValue('aso', 'application/vnd.accpac.simply.aso');
  FFileType.AddOrSetValue('imp', 'application/vnd.accpac.simply.imp');
  FFileType.AddOrSetValue('acu', 'application/vnd.acucobol');
  FFileType.AddOrSetValue('atc', 'application/vnd.acucorp');
  FFileType.AddOrSetValue('acutc', 'application/vnd.acucorp');
  FFileType.AddOrSetValue('air', 'application/vnd.adobe.air-application-installer-package+zip');
  FFileType.AddOrSetValue('fcdt', 'application/vnd.adobe.formscentral.fcdt');
  FFileType.AddOrSetValue('fxp', 'application/vnd.adobe.fxp');
  FFileType.AddOrSetValue('fxpl', 'application/vnd.adobe.fxp');
  FFileType.AddOrSetValue('xdp', 'application/vnd.adobe.xdp+xml');
  FFileType.AddOrSetValue('xfdf', 'application/vnd.adobe.xfdf');
  FFileType.AddOrSetValue('ahead', 'application/vnd.ahead.space');
  FFileType.AddOrSetValue('azf', 'application/vnd.airzip.filesecure.azf');
  FFileType.AddOrSetValue('azs', 'application/vnd.airzip.filesecure.azs');
  FFileType.AddOrSetValue('azw', 'application/vnd.amazon.ebook');
  FFileType.AddOrSetValue('acc', 'application/vnd.americandynamics.acc');
  FFileType.AddOrSetValue('ami', 'application/vnd.amiga.ami');
  FFileType.AddOrSetValue('apk', 'application/vnd.android.package-archive');
  FFileType.AddOrSetValue('cii', 'application/vnd.anser-web-certificate-issue-initiation');
  FFileType.AddOrSetValue('fti', 'application/vnd.anser-web-funds-transfer-initiation');
  FFileType.AddOrSetValue('atx', 'application/vnd.antix.game-component');
  FFileType.AddOrSetValue('mpkg', 'application/vnd.apple.installer+xml');
  FFileType.AddOrSetValue('m3u8', 'application/vnd.apple.mpegurl');
  FFileType.AddOrSetValue('swi', 'application/vnd.aristanetworks.swi');
  FFileType.AddOrSetValue('iota', 'application/vnd.astraea-software.iota');
  FFileType.AddOrSetValue('aep', 'application/vnd.audiograph');
  FFileType.AddOrSetValue('mpm', 'application/vnd.blueice.multipass');
  FFileType.AddOrSetValue('bmi', 'application/vnd.bmi');
  FFileType.AddOrSetValue('rep', 'application/vnd.businessobjects');
  FFileType.AddOrSetValue('cdxml', 'application/vnd.chemdraw+xml');
  FFileType.AddOrSetValue('mmd', 'application/vnd.chipnuts.karaoke-mmd');
  FFileType.AddOrSetValue('cdy', 'application/vnd.cinderella');
  FFileType.AddOrSetValue('cla', 'application/vnd.claymore');
  FFileType.AddOrSetValue('rp9', 'application/vnd.cloanto.rp9');
  FFileType.AddOrSetValue('c4g', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4d', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4f', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4p', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4u', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c11amc', 'application/vnd.cluetrust.cartomobile-config');
  FFileType.AddOrSetValue('c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg');
  FFileType.AddOrSetValue('csp', 'application/vnd.commonspace');
  FFileType.AddOrSetValue('cdbcmsg', 'application/vnd.contact.cmsg');
  FFileType.AddOrSetValue('cmc', 'application/vnd.cosmocaller');
  FFileType.AddOrSetValue('clkx', 'application/vnd.crick.clicker');
  FFileType.AddOrSetValue('clkk', 'application/vnd.crick.clicker.keyboard');
  FFileType.AddOrSetValue('clkp', 'application/vnd.crick.clicker.palette');
  FFileType.AddOrSetValue('clkt', 'application/vnd.crick.clicker.template');
  FFileType.AddOrSetValue('clkw', 'application/vnd.crick.clicker.wordbank');
  FFileType.AddOrSetValue('wbs', 'application/vnd.criticaltools.wbs+xml');
  FFileType.AddOrSetValue('pml', 'application/vnd.ctc-posml');
  FFileType.AddOrSetValue('ppd', 'application/vnd.cups-ppd');
  FFileType.AddOrSetValue('car', 'application/vnd.curl.car');
  FFileType.AddOrSetValue('pcurl', 'application/vnd.curl.pcurl');
  FFileType.AddOrSetValue('dart', 'application/vnd.dart');
  FFileType.AddOrSetValue('rdz', 'application/vnd.data-vision.rdz');
  FFileType.AddOrSetValue('uvf', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvvf', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvd', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvvd', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvt', 'application/vnd.dece.ttml+xml');
  FFileType.AddOrSetValue('uvvt', 'application/vnd.dece.ttml+xml');
  FFileType.AddOrSetValue('uvx', 'application/vnd.dece.unspecified');
  FFileType.AddOrSetValue('uvvx', 'application/vnd.dece.unspecified');
  FFileType.AddOrSetValue('uvz', 'application/vnd.dece.zip');
  FFileType.AddOrSetValue('uvvz', 'application/vnd.dece.zip');
  FFileType.AddOrSetValue('fe_launch', 'application/vnd.denovo.fcselayout-link');
  FFileType.AddOrSetValue('dna', 'application/vnd.dna');
  FFileType.AddOrSetValue('mlp', 'application/vnd.dolby.mlp');
  FFileType.AddOrSetValue('dpg', 'application/vnd.dpgraph');
  FFileType.AddOrSetValue('dfac', 'application/vnd.dreamfactory');
  FFileType.AddOrSetValue('kpxx', 'application/vnd.ds-keypoint');
  FFileType.AddOrSetValue('ait', 'application/vnd.dvb.ait');
  FFileType.AddOrSetValue('svc', 'application/vnd.dvb.service');
  FFileType.AddOrSetValue('geo', 'application/vnd.dynageo');
  FFileType.AddOrSetValue('mag', 'application/vnd.ecowin.chart');
  FFileType.AddOrSetValue('nml', 'application/vnd.enliven');
  FFileType.AddOrSetValue('esf', 'application/vnd.epson.esf');
  FFileType.AddOrSetValue('msf', 'application/vnd.epson.msf');
  FFileType.AddOrSetValue('qam', 'application/vnd.epson.quickanime');
  FFileType.AddOrSetValue('slt', 'application/vnd.epson.salt');
  FFileType.AddOrSetValue('ssf', 'application/vnd.epson.ssf');
  FFileType.AddOrSetValue('es3', 'application/vnd.eszigno3+xml');
  FFileType.AddOrSetValue('et3', 'application/vnd.eszigno3+xml');
  FFileType.AddOrSetValue('ez2', 'application/vnd.ezpix-album');
  FFileType.AddOrSetValue('ez3', 'application/vnd.ezpix-package');
  FFileType.AddOrSetValue('fdf', 'application/vnd.fdf');
  FFileType.AddOrSetValue('mseed', 'application/vnd.fdsn.mseed');
  FFileType.AddOrSetValue('seed', 'application/vnd.fdsn.seed');
  FFileType.AddOrSetValue('dataless', 'application/vnd.fdsn.seed');
  FFileType.AddOrSetValue('json', 'application/vnd.embarcadero.firedac+json');
  FFileType.AddOrSetValue('xml', 'application/vnd.embarcadero.firedac+xml');
  FFileType.AddOrSetValue('bin', 'application/vnd.embarcadero.firedac+bin');
  FFileType.AddOrSetValue('gph', 'application/vnd.flographit');
  FFileType.AddOrSetValue('ftc', 'application/vnd.fluxtime.clip');
  FFileType.AddOrSetValue('fm', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('frame', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('maker', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('book', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('fnc', 'application/vnd.frogans.fnc');
  FFileType.AddOrSetValue('ltf', 'application/vnd.frogans.ltf');
  FFileType.AddOrSetValue('fsc', 'application/vnd.fsc.weblaunch');
  FFileType.AddOrSetValue('oas', 'application/vnd.fujitsu.oasys');
  FFileType.AddOrSetValue('oa2', 'application/vnd.fujitsu.oasys2');
  FFileType.AddOrSetValue('oa3', 'application/vnd.fujitsu.oasys3');
  FFileType.AddOrSetValue('fg5', 'application/vnd.fujitsu.oasysgp');
  FFileType.AddOrSetValue('bh2', 'application/vnd.fujitsu.oasysprs');
  FFileType.AddOrSetValue('ddd', 'application/vnd.fujixerox.ddd');
  FFileType.AddOrSetValue('xdw', 'application/vnd.fujixerox.docuworks');
  FFileType.AddOrSetValue('xbd', 'application/vnd.fujixerox.docuworks.binder');
  FFileType.AddOrSetValue('fzs', 'application/vnd.fuzzysheet');
  FFileType.AddOrSetValue('txd', 'application/vnd.genomatix.tuxedo');
  FFileType.AddOrSetValue('ggb', 'application/vnd.geogebra.file');
  FFileType.AddOrSetValue('ggt', 'application/vnd.geogebra.tool');
  FFileType.AddOrSetValue('gex', 'application/vnd.geometry-explorer');
  FFileType.AddOrSetValue('gre', 'application/vnd.geometry-explorer');
  FFileType.AddOrSetValue('gxt', 'application/vnd.geonext');
  FFileType.AddOrSetValue('g2w', 'application/vnd.geoplan');
  FFileType.AddOrSetValue('g3w', 'application/vnd.geospace');
  FFileType.AddOrSetValue('gmx', 'application/vnd.gmx');
  FFileType.AddOrSetValue('kml', 'application/vnd.google-earth.kml+xml');
  FFileType.AddOrSetValue('kmz', 'application/vnd.google-earth.kmz');
  FFileType.AddOrSetValue('gqf', 'application/vnd.grafeq');
  FFileType.AddOrSetValue('gqs', 'application/vnd.grafeq');
  FFileType.AddOrSetValue('gac', 'application/vnd.groove-account');
  FFileType.AddOrSetValue('ghf', 'application/vnd.groove-help');
  FFileType.AddOrSetValue('gim', 'application/vnd.groove-identity-message');
  FFileType.AddOrSetValue('grv', 'application/vnd.groove-injector');
  FFileType.AddOrSetValue('gtm', 'application/vnd.groove-tool-message');
  FFileType.AddOrSetValue('tpl', 'application/vnd.groove-tool-template');
  FFileType.AddOrSetValue('vcg', 'application/vnd.groove-vcard');
  FFileType.AddOrSetValue('hal', 'application/vnd.hal+xml');
  FFileType.AddOrSetValue('zmm', 'application/vnd.handheld-entertainment+xml');
  FFileType.AddOrSetValue('hbci', 'application/vnd.hbci');
  FFileType.AddOrSetValue('les', 'application/vnd.hhe.lesson-player');
  FFileType.AddOrSetValue('hpgl', 'application/vnd.hp-hpgl');
  FFileType.AddOrSetValue('hpid', 'application/vnd.hp-hpid');
  FFileType.AddOrSetValue('hps', 'application/vnd.hp-hps');
  FFileType.AddOrSetValue('jlt', 'application/vnd.hp-jlyt');
  FFileType.AddOrSetValue('pcl', 'application/vnd.hp-pcl');
  FFileType.AddOrSetValue('pclxl', 'application/vnd.hp-pclxl');
  FFileType.AddOrSetValue('sfd-hdstx', 'application/vnd.hydrostatix.sof-data');
  FFileType.AddOrSetValue('mpy', 'application/vnd.ibm.minipay');
  FFileType.AddOrSetValue('afp', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('listafp', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('list3820', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('irm', 'application/vnd.ibm.rights-management');
  FFileType.AddOrSetValue('sc', 'application/vnd.ibm.secure-container');
  FFileType.AddOrSetValue('icc', 'application/vnd.iccprofile');
  FFileType.AddOrSetValue('icm', 'application/vnd.iccprofile');
  FFileType.AddOrSetValue('igl', 'application/vnd.igloader');
  FFileType.AddOrSetValue('ivp', 'application/vnd.immervision-ivp');
  FFileType.AddOrSetValue('ivu', 'application/vnd.immervision-ivu');
  FFileType.AddOrSetValue('igm', 'application/vnd.insors.igm');
  FFileType.AddOrSetValue('xpw', 'application/vnd.intercon.formnet');
  FFileType.AddOrSetValue('xpx', 'application/vnd.intercon.formnet');
  FFileType.AddOrSetValue('i2g', 'application/vnd.intergeo');
  FFileType.AddOrSetValue('qbo', 'application/vnd.intu.qbo');
  FFileType.AddOrSetValue('qfx', 'application/vnd.intu.qfx');
  FFileType.AddOrSetValue('rcprofile', 'application/vnd.ipunplugged.rcprofile');
  FFileType.AddOrSetValue('irp', 'application/vnd.irepository.package+xml');
  FFileType.AddOrSetValue('xpr', 'application/vnd.is-xpr');
  FFileType.AddOrSetValue('fcs', 'application/vnd.isac.fcs');
  FFileType.AddOrSetValue('jam', 'application/vnd.jam');
  FFileType.AddOrSetValue('rms', 'application/vnd.jcp.javame.midlet-rms');
  FFileType.AddOrSetValue('jisp', 'application/vnd.jisp');
  FFileType.AddOrSetValue('joda', 'application/vnd.joost.joda-archive');
  FFileType.AddOrSetValue('ktz', 'application/vnd.kahootz');
  FFileType.AddOrSetValue('ktr', 'application/vnd.kahootz');
  FFileType.AddOrSetValue('karbon', 'application/vnd.kde.karbon');
  FFileType.AddOrSetValue('chrt', 'application/vnd.kde.kchart');
  FFileType.AddOrSetValue('kfo', 'application/vnd.kde.kformula');
  FFileType.AddOrSetValue('flw', 'application/vnd.kde.kivio');
  FFileType.AddOrSetValue('kon', 'application/vnd.kde.kontour');
  FFileType.AddOrSetValue('kpr', 'application/vnd.kde.kpresenter');
  FFileType.AddOrSetValue('kpt', 'application/vnd.kde.kpresenter');
  FFileType.AddOrSetValue('ksp', 'application/vnd.kde.kspread');
  FFileType.AddOrSetValue('kwd', 'application/vnd.kde.kword');
  FFileType.AddOrSetValue('kwt', 'application/vnd.kde.kword');
  FFileType.AddOrSetValue('htke', 'application/vnd.kenameaapp');
  FFileType.AddOrSetValue('kia', 'application/vnd.kidspiration');
  FFileType.AddOrSetValue('kne', 'application/vnd.kinar');
  FFileType.AddOrSetValue('knp', 'application/vnd.kinar');
  FFileType.AddOrSetValue('skp', 'application/vnd.koan');
  FFileType.AddOrSetValue('skd', 'application/vnd.koan');
  FFileType.AddOrSetValue('skt', 'application/vnd.koan');
  FFileType.AddOrSetValue('skm', 'application/vnd.koan');
  FFileType.AddOrSetValue('sse', 'application/vnd.kodak-descriptor');
  FFileType.AddOrSetValue('lasxml', 'application/vnd.las.las+xml');
  FFileType.AddOrSetValue('lbd', 'application/vnd.llamagraphics.life-balance.desktop');
  FFileType.AddOrSetValue('lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml');
  FFileType.AddOrSetValue('123', 'application/vnd.lotus-1-2-3');
  FFileType.AddOrSetValue('apr', 'application/vnd.lotus-approach');
  FFileType.AddOrSetValue('pre', 'application/vnd.lotus-freelance');
  FFileType.AddOrSetValue('nsf', 'application/vnd.lotus-notes');
  FFileType.AddOrSetValue('org', 'application/vnd.lotus-organizer');
  FFileType.AddOrSetValue('scm', 'application/vnd.lotus-screencam');
  FFileType.AddOrSetValue('lwp', 'application/vnd.lotus-wordpro');
  FFileType.AddOrSetValue('portpkg', 'application/vnd.macports.portpkg');
  FFileType.AddOrSetValue('mcd', 'application/vnd.mcd');
  FFileType.AddOrSetValue('mc1', 'application/vnd.medcalcdata');
  FFileType.AddOrSetValue('cdkey', 'application/vnd.mediastation.cdkey');
  FFileType.AddOrSetValue('mwf', 'application/vnd.mfer');
  FFileType.AddOrSetValue('mfm', 'application/vnd.mfmp');
  FFileType.AddOrSetValue('flo', 'application/vnd.micrografx.flo');
  FFileType.AddOrSetValue('igx', 'application/vnd.micrografx.igx');
  FFileType.AddOrSetValue('mif', 'application/vnd.mif');
  FFileType.AddOrSetValue('daf', 'application/vnd.mobius.daf');
  FFileType.AddOrSetValue('dis', 'application/vnd.mobius.dis');
  FFileType.AddOrSetValue('mbk', 'application/vnd.mobius.mbk');
  FFileType.AddOrSetValue('mqy', 'application/vnd.mobius.mqy');
  FFileType.AddOrSetValue('msl', 'application/vnd.mobius.msl');
  FFileType.AddOrSetValue('plc', 'application/vnd.mobius.plc');
  FFileType.AddOrSetValue('txf', 'application/vnd.mobius.txf');
  FFileType.AddOrSetValue('mpn', 'application/vnd.mophun.application');
  FFileType.AddOrSetValue('mpc', 'application/vnd.mophun.certificate');
  FFileType.AddOrSetValue('xul', 'application/vnd.mozilla.xul+xml');
  FFileType.AddOrSetValue('cil', 'application/vnd.ms-artgalry');
  FFileType.AddOrSetValue('cab', 'application/vnd.ms-cab-compressed');
  FFileType.AddOrSetValue('xls', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlm', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xla', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlc', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlt', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlw', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlam', 'application/vnd.ms-excel.addin.macroenabled.12');
  FFileType.AddOrSetValue('xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12');
  FFileType.AddOrSetValue('xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12');
  FFileType.AddOrSetValue('xltm', 'application/vnd.ms-excel.template.macroenabled.12');
  FFileType.AddOrSetValue('eot', 'application/vnd.ms-fontobject');
  FFileType.AddOrSetValue('chm', 'application/vnd.ms-htmlhelp');
  FFileType.AddOrSetValue('ims', 'application/vnd.ms-ims');
  FFileType.AddOrSetValue('lrm', 'application/vnd.ms-lrm');
  FFileType.AddOrSetValue('thmx', 'application/vnd.ms-officetheme');
  FFileType.AddOrSetValue('cat', 'application/vnd.ms-pki.seccat');
  FFileType.AddOrSetValue('stl', 'application/vnd.ms-pki.stl');
  FFileType.AddOrSetValue('ppt', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('pps', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('pot', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12');
  FFileType.AddOrSetValue('pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12');
  FFileType.AddOrSetValue('sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12');
  FFileType.AddOrSetValue('ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12');
  FFileType.AddOrSetValue('potm', 'application/vnd.ms-powerpoint.template.macroenabled.12');
  FFileType.AddOrSetValue('mpp', 'application/vnd.ms-project');
  FFileType.AddOrSetValue('mpt', 'application/vnd.ms-project');
  FFileType.AddOrSetValue('docm', 'application/vnd.ms-word.document.macroenabled.12');
  FFileType.AddOrSetValue('dotm', 'application/vnd.ms-word.template.macroenabled.12');
  FFileType.AddOrSetValue('wps', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wks', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wcm', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wdb', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wpl', 'application/vnd.ms-wpl');
  FFileType.AddOrSetValue('xps', 'application/vnd.ms-xpsdocument');
  FFileType.AddOrSetValue('mseq', 'application/vnd.mseq');
  FFileType.AddOrSetValue('mus', 'application/vnd.musician');
  FFileType.AddOrSetValue('msty', 'application/vnd.muvee.style');
  FFileType.AddOrSetValue('taglet', 'application/vnd.mynfc');
  FFileType.AddOrSetValue('nlu', 'application/vnd.neurolanguage.nlu');
  FFileType.AddOrSetValue('ntf', 'application/vnd.nitf');
  FFileType.AddOrSetValue('nitf', 'application/vnd.nitf');
  FFileType.AddOrSetValue('nnd', 'application/vnd.noblenet-directory');
  FFileType.AddOrSetValue('nns', 'application/vnd.noblenet-sealer');
  FFileType.AddOrSetValue('nnw', 'application/vnd.noblenet-web');
  FFileType.AddOrSetValue('ngdat', 'application/vnd.nokia.n-gage.data');
  FFileType.AddOrSetValue('n-gage', 'application/vnd.nokia.n-gage.symbian.install');
  FFileType.AddOrSetValue('rpst', 'application/vnd.nokia.radio-preset');
  FFileType.AddOrSetValue('rpss', 'application/vnd.nokia.radio-presets');
  FFileType.AddOrSetValue('edm', 'application/vnd.novadigm.edm');
  FFileType.AddOrSetValue('edx', 'application/vnd.novadigm.edx');
  FFileType.AddOrSetValue('FExt', 'application/vnd.novadigm.FExt');
  FFileType.AddOrSetValue('odc', 'application/vnd.oasis.opendocument.chart');
  FFileType.AddOrSetValue('otc', 'application/vnd.oasis.opendocument.chart-template');
  FFileType.AddOrSetValue('odb', 'application/vnd.oasis.opendocument.database');
  FFileType.AddOrSetValue('odf', 'application/vnd.oasis.opendocument.formula');
  FFileType.AddOrSetValue('odft', 'application/vnd.oasis.opendocument.formula-template');
  FFileType.AddOrSetValue('odg', 'application/vnd.oasis.opendocument.graphics');
  FFileType.AddOrSetValue('otg', 'application/vnd.oasis.opendocument.graphics-template');
  FFileType.AddOrSetValue('odi', 'application/vnd.oasis.opendocument.image');
  FFileType.AddOrSetValue('oti', 'application/vnd.oasis.opendocument.image-template');
  FFileType.AddOrSetValue('odp', 'application/vnd.oasis.opendocument.presentation');
  FFileType.AddOrSetValue('otp', 'application/vnd.oasis.opendocument.presentation-template');
  FFileType.AddOrSetValue('ods', 'application/vnd.oasis.opendocument.spreadsheet');
  FFileType.AddOrSetValue('ots', 'application/vnd.oasis.opendocument.spreadsheet-template');
  FFileType.AddOrSetValue('odt', 'application/vnd.oasis.opendocument.text');
  FFileType.AddOrSetValue('odm', 'application/vnd.oasis.opendocument.text-master');
  FFileType.AddOrSetValue('ott', 'application/vnd.oasis.opendocument.text-template');
  FFileType.AddOrSetValue('oth', 'application/vnd.oasis.opendocument.text-web');
  FFileType.AddOrSetValue('xo', 'application/vnd.olpc-sugar');
  FFileType.AddOrSetValue('dd2', 'application/vnd.oma.dd2+xml');
  FFileType.AddOrSetValue('oxt', 'application/vnd.openofficeorg.extension');
  FFileType.AddOrSetValue('pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
  FFileType.AddOrSetValue('sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide');
  FFileType.AddOrSetValue('ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow');
  FFileType.AddOrSetValue('potx', 'application/vnd.openxmlformats-officedocument.presentationml.template');
  FFileType.AddOrSetValue('xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  FFileType.AddOrSetValue('xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template');
  FFileType.AddOrSetValue('docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
  FFileType.AddOrSetValue('dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template');
  FFileType.AddOrSetValue('mgp', 'application/vnd.osgeo.mapguide.package');
  FFileType.AddOrSetValue('dp', 'application/vnd.osgi.dp');
  FFileType.AddOrSetValue('esa', 'application/vnd.osgi.subsystem');
  FFileType.AddOrSetValue('pdb', 'application/vnd.palm');
  FFileType.AddOrSetValue('pqa', 'application/vnd.palm');
  FFileType.AddOrSetValue('oprc', 'application/vnd.palm');
  FFileType.AddOrSetValue('paw', 'application/vnd.pawaafile');
  FFileType.AddOrSetValue('str', 'application/vnd.pg.format');
  FFileType.AddOrSetValue('ei6', 'application/vnd.pg.osasli');
  FFileType.AddOrSetValue('efif', 'application/vnd.picsel');
  FFileType.AddOrSetValue('wg', 'application/vnd.pmi.widget');
  FFileType.AddOrSetValue('plf', 'application/vnd.pocketlearn');
  FFileType.AddOrSetValue('pbd', 'application/vnd.powerbuilder6');
  FFileType.AddOrSetValue('box', 'application/vnd.previewsystems.box');
  FFileType.AddOrSetValue('mgz', 'application/vnd.proteus.magazine');
  FFileType.AddOrSetValue('qps', 'application/vnd.publishare-delta-tree');
  FFileType.AddOrSetValue('ptid', 'application/vnd.pvi.ptid1');
  FFileType.AddOrSetValue('qxd', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxt', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qwd', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qwt', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxl', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxb', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('bed', 'application/vnd.realvnc.bed');
  FFileType.AddOrSetValue('mxl', 'application/vnd.recordare.musicxml');
  FFileType.AddOrSetValue('musicxml', 'application/vnd.recordare.musicxml+xml');
  FFileType.AddOrSetValue('cryptonote', 'application/vnd.rig.cryptonote');
  FFileType.AddOrSetValue('cod', 'application/vnd.rim.cod');
  FFileType.AddOrSetValue('rm', 'application/vnd.rn-realmedia');
  FFileType.AddOrSetValue('rmvb', 'application/vnd.rn-realmedia-vbr');
  FFileType.AddOrSetValue('link66', 'application/vnd.route66.link66+xml');
  FFileType.AddOrSetValue('st', 'application/vnd.sailingtracker.track');
  FFileType.AddOrSetValue('see', 'application/vnd.seemail');
  FFileType.AddOrSetValue('sema', 'application/vnd.sema');
  FFileType.AddOrSetValue('semd', 'application/vnd.semd');
  FFileType.AddOrSetValue('semf', 'application/vnd.semf');
  FFileType.AddOrSetValue('ifm', 'application/vnd.shana.informed.formdata');
  FFileType.AddOrSetValue('itp', 'application/vnd.shana.informed.formtemplate');
  FFileType.AddOrSetValue('iif', 'application/vnd.shana.informed.interchange');
  FFileType.AddOrSetValue('ipk', 'application/vnd.shana.informed.package');
  FFileType.AddOrSetValue('twd', 'application/vnd.simtech-mindmapper');
  FFileType.AddOrSetValue('twds', 'application/vnd.simtech-mindmapper');
  FFileType.AddOrSetValue('mmf', 'application/vnd.smaf');
  FFileType.AddOrSetValue('teacher', 'application/vnd.smart.teacher');
  FFileType.AddOrSetValue('sdkm', 'application/vnd.solent.sdkm+xml');
  FFileType.AddOrSetValue('sdkd', 'application/vnd.solent.sdkm+xml');
  FFileType.AddOrSetValue('dxp', 'application/vnd.spotfire.dxp');
  FFileType.AddOrSetValue('sfs', 'application/vnd.spotfire.sfs');
  FFileType.AddOrSetValue('sdc', 'application/vnd.stardivision.calc');
  FFileType.AddOrSetValue('sda', 'application/vnd.stardivision.draw');
  FFileType.AddOrSetValue('sdd', 'application/vnd.stardivision.impress');
  FFileType.AddOrSetValue('smf', 'application/vnd.stardivision.math');
  FFileType.AddOrSetValue('sdw', 'application/vnd.stardivision.writer');
  FFileType.AddOrSetValue('vor', 'application/vnd.stardivision.writer');
  FFileType.AddOrSetValue('sgl', 'application/vnd.stardivision.writer-global');
  FFileType.AddOrSetValue('smzip', 'application/vnd.stepmania.package');
  FFileType.AddOrSetValue('sm', 'application/vnd.stepmania.stepchart');
  FFileType.AddOrSetValue('sxc', 'application/vnd.sun.xml.calc');
  FFileType.AddOrSetValue('stc', 'application/vnd.sun.xml.calc.template');
  FFileType.AddOrSetValue('sxd', 'application/vnd.sun.xml.draw');
  FFileType.AddOrSetValue('std', 'application/vnd.sun.xml.draw.template');
  FFileType.AddOrSetValue('sxi', 'application/vnd.sun.xml.impress');
  FFileType.AddOrSetValue('sti', 'application/vnd.sun.xml.impress.template');
  FFileType.AddOrSetValue('sxm', 'application/vnd.sun.xml.math');
  FFileType.AddOrSetValue('sxw', 'application/vnd.sun.xml.writer');
  FFileType.AddOrSetValue('sxg', 'application/vnd.sun.xml.writer.global');
  FFileType.AddOrSetValue('stw', 'application/vnd.sun.xml.writer.template');
  FFileType.AddOrSetValue('sus', 'application/vnd.sus-calendar');
  FFileType.AddOrSetValue('susp', 'application/vnd.sus-calendar');
  FFileType.AddOrSetValue('svd', 'application/vnd.svd');
  FFileType.AddOrSetValue('sis', 'application/vnd.symbian.install');
  FFileType.AddOrSetValue('sisx', 'application/vnd.symbian.install');
  FFileType.AddOrSetValue('xsm', 'application/vnd.syncml+xml');
  FFileType.AddOrSetValue('bdm', 'application/vnd.syncml.dm+wbxml');
  FFileType.AddOrSetValue('xdm', 'application/vnd.syncml.dm+xml');
  FFileType.AddOrSetValue('tao', 'application/vnd.tao.intent-module-archive');
  FFileType.AddOrSetValue('pcap', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('cap', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('dmp', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('tmo', 'application/vnd.tmobile-livetv');
  FFileType.AddOrSetValue('tpt', 'application/vnd.trid.tpt');
  FFileType.AddOrSetValue('mxs', 'application/vnd.triscape.mxs');
  FFileType.AddOrSetValue('tra', 'application/vnd.trueapp');
  FFileType.AddOrSetValue('ufd', 'application/vnd.ufdl');
  FFileType.AddOrSetValue('ufdl', 'application/vnd.ufdl');
  FFileType.AddOrSetValue('utz', 'application/vnd.uiq.theme');
  FFileType.AddOrSetValue('umj', 'application/vnd.umajin');
  FFileType.AddOrSetValue('unityweb', 'application/vnd.unity');
  FFileType.AddOrSetValue('uoml', 'application/vnd.uoml+xml');
  FFileType.AddOrSetValue('vcx', 'application/vnd.vcx');
  FFileType.AddOrSetValue('vsd', 'application/vnd.visio');
  FFileType.AddOrSetValue('vst', 'application/vnd.visio');
  FFileType.AddOrSetValue('vss', 'application/vnd.visio');
  FFileType.AddOrSetValue('vsw', 'application/vnd.visio');
  FFileType.AddOrSetValue('vis', 'application/vnd.visionary');
  FFileType.AddOrSetValue('vsf', 'application/vnd.vsf');
  FFileType.AddOrSetValue('wbxml', 'application/vnd.wap.wbxml');
  FFileType.AddOrSetValue('wmlc', 'application/vnd.wap.wmlc');
  FFileType.AddOrSetValue('wmlsc', 'application/vnd.wap.wmlscriptc');
  FFileType.AddOrSetValue('wtb', 'application/vnd.webturbo');
  FFileType.AddOrSetValue('nbp', 'application/vnd.wolfram.player');
  FFileType.AddOrSetValue('wpd', 'application/vnd.wordperfect');
  FFileType.AddOrSetValue('wqd', 'application/vnd.wqd');
  FFileType.AddOrSetValue('stf', 'application/vnd.wt.stf');
  FFileType.AddOrSetValue('xar', 'application/vnd.xara');
  FFileType.AddOrSetValue('xfdl', 'application/vnd.xfdl');
  FFileType.AddOrSetValue('hvd', 'application/vnd.yamaha.hv-dic');
  FFileType.AddOrSetValue('hvs', 'application/vnd.yamaha.hv-script');
  FFileType.AddOrSetValue('hvp', 'application/vnd.yamaha.hv-voice');
  FFileType.AddOrSetValue('osf', 'application/vnd.yamaha.openscoreformat');
  FFileType.AddOrSetValue('osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml');
  FFileType.AddOrSetValue('saf', 'application/vnd.yamaha.smaf-audio');
  FFileType.AddOrSetValue('spf', 'application/vnd.yamaha.smaf-phrase');
  FFileType.AddOrSetValue('cmp', 'application/vnd.yellowriver-custom-menu');
  FFileType.AddOrSetValue('zir', 'application/vnd.zul');
  FFileType.AddOrSetValue('zirz', 'application/vnd.zul');
  FFileType.AddOrSetValue('zaz', 'application/vnd.zzazz.deck+xml');
  FFileType.AddOrSetValue('vxml', 'application/voicexml+xml');
  FFileType.AddOrSetValue('wgt', 'application/widget');
  FFileType.AddOrSetValue('hlp', 'application/winhlp');
  FFileType.AddOrSetValue('wsdl', 'application/wsdl+xml');
  FFileType.AddOrSetValue('wspolicy', 'application/wspolicy+xml');
  FFileType.AddOrSetValue('7z', 'application/x-7z-compressed');
  FFileType.AddOrSetValue('abw', 'application/x-abiword');
  FFileType.AddOrSetValue('ace', 'application/x-ace-compressed');
  FFileType.AddOrSetValue('dmg', 'application/x-apple-diskimage');
  FFileType.AddOrSetValue('aab', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('x32', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('u32', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('vox', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('aam', 'application/x-authorware-map');
  FFileType.AddOrSetValue('aas', 'application/x-authorware-seg');
  FFileType.AddOrSetValue('bcpio', 'application/x-bcpio');
  FFileType.AddOrSetValue('torrent', 'application/x-bittorrent');
  FFileType.AddOrSetValue('blb', 'application/x-blorb');
  FFileType.AddOrSetValue('blorb', 'application/x-blorb');
  FFileType.AddOrSetValue('bz', 'application/x-bzip');
  FFileType.AddOrSetValue('bz2', 'application/x-bzip2');
  FFileType.AddOrSetValue('boz', 'application/x-bzip2');
  FFileType.AddOrSetValue('cbr', 'application/x-cbr');
  FFileType.AddOrSetValue('cba', 'application/x-cbr');
  FFileType.AddOrSetValue('cbt', 'application/x-cbr');
  FFileType.AddOrSetValue('cbz', 'application/x-cbr');
  FFileType.AddOrSetValue('cb7', 'application/x-cbr');
  FFileType.AddOrSetValue('vcd', 'application/x-cdlink');
  FFileType.AddOrSetValue('cfs', 'application/x-cfs-compressed');
  FFileType.AddOrSetValue('chat', 'application/x-chat');
  FFileType.AddOrSetValue('pgn', 'application/x-chess-pgn');
  FFileType.AddOrSetValue('nsc', 'application/x-conference');
  FFileType.AddOrSetValue('cpio', 'application/x-cpio');
  FFileType.AddOrSetValue('csh', 'application/x-csh');
  FFileType.AddOrSetValue('deb', 'application/x-debian-package');
  FFileType.AddOrSetValue('udeb', 'application/x-debian-package');
  FFileType.AddOrSetValue('dgc', 'application/x-dgc-compressed');
  FFileType.AddOrSetValue('dir', 'application/x-director');
  FFileType.AddOrSetValue('dcr', 'application/x-director');
  FFileType.AddOrSetValue('dxr', 'application/x-director');
  FFileType.AddOrSetValue('cst', 'application/x-director');
  FFileType.AddOrSetValue('cct', 'application/x-director');
  FFileType.AddOrSetValue('cxt', 'application/x-director');
  FFileType.AddOrSetValue('w3d', 'application/x-director');
  FFileType.AddOrSetValue('fgd', 'application/x-director');
  FFileType.AddOrSetValue('swa', 'application/x-director');
  FFileType.AddOrSetValue('wad', 'application/x-doom');
  FFileType.AddOrSetValue('ncx', 'application/x-dtbncx+xml');
  FFileType.AddOrSetValue('dtb', 'application/x-dtbook+xml');
  FFileType.AddOrSetValue('res', 'application/x-dtbresource+xml');
  FFileType.AddOrSetValue('dvi', 'application/x-dvi');
  FFileType.AddOrSetValue('evy', 'application/x-envoy');
  FFileType.AddOrSetValue('eva', 'application/x-eva');
  FFileType.AddOrSetValue('bdf', 'application/x-font-bdf');
  FFileType.AddOrSetValue('gsf', 'application/x-font-ghostscript');
  FFileType.AddOrSetValue('psf', 'application/x-font-linux-psf');
  FFileType.AddOrSetValue('otf', 'application/x-font-otf');
  FFileType.AddOrSetValue('pcf', 'application/x-font-pcf');
  FFileType.AddOrSetValue('snf', 'application/x-font-snf');
  FFileType.AddOrSetValue('ttf', 'application/x-font-ttf');
  FFileType.AddOrSetValue('ttc', 'application/x-font-ttf');
  FFileType.AddOrSetValue('pfa', 'application/x-font-type1');
  FFileType.AddOrSetValue('pfb', 'application/x-font-type1');
  FFileType.AddOrSetValue('pfm', 'application/x-font-type1');
  FFileType.AddOrSetValue('afm', 'application/x-font-type1');
  FFileType.AddOrSetValue('woff', 'application/x-font-woff');
  FFileType.AddOrSetValue('arc', 'application/x-freearc');
  FFileType.AddOrSetValue('spl', 'application/x-futuresplash');
  FFileType.AddOrSetValue('gca', 'application/x-gca-compressed');
  FFileType.AddOrSetValue('ulx', 'application/x-glulx');
  FFileType.AddOrSetValue('gnumeric', 'application/x-gnumeric');
  FFileType.AddOrSetValue('gramps', 'application/x-gramps-xml');
  FFileType.AddOrSetValue('gtar', 'application/x-gtar');
  FFileType.AddOrSetValue('hdf', 'application/x-hdf');
  FFileType.AddOrSetValue('install', 'application/x-install-instructions');
  FFileType.AddOrSetValue('iso', 'application/x-iso9660-image');
  FFileType.AddOrSetValue('jnlp', 'application/x-java-jnlp-file');
  FFileType.AddOrSetValue('latex', 'application/x-latex');
  FFileType.AddOrSetValue('lzh', 'application/x-lzh-compressed');
  FFileType.AddOrSetValue('lha', 'application/x-lzh-compressed');
  FFileType.AddOrSetValue('mie', 'application/x-mie');
  FFileType.AddOrSetValue('prc', 'application/x-mobipocket-ebook');
  FFileType.AddOrSetValue('mobi', 'application/x-mobipocket-ebook');
  FFileType.AddOrSetValue('application', 'application/x-ms-application');
  FFileType.AddOrSetValue('lnk', 'application/x-ms-shortcut');
  FFileType.AddOrSetValue('wmd', 'application/x-ms-wmd');
  FFileType.AddOrSetValue('wmz', 'application/x-ms-wmz');
  FFileType.AddOrSetValue('xbap', 'application/x-ms-xbap');
  FFileType.AddOrSetValue('mdb', 'application/x-msaccess');
  FFileType.AddOrSetValue('obd', 'application/x-msbinder');
  FFileType.AddOrSetValue('crd', 'application/x-mscardfile');
  FFileType.AddOrSetValue('clp', 'application/x-msclip');
  FFileType.AddOrSetValue('exe', 'application/x-msdownload');
  FFileType.AddOrSetValue('dll', 'application/x-msdownload');
  FFileType.AddOrSetValue('com', 'application/x-msdownload');
  FFileType.AddOrSetValue('bat', 'application/x-msdownload');
  FFileType.AddOrSetValue('msi', 'application/x-msdownload');
  FFileType.AddOrSetValue('mvb', 'application/x-msmediaview');
  FFileType.AddOrSetValue('m13', 'application/x-msmediaview');
  FFileType.AddOrSetValue('m14', 'application/x-msmediaview');
  FFileType.AddOrSetValue('wmf', 'application/x-msmetafile');
  FFileType.AddOrSetValue('wmz', 'application/x-msmetafile');
  FFileType.AddOrSetValue('emf', 'application/x-msmetafile');
  FFileType.AddOrSetValue('emz', 'application/x-msmetafile');
  FFileType.AddOrSetValue('mny', 'application/x-msmoney');
  FFileType.AddOrSetValue('pub', 'application/x-mspublisher');
  FFileType.AddOrSetValue('scd', 'application/x-msschedule');
  FFileType.AddOrSetValue('trm', 'application/x-msterminal');
  FFileType.AddOrSetValue('wri', 'application/x-mswrite');
  FFileType.AddOrSetValue('nc', 'application/x-netcdf');
  FFileType.AddOrSetValue('cdf', 'application/x-netcdf');
  FFileType.AddOrSetValue('nzb', 'application/x-nzb');
  FFileType.AddOrSetValue('p12', 'application/x-pkcs12');
  FFileType.AddOrSetValue('pfx', 'application/x-pkcs12');
  FFileType.AddOrSetValue('p7b', 'application/x-pkcs7-certificates');
  FFileType.AddOrSetValue('spc', 'application/x-pkcs7-certificates');
  FFileType.AddOrSetValue('p7r', 'application/x-pkcs7-certreqresp');
  FFileType.AddOrSetValue('rar', 'application/x-rar-compressed');
  FFileType.AddOrSetValue('ris', 'application/x-research-info-systems');
  FFileType.AddOrSetValue('sh', 'application/x-sh');
  FFileType.AddOrSetValue('shar', 'application/x-shar');
  FFileType.AddOrSetValue('swf', 'application/x-shockwave-flash');
  FFileType.AddOrSetValue('xap', 'application/x-silverlight-app');
  FFileType.AddOrSetValue('sql', 'application/x-sql');
  FFileType.AddOrSetValue('sit', 'application/x-stuffit');
  FFileType.AddOrSetValue('sitx', 'application/x-stuffitx');
  FFileType.AddOrSetValue('srt', 'application/x-subrip');
  FFileType.AddOrSetValue('sv4cpio', 'application/x-sv4cpio');
  FFileType.AddOrSetValue('sv4crc', 'application/x-sv4crc');
  FFileType.AddOrSetValue('t3', 'application/x-t3vm-image');
  FFileType.AddOrSetValue('gam', 'application/x-tads');
  FFileType.AddOrSetValue('tar', 'application/x-tar');
  FFileType.AddOrSetValue('tcl', 'application/x-tcl');
  FFileType.AddOrSetValue('tex', 'application/x-tex');
  FFileType.AddOrSetValue('tfm', 'application/x-tex-tfm');
  FFileType.AddOrSetValue('texinfo', 'application/x-texinfo');
  FFileType.AddOrSetValue('texi', 'application/x-texinfo');
  FFileType.AddOrSetValue('obj', 'application/x-tgif');
  FFileType.AddOrSetValue('ustar', 'application/x-ustar');
  FFileType.AddOrSetValue('src', 'application/x-wais-source');
  FFileType.AddOrSetValue('der', 'application/x-x509-ca-cert');
  FFileType.AddOrSetValue('crt', 'application/x-x509-ca-cert');
  FFileType.AddOrSetValue('fig', 'application/x-xfig');
  FFileType.AddOrSetValue('xlf', 'application/x-xliff+xml');
  FFileType.AddOrSetValue('xpi', 'application/x-xpinstall');
  FFileType.AddOrSetValue('xz', 'application/x-xz');
  FFileType.AddOrSetValue('yaml', 'application/x-yaml');
  FFileType.AddOrSetValue('z1', 'application/x-zmachine');
  FFileType.AddOrSetValue('z2', 'application/x-zmachine');
  FFileType.AddOrSetValue('z3', 'application/x-zmachine');
  FFileType.AddOrSetValue('z4', 'application/x-zmachine');
  FFileType.AddOrSetValue('z5', 'application/x-zmachine');
  FFileType.AddOrSetValue('z6', 'application/x-zmachine');
  FFileType.AddOrSetValue('z7', 'application/x-zmachine');
  FFileType.AddOrSetValue('z8', 'application/x-zmachine');
  FFileType.AddOrSetValue('xaml', 'application/xaml+xml');
  FFileType.AddOrSetValue('xdf', 'application/xcap-diff+xml');
  FFileType.AddOrSetValue('xenc', 'application/xenc+xml');
  FFileType.AddOrSetValue('xhtml', 'application/xhtml+xml');
  FFileType.AddOrSetValue('xht', 'application/xhtml+xml');
  FFileType.AddOrSetValue('xml', 'application/xml');
  FFileType.AddOrSetValue('xsl', 'application/xml');
  FFileType.AddOrSetValue('dtd', 'application/xml-dtd');
  FFileType.AddOrSetValue('xop', 'application/xop+xml');
  FFileType.AddOrSetValue('xpl', 'application/xproc+xml');
  FFileType.AddOrSetValue('xslt', 'application/xslt+xml');
  FFileType.AddOrSetValue('xspf', 'application/xspf+xml');
  FFileType.AddOrSetValue('mxml', 'application/xv+xml');
  FFileType.AddOrSetValue('xhvml', 'application/xv+xml');
  FFileType.AddOrSetValue('xvml', 'application/xv+xml');
  FFileType.AddOrSetValue('xvm', 'application/xv+xml');
  FFileType.AddOrSetValue('yang', 'application/yang');
  FFileType.AddOrSetValue('yin', 'application/yin+xml');
  FFileType.AddOrSetValue('zip', 'application/zip');
  FFileType.AddOrSetValue('adp', 'audio/adpcm');
  FFileType.AddOrSetValue('au', 'audio/basic');
  FFileType.AddOrSetValue('snd', 'audio/basic');
  FFileType.AddOrSetValue('mid', 'audio/midi');
  FFileType.AddOrSetValue('midi', 'audio/midi');
  FFileType.AddOrSetValue('kar', 'audio/midi');
  FFileType.AddOrSetValue('rmi', 'audio/midi');
  FFileType.AddOrSetValue('mp4a', 'audio/mp4');
  FFileType.AddOrSetValue('mpga', 'audio/mpeg');
  FFileType.AddOrSetValue('mp2', 'audio/mpeg');
  FFileType.AddOrSetValue('mp2a', 'audio/mpeg');
  FFileType.AddOrSetValue('mp3', 'audio/mpeg');
  FFileType.AddOrSetValue('m2a', 'audio/mpeg');
  FFileType.AddOrSetValue('m3a', 'audio/mpeg');
  FFileType.AddOrSetValue('oga', 'audio/ogg');
  FFileType.AddOrSetValue('ogg', 'audio/ogg');
  FFileType.AddOrSetValue('spx', 'audio/ogg');
  FFileType.AddOrSetValue('s3m', 'audio/s3m');
  FFileType.AddOrSetValue('sil', 'audio/silk');
  FFileType.AddOrSetValue('uva', 'audio/vnd.dece.audio');
  FFileType.AddOrSetValue('uvva', 'audio/vnd.dece.audio');
  FFileType.AddOrSetValue('eol', 'audio/vnd.digital-winds');
  FFileType.AddOrSetValue('dra', 'audio/vnd.dra');
  FFileType.AddOrSetValue('dts', 'audio/vnd.dts');
  FFileType.AddOrSetValue('dtshd', 'audio/vnd.dts.hd');
  FFileType.AddOrSetValue('lvp', 'audio/vnd.lucent.voice');
  FFileType.AddOrSetValue('pya', 'audio/vnd.ms-playready.media.pya');
  FFileType.AddOrSetValue('ecelp4800', 'audio/vnd.nuera.ecelp4800');
  FFileType.AddOrSetValue('ecelp7470', 'audio/vnd.nuera.ecelp7470');
  FFileType.AddOrSetValue('ecelp9600', 'audio/vnd.nuera.ecelp9600');
  FFileType.AddOrSetValue('rip', 'audio/vnd.rip');
  FFileType.AddOrSetValue('weba', 'audio/webm');
  FFileType.AddOrSetValue('aac', 'audio/x-aac');
  FFileType.AddOrSetValue('aif', 'audio/x-aiff');
  FFileType.AddOrSetValue('aiff', 'audio/x-aiff');
  FFileType.AddOrSetValue('aifc', 'audio/x-aiff');
  FFileType.AddOrSetValue('caf', 'audio/x-caf');
  FFileType.AddOrSetValue('flac', 'audio/x-flac');
  FFileType.AddOrSetValue('mka', 'audio/x-matroska');
  FFileType.AddOrSetValue('m3u', 'audio/x-mpegurl');
  FFileType.AddOrSetValue('wax', 'audio/x-ms-wax');
  FFileType.AddOrSetValue('wma', 'audio/x-ms-wma');
  FFileType.AddOrSetValue('ram', 'audio/x-pn-realaudio');
  FFileType.AddOrSetValue('ra', 'audio/x-pn-realaudio');
  FFileType.AddOrSetValue('rmp', 'audio/x-pn-realaudio-plugin');
  FFileType.AddOrSetValue('wav', 'audio/x-wav');
  FFileType.AddOrSetValue('xm', 'audio/xm');
  FFileType.AddOrSetValue('cdx', 'chemical/x-cdx');
  FFileType.AddOrSetValue('cif', 'chemical/x-cif');
  FFileType.AddOrSetValue('cmdf', 'chemical/x-cmdf');
  FFileType.AddOrSetValue('cml', 'chemical/x-cml');
  FFileType.AddOrSetValue('csml', 'chemical/x-csml');
  FFileType.AddOrSetValue('xyz', 'chemical/x-xyz');
  FFileType.AddOrSetValue('bmp', 'image/bmp');
  FFileType.AddOrSetValue('cgm', 'image/cgm');
  FFileType.AddOrSetValue('g3', 'image/g3fax');
  FFileType.AddOrSetValue('gif', 'image/gif');
  FFileType.AddOrSetValue('ief', 'image/ief');
  FFileType.AddOrSetValue('jpeg', 'image/jpeg');
  FFileType.AddOrSetValue('jpg', 'image/jpeg');
  FFileType.AddOrSetValue('jpe', 'image/jpeg');
  FFileType.AddOrSetValue('ktx', 'image/ktx');
  FFileType.AddOrSetValue('png', 'image/png');
  FFileType.AddOrSetValue('btif', 'image/prs.btif');
  FFileType.AddOrSetValue('sgi', 'image/sgi');
  FFileType.AddOrSetValue('svg', 'image/svg+xml');
  FFileType.AddOrSetValue('svgz', 'image/svg+xml');
  FFileType.AddOrSetValue('tiff', 'image/tiff');
  FFileType.AddOrSetValue('tif', 'image/tiff');
  FFileType.AddOrSetValue('psd', 'image/vnd.adobe.photoshop');
  FFileType.AddOrSetValue('uvi', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvvi', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvg', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvvg', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('sub', 'image/vnd.dvb.subtitle');
  FFileType.AddOrSetValue('djvu', 'image/vnd.djvu');
  FFileType.AddOrSetValue('djv', 'image/vnd.djvu');
  FFileType.AddOrSetValue('dwg', 'image/vnd.dwg');
  FFileType.AddOrSetValue('dxf', 'image/vnd.dxf');
  FFileType.AddOrSetValue('fbs', 'image/vnd.fastbidsheet');
  FFileType.AddOrSetValue('fpx', 'image/vnd.fpx');
  FFileType.AddOrSetValue('fst', 'image/vnd.fst');
  FFileType.AddOrSetValue('mmr', 'image/vnd.fujixerox.edmics-mmr');
  FFileType.AddOrSetValue('rlc', 'image/vnd.fujixerox.edmics-rlc');
  FFileType.AddOrSetValue('mdi', 'image/vnd.ms-modi');
  FFileType.AddOrSetValue('wdp', 'image/vnd.ms-photo');
  FFileType.AddOrSetValue('npx', 'image/vnd.net-fpx');
  FFileType.AddOrSetValue('wbmp', 'image/vnd.wap.wbmp');
  FFileType.AddOrSetValue('xif', 'image/vnd.xiff');
  FFileType.AddOrSetValue('webp', 'image/webp');
  FFileType.AddOrSetValue('3ds', 'image/x-3ds');
  FFileType.AddOrSetValue('ras', 'image/x-cmu-raster');
  FFileType.AddOrSetValue('cmx', 'image/x-cmx');
  FFileType.AddOrSetValue('fh', 'image/x-freehand');
  FFileType.AddOrSetValue('fhc', 'image/x-freehand');
  FFileType.AddOrSetValue('fh4', 'image/x-freehand');
  FFileType.AddOrSetValue('fh5', 'image/x-freehand');
  FFileType.AddOrSetValue('fh7', 'image/x-freehand');
  FFileType.AddOrSetValue('ico', 'image/x-icon');
  FFileType.AddOrSetValue('sid', 'image/x-mrsid-image');
  FFileType.AddOrSetValue('pcx', 'image/x-pcx');
  FFileType.AddOrSetValue('pic', 'image/x-pict');
  FFileType.AddOrSetValue('pct', 'image/x-pict');
  FFileType.AddOrSetValue('pnm', 'image/x-portable-anymap');
  FFileType.AddOrSetValue('pbm', 'image/x-portable-bitmap');
  FFileType.AddOrSetValue('pgm', 'image/x-portable-graymap');
  FFileType.AddOrSetValue('ppm', 'image/x-portable-pixmap');
  FFileType.AddOrSetValue('rgb', 'image/x-rgb');
  FFileType.AddOrSetValue('tga', 'image/x-tga');
  FFileType.AddOrSetValue('xbm', 'image/x-xbitmap');
  FFileType.AddOrSetValue('xpm', 'image/x-xpixmap');
  FFileType.AddOrSetValue('xwd', 'image/x-xwindowdump');
  FFileType.AddOrSetValue('eml', 'message/rfc822');
  FFileType.AddOrSetValue('mime', 'message/rfc822');
  FFileType.AddOrSetValue('igs', 'model/iges');
  FFileType.AddOrSetValue('iges', 'model/iges');
  FFileType.AddOrSetValue('msh', 'model/mesh');
  FFileType.AddOrSetValue('mesh', 'model/mesh');
  FFileType.AddOrSetValue('silo', 'model/mesh');
  FFileType.AddOrSetValue('dae', 'model/vnd.collada+xml');
  FFileType.AddOrSetValue('dwf', 'model/vnd.dwf');
  FFileType.AddOrSetValue('gdl', 'model/vnd.gdl');
  FFileType.AddOrSetValue('gtw', 'model/vnd.gtw');
  FFileType.AddOrSetValue('mts', 'model/vnd.mts');
  FFileType.AddOrSetValue('vtu', 'model/vnd.vtu');
  FFileType.AddOrSetValue('wrl', 'model/vrml');
  FFileType.AddOrSetValue('vrml', 'model/vrml');
  FFileType.AddOrSetValue('x3db', 'model/x3d+binary');
  FFileType.AddOrSetValue('x3dbz', 'model/x3d+binary');
  FFileType.AddOrSetValue('x3dv', 'model/x3d+vrml');
  FFileType.AddOrSetValue('x3dvz', 'model/x3d+vrml');
  FFileType.AddOrSetValue('x3d', 'model/x3d+xml');
  FFileType.AddOrSetValue('x3dz', 'model/x3d+xml');
  FFileType.AddOrSetValue('appcache', 'text/cache-manifest');
  FFileType.AddOrSetValue('manifest', 'text/cache-manifest');
  FFileType.AddOrSetValue('ics', 'text/calendar');
  FFileType.AddOrSetValue('ifb', 'text/calendar');
  FFileType.AddOrSetValue('cmd', 'text/cmd');
  FFileType.AddOrSetValue('css', 'text/css');
  FFileType.AddOrSetValue('csv', 'text/csv');
  FFileType.AddOrSetValue('html', 'text/html');
  FFileType.AddOrSetValue('htm', 'text/html');
  FFileType.AddOrSetValue('n3', 'text/n3');
  FFileType.AddOrSetValue('txt', 'text/plain');
  FFileType.AddOrSetValue('text', 'text/plain');
  FFileType.AddOrSetValue('conf', 'text/plain');
  FFileType.AddOrSetValue('def', 'text/plain');
  FFileType.AddOrSetValue('list', 'text/plain');
  FFileType.AddOrSetValue('log', 'text/plain');
  FFileType.AddOrSetValue('in', 'text/plain');
  FFileType.AddOrSetValue('dsc', 'text/prs.lines.tag');
  FFileType.AddOrSetValue('rtx', 'text/richtext');
  FFileType.AddOrSetValue('sgml', 'text/sgml');
  FFileType.AddOrSetValue('sgm', 'text/sgml');
  FFileType.AddOrSetValue('tsv', 'text/tab-separated-values');
  FFileType.AddOrSetValue('t', 'text/troff');
  FFileType.AddOrSetValue('tr', 'text/troff');
  FFileType.AddOrSetValue('roff', 'text/troff');
  FFileType.AddOrSetValue('man', 'text/troff');
  FFileType.AddOrSetValue('me', 'text/troff');
  FFileType.AddOrSetValue('ms', 'text/troff');
  FFileType.AddOrSetValue('ttl', 'text/turtle');
  FFileType.AddOrSetValue('uri', 'text/uri-list');
  FFileType.AddOrSetValue('uris', 'text/uri-list');
  FFileType.AddOrSetValue('urls', 'text/uri-list');
  FFileType.AddOrSetValue('vcard', 'text/vcard');
  FFileType.AddOrSetValue('curl', 'text/vnd.curl');
  FFileType.AddOrSetValue('dcurl', 'text/vnd.curl.dcurl');
  FFileType.AddOrSetValue('scurl', 'text/vnd.curl.scurl');
  FFileType.AddOrSetValue('mcurl', 'text/vnd.curl.mcurl');
  FFileType.AddOrSetValue('sub', 'text/vnd.dvb.subtitle');
  FFileType.AddOrSetValue('fly', 'text/vnd.fly');
  FFileType.AddOrSetValue('flx', 'text/vnd.fmi.flexstor');
  FFileType.AddOrSetValue('gv', 'text/vnd.graphviz');
  FFileType.AddOrSetValue('3dml', 'text/vnd.in3d.3dml');
  FFileType.AddOrSetValue('spot', 'text/vnd.in3d.spot');
  FFileType.AddOrSetValue('jad', 'text/vnd.sun.j2me.app-descriptor');
  FFileType.AddOrSetValue('wml', 'text/vnd.wap.wml');
  FFileType.AddOrSetValue('wmls', 'text/vnd.wap.wmlscript');
  FFileType.AddOrSetValue('s', 'text/x-asm');
  FFileType.AddOrSetValue('asm', 'text/x-asm');
  FFileType.AddOrSetValue('c', 'text/x-c');
  FFileType.AddOrSetValue('cc', 'text/x-c');
  FFileType.AddOrSetValue('cxx', 'text/x-c');
  FFileType.AddOrSetValue('cpp', 'text/x-c');
  FFileType.AddOrSetValue('h', 'text/x-c');
  FFileType.AddOrSetValue('hh', 'text/x-c');
  FFileType.AddOrSetValue('dic', 'text/x-c');
  FFileType.AddOrSetValue('f', 'text/x-fortran');
  FFileType.AddOrSetValue('for', 'text/x-fortran');
  FFileType.AddOrSetValue('f77', 'text/x-fortran');
  FFileType.AddOrSetValue('f90', 'text/x-fortran');
  FFileType.AddOrSetValue('java', 'text/x-java-source');
  FFileType.AddOrSetValue('opml', 'text/x-opml');
  FFileType.AddOrSetValue('p', 'text/x-pascal');
  FFileType.AddOrSetValue('pas', 'text/x-pascal');
  FFileType.AddOrSetValue('nfo', 'text/x-nfo');
  FFileType.AddOrSetValue('etx', 'text/x-setext');
  FFileType.AddOrSetValue('sfv', 'text/x-sfv');
  FFileType.AddOrSetValue('uu', 'text/x-uuencode');
  FFileType.AddOrSetValue('vcs', 'text/x-vcalendar');
  FFileType.AddOrSetValue('vcf', 'text/x-vcard');
  FFileType.AddOrSetValue('vcf', 'text/x-yaml');
  FFileType.AddOrSetValue('xml', 'text/xml');
  FFileType.AddOrSetValue('xsl', 'text/xml');
  FFileType.AddOrSetValue('dtd', 'text/xml-dtd');
  FFileType.AddOrSetValue('yaml', 'text/yaml');
  FFileType.AddOrSetValue('3gp', 'video/3gpp');
  FFileType.AddOrSetValue('3g2', 'video/3gpp2');
  FFileType.AddOrSetValue('h261', 'video/h261');
  FFileType.AddOrSetValue('h263', 'video/h263');
  FFileType.AddOrSetValue('h264', 'video/h264');
  FFileType.AddOrSetValue('jpgv', 'video/jpeg');
  FFileType.AddOrSetValue('jpm', 'video/jpm');
  FFileType.AddOrSetValue('jpgm', 'video/jpm');
  FFileType.AddOrSetValue('mj2', 'video/mj2');
  FFileType.AddOrSetValue('mjp2', 'video/mj2');
  FFileType.AddOrSetValue('mp4', 'video/mp4');
  FFileType.AddOrSetValue('mp4v', 'video/mp4');
  FFileType.AddOrSetValue('mpg4', 'video/mp4');
  FFileType.AddOrSetValue('mpeg', 'video/mpeg');
  FFileType.AddOrSetValue('mpg', 'video/mpeg');
  FFileType.AddOrSetValue('mpe', 'video/mpeg');
  FFileType.AddOrSetValue('m1v', 'video/mpeg');
  FFileType.AddOrSetValue('m2v', 'video/mpeg');
  FFileType.AddOrSetValue('ogv', 'video/ogg');
  FFileType.AddOrSetValue('qt', 'video/quicktime');
  FFileType.AddOrSetValue('mov', 'video/quicktime');
  FFileType.AddOrSetValue('uvh', 'video/vnd.dece.hd');
  FFileType.AddOrSetValue('uvvh', 'video/vnd.dece.hd');
  FFileType.AddOrSetValue('uvm', 'video/vnd.dece.mobile');
  FFileType.AddOrSetValue('uvvm', 'video/vnd.dece.mobile');
  FFileType.AddOrSetValue('uvp', 'video/vnd.dece.pd');
  FFileType.AddOrSetValue('uvvp', 'video/vnd.dece.pd');
  FFileType.AddOrSetValue('uvs', 'video/vnd.dece.sd');
  FFileType.AddOrSetValue('uvvs', 'video/vnd.dece.sd');
  FFileType.AddOrSetValue('uvv', 'video/vnd.dece.video');
  FFileType.AddOrSetValue('uvvv', 'video/vnd.dece.video');
  FFileType.AddOrSetValue('dvb', 'video/vnd.dvb.file');
  FFileType.AddOrSetValue('fvt', 'video/vnd.fvt');
  FFileType.AddOrSetValue('mxu', 'video/vnd.mpegurl');
  FFileType.AddOrSetValue('m4u', 'video/vnd.mpegurl');
  FFileType.AddOrSetValue('pyv', 'video/vnd.ms-playready.media.pyv');
  FFileType.AddOrSetValue('uvu', 'video/vnd.uvvu.mp4');
  FFileType.AddOrSetValue('uvvu', 'video/vnd.uvvu.mp4');
  FFileType.AddOrSetValue('viv', 'video/vnd.vivo');
  FFileType.AddOrSetValue('webm', 'video/webm');
  FFileType.AddOrSetValue('f4v', 'video/x-f4v');
  FFileType.AddOrSetValue('fli', 'video/x-fli');
  FFileType.AddOrSetValue('flv', 'video/x-flv');
  FFileType.AddOrSetValue('m4v', 'video/x-m4v');
  FFileType.AddOrSetValue('mkv', 'video/x-matroska');
  FFileType.AddOrSetValue('mk3d', 'video/x-matroska');
  FFileType.AddOrSetValue('mks', 'video/x-matroska');
  FFileType.AddOrSetValue('mng', 'video/x-mng');
  FFileType.AddOrSetValue('asf', 'video/x-ms-asf');
  FFileType.AddOrSetValue('asx', 'video/x-ms-asf');
  FFileType.AddOrSetValue('vob', 'video/x-ms-vob');
  FFileType.AddOrSetValue('wm', 'video/x-ms-wm');
  FFileType.AddOrSetValue('wmv', 'video/x-ms-wmv');
  FFileType.AddOrSetValue('wmx', 'video/x-ms-wmx');
  FFileType.AddOrSetValue('wvx', 'video/x-ms-wvx');
  FFileType.AddOrSetValue('avi', 'video/x-msvideo');
  FFileType.AddOrSetValue('movie', 'video/x-sgi-movie');
  FFileType.AddOrSetValue('smv', 'video/x-smv');
  FFileType.AddOrSetValue('ice', 'x-conference/x-cooltalk');
  {$ENDREGION}
end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Agendamento_Linha171_Métodomuitolongo.pas;Método muito longo;7;"class function TModelAgendamento.EnviarEmail(const AAssunto, ADestino, AAnexo: String; ACorpo: String): Boolean;
var
  IniFile              : TIniFile;
  sFrom                : String;
  sBccList             : String;
  sHost                : String;
  iPort                : Integer;
  sUserName            : String;
  sPassword            : String;

  idMsg                : TIdMessage;
  IdText               : TIdText;
  idSMTP               : TIdSMTP;
  IdSSLIOHandlerSocket : TIdSSLIOHandlerSocketOpenSSL;
begin
  try
    try
      //Criação e leitura do arquivo INI com as configurações
      IniFile                          := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Config.ini');
      sFrom                            := IniFile.ReadString('Email' , 'From'     , sFrom);
      sBccList                         := IniFile.ReadString('Email' , 'BccList'  , sBccList);
      sHost                            := IniFile.ReadString('Email' , 'Host'     , sHost);
      iPort                            := IniFile.ReadInteger('Email', 'Port'     , iPort);
      sUserName                        := IniFile.ReadString('Email' , 'UserName' , sUserName);
      sPassword                        := IniFile.ReadString('Email' , 'Password' , sPassword);

      //Configura os parâmetros necessários para SSL
      IdSSLIOHandlerSocket                   := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
      IdSSLIOHandlerSocket.SSLOptions.Method := sslvSSLv23;
      IdSSLIOHandlerSocket.SSLOptions.Mode   := sslmClient;

      //Variável referente a mensagem
      idMsg                            := TIdMessage.Create;
      idMsg.CharSet                    := 'utf-8';
      idMsg.Encoding                   := meMIME;
      idMsg.From.Name                  := 'Agendamento do Centro de Distribuição Nome do Centro';
      idMsg.From.Address               := sFrom;
      idMsg.Priority                   := mpNormal;
      idMsg.Subject                    := AAssunto;

      //Add Destinatário(s)
      idMsg.Recipients.Add;
      idMsg.Recipients.EMailAddresses := ADestino;
      idMsg.CCList.EMailAddresses     := 'Comercial@conectsolutionsti.COM.BR';
      idMsg.BccList.EMailAddresses    := sBccList;
      //idMsg.BccList.EMailAddresses    := 'conectsolutions@hotmail.COM'; //Cópia Oculta

      //Variável do texto
      idText := TIdText.Create(idMsg.MessageParts);
      idText.Body.Add(ACorpo);
      idText.ContentType := 'text/html; text/plain; charset=iso-8859-1';

      //Prepara o Servidor
      IdSMTP                           := TIdSMTP.Create;
      IdSMTP.IOHandler                 := IdSSLIOHandlerSocket;
      IdSMTP.UseTLS                    := utUseExplicitTLS;//utUseImplicitTLS;
      IdSMTP.AuthType                  := satDefault;
      IdSMTP.Host                      := sHost;
      IdSMTP.Port                      := iPort;
      IdSMTP.Username                  := sUserName;
      IdSMTP.Password                  := sPassword;

      //Conecta e Autentica
      IdSMTP.Authenticate;
      IdSMTP.Connect;


      if AAnexo <> EmptyStr then
        if FileExists(AAnexo) then
          TIdAttachmentFile.Create(idMsg.MessageParts, AAnexo);

      //Se a conexão foi bem sucedida, envia a mensagem
      if IdSMTP.Connected then
      begin
        try
          IdSMTP.Send(idMsg);
        except on E:Exception do
          begin
            ShowMessage('Erro ao tentar enviar: ' + E.Message);
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Agendamento_Linha275_Muitosparâmetros.pas;Muitos parâmetros;7;"class function TModelAgendamento.enviarEmail2(aSubject: string;aPlaca: String;aNF: Integer;aLocais: string;aTelefone: string;aEmail:string; aData: TDateTime; aHora: string; aObs:String): Boolean;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Agendamento_Linha81_Métodomuitolongo.pas;Método muito longo;7;"      procedure SetAllDayEvent(const Value: Boolean);
      procedure SetEmail(const Value: string);
      procedure SetEndTime(const Value: TDateTime);
      procedure SetLabel01(const Value: string);
      procedure SetLocais(const Value: string);
      procedure SetLocation(const Value: string);
      procedure SetMenssagem(const Value: string);
      procedure SetNF(const Value: Integer);
      procedure SetOption(const Value: Integer);
      procedure SetParentID(const Value: Integer);
      procedure SetPlaca(const Value: string);
      procedure SetRecurrenceIndex(const Value: Integer);
      procedure SetRecurrenceInfo(const Value: TBlob);
      procedure SetReminderDate(const Value: TDateTime);
      procedure SetReminderMinutesBeforeStart(const Value: Integer);
      procedure SetRemindResourceData(const Value: TDateTime);
      procedure SetResourceID(const Value: Integer);
      procedure SetStart(const Value: TDateTime);
      procedure SetStarTime(const Value: TDateTime);
      procedure SetState(const Value: Integer);
      procedure Setsubject(const Value: string);
      procedure SetTaskCompleteField(const Value: Integer);
      procedure SetTaskIndexField(const Value: Integer);
      procedure SetTaskLinksField(const Value: TBlob);
      procedure SetTaskStatusField(const Value: Integer);
      procedure SetTelefone(const Value: string);
      procedure SetObs(const Value: string);
      procedure SetHora(const Value: TTime);


    public
      //Campos originais da tabela
      property subject  : string read Fsubject write Setsubject;
      property Menssagem: string read FMenssagem write SetMenssagem;
      property Option: Integer read FOption write SetOption;
      property ParentID: Integer read FParentID write SetParentID;
      property RecurrenceIndex: Integer read FRecurrenceIndex write SetRecurrenceIndex;
      property RecurrenceInfo: TBlob read FRecurrenceInfo write SetRecurrenceInfo;
      property ReminderDate: TDateTime read FReminderDate write SetReminderDate;
      property ReminderMinutesBeforeStart: Integer read FReminderMinutesBeforeStart write SetReminderMinutesBeforeStart;
      property RemindResourceData: TDateTime read FRemindResourceData write SetRemindResourceData;
      property ResourceID: Integer read FResourceID write SetResourceID;
      property Start: TDateTime read FStart write SetStart;
      property State: Integer read FState write SetState;
      property TaskCompleteField: Integer read FTaskCompleteField write SetTaskCompleteField;
      property TaskIndexField: Integer read FTaskIndexField write SetTaskIndexField;
      property TaskLinksField: TBlob read FTaskLinksField write SetTaskLinksField;
      property TaskStatusField: Integer read FTaskStatusField write SetTaskStatusField;
      property Placa: string read FPlaca write SetPlaca;

      property Location : string read FLocation write SetLocation;
      //da tela de agendamento
      property Label01  : string read FLabel01 write SetLabel01;
      property StarTime : TDateTime read FStarTime write SetStarTime;
      property EndTime  : TDateTime read FEndTime write SetEndTime;
      property AllDayEvent : Boolean read FAllDayEvent write SetAllDayEvent;

      //Campo criados
      property Locais: string read FLocais write SetLocais;
      property NF: Integer read FNF write SetNF;
      property Telefone: string read FTelefone write SetTelefone;
      property Email: string read FEmail write SetEmail;
      property Obs: string read FObs write SetObs;
      property Hora: TTime read FHora write SetHora;

      class function enviarEmail2(aSubject: string;aPlaca: String;aNF: Integer;aLocais: string;aTelefone: string;aEmail:string; aData: TDateTime; aHora: string; aObs:String): Boolean;
      class function EnviarEmail(const AAssunto, ADestino, AAnexo: String; ACorpo: String): Boolean;

      procedure EditarEmailEnviado;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Categorias_Linha380_Métodomuitolongo.pas;Método muito longo;7;"class function TModelCategorias.SalvarCategoria(
  aCategoria: TCategorias): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.categoria  ' +
                '(idcategorias,          ' +   //1
                'categoria,              ' +   //2
                'ativo,                  ' +   //3
                'datacadastro,           ' +   //4
                'dataalteracao,          ' +   //5
                'dataexclusao            ' +   //6
                ')                       ' +
                'VALUES (                ' +
                ':idcategorias,          ' +   //1 ok
                ':categoria,             ' +   //2 ok
                ':ativo,                 ' +   //3 ok
                ':datacadastro,          ' +   //4 ok
                ':dataalteracao,         ' +   //5 ok
                ':dataexclusao           ' +   //6 ok
                ')                       ');

     qry.ParamByName('idcategorias').DataType  := ftInteger;            //1

     qry.ParamByName('categoria').DataType     := ftString;
     qry.ParamByName('categoria').AsString     := aCategoria.categoria; //2


     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCategoria.ativo) > 0 then
       Ativo := Copy(aCategoria.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //3

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //4

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //5
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ParamByName('dataexclusao').DataType := ftDateTime;
     qry.ParamByName('dataexclusao').AsDateTime:= aCategoria.dataExclusao; //6

     //CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\CategoriasSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar a categoria: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Categoria - Linha : 460 - Finalizou o Alterar Categoria finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Categorias.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Clientes_Linha580_Métodomuitolongo.pas;Método muito longo;7;"class function TModelCliente.SalvarCliente(aCliente: TClientes): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Clientes ' +
                '(idclientes,          ' +   //1
                'razao,                ' +   //2
                'cnpj_cpf,             ' +   //3
                'endereco,             ' +   //4
                'numero,               ' +   //5
                'complemento,          ' +   //6
                'cep,                  ' +   //7
                'cidade,               ' +   //8
                'bairro,               ' +   //9
                'ativo,                ' +   //10
                'uf,                   ' +   //11
                'datacadastro,         ' +   //12
                'dataalteracao,        ' +   //13
               // 'dataexclusao,       ' +   //14
                'idmodelocarro         ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idclientes,          ' +   //1 ok
                ':razao,               ' +   //2 ok
                ':cnpj_cpf,            ' +   //3 ok
                ':endereco,            ' +   //4 ok
                ':numero,              ' +   //5 ok
                ':complemento,         ' +   //6 ok
                ':cep,                 ' +   //7 ok
                ':cidade,              ' +   //8 ok
                ':bairro,              ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':uf,                  ' +   //11 ok
                ':datacadastro,        ' +   //12 ok
                ':dataalteracao,       ' +   //13 ok
              //  ':dataexclusao,        ' + //14 ok
                ':idmodelocarro        ' +   //15 ok
                ')                     ');

     qry.ParamByName('idclientes').DataType    := ftInteger;            //1

     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aCliente.razaosocial; //2
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aCliente.cnpj ;       //3
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aCliente.endereco;    //4
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aCliente.numero;      //5
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aCliente.complemento; //6
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aCliente.CEP;         //7
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aCliente.Cidade;      //8
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aCliente.Bairro;      //9

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCliente.ativo) > 0 then
       Ativo := Copy(aCliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //10

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aCliente.UF) > 0 then
       UF := Copy(aCliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;                  //11

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //12

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //13
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

//     qry.ParamByName('dataexclusao').DataType := ftDateTime;
//     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //14

     qry.ParamByName('idmodelocarro').DataType := ftInteger;
     qry.ParamByName('idmodelocarro').AsInteger:= aCliente.Idmodelocarro; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ClientesSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o cliente: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Clientes - Linha : 629 - Finalizou o Alterar Cliente finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Clientes.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Contatos_Linha253_Métodomuitolongo.pas;Método muito longo;7;"class function TModelContato.SalvarContato(aContato: TContato; aCliente: TClientes): Boolean;
var
  qry        : TFDQuery;
  Ativo      : string;
  UF         : string;
  LogManager : TLogManager;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.Close;
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO     ' +
                  'idcontatos,     ' +
                  'idcliente,      ' +
                  'telefone,       ' +
                  'celular,        ' +
                  'email,          ' +
                  'datacadastro    ' +
                  'dataalteracao,  ' +
                  'cnpjrevenda,    ' +
                  'ativo,          ' +
                  'nomecontato)    ' +
                  'VALUES(         ' +
                  ':idcontatos,    ' +
                  ':idcliente,     ' +
                  ':telefone,      ' +
                  ':celular,       ' +
                  ':email,         ' +
                  ':datacadastro   ' +
                  ':dataalteracao, ' +
                  ':cnpjrevenda,   ' +
                  ':ativo,         ' +
                  ':nomecontato)   ');

     qry.ParamByName('idcontatos').DataType      := ftInteger;
     qry.ParamByName('idcliente').DataType       := ftInteger;
     qry.ParamByName('idcliente').AsInteger      := aCliente.idcliente;
     qry.ParamByName('telefone').DataType        := ftString;
     qry.ParamByName('telefone').AsString        := aContato.telefone;
     qry.ParamByName('celular').DataType         := ftString;
     qry.ParamByName('celular').AsString         := aContato.celular;
     qry.ParamByName('email').DataType           := ftString;
     qry.ParamByName('email').AsString           := aContato.email;
     qry.ParamByName('datacadastro').DataType    := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime  := Now;
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;
     qry.ParamByName('cnpjrevenda').DataType     := ftString;
     qry.ParamByName('cnpjrevenda').AsString     := aContato.cnpjrevenda;
     qry.ParamByName('ativo').DataType           := ftString;

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aContato.ativo) > 0 then
       Ativo := Copy(aContato.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;

     qry.ParamByName('ativo').AsString           := aContato.ativo;

     qry.ParamByName('nomecontato').DataType     := ftString;
     qry.ParamByName('nomecontato').AsString     := aContato.NomeContato;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
    on E: Exception do
    begin
      Result:= False;
      qry.Connection.Rollback;
      ShowMessage('Houve um erro ao gravar os dados do contato' + E.Message);
      qry.Close;
      qry.Free;

      if True then

      LogManager := TLogManager.Create;
      try
        LogManager.SaveLogToFile('Log_Model_Contatos.txt');
        LogManager.AddLog('Saiu na Model.Contatos - SalvarContato: Linha 320: e deu erro ao gravar o contato.');
      finally
        LogManager.Free;
      end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Fabricantes_Linha306_Métodomuitolongo.pas;Método muito longo;7;"class function TModelFabricante.SalvarFabricante(
  aFabricante: TFabricante): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '     +
                ' fabricantes '    +
                '(idfabricantes, ' +
                'razao, '          +
                'cnpj, '           +
                'endereco, '       +
                'numero, '         +
                'complemento, '    +
                'cep, '            +
                'cidade, '         +
                'bairro, '         +
                'ativo, '          +
                'datacadastro, '   +
                'dataalteracao, '  +
//                'dataexclusao, '   +
                'uf) '             +
                'VALUES ('         +
                ':idclientes, '    +
                ':razao, '         +
                ':cnpj_cpf, '      +
                ':endereco, '      +
                ':numero,  '       +
                ':complemento, '   +
                ':cep, '           +
                ':cidade, '        +
                ':bairro, '        +
                ':ativo, '         +
                ':datacadastro, '  +
                ':dataalteracao, ' +
//                ':dataexclusao, '  +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aFabricante.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aFabricante.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aFabricante.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aFabricante.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aFabricante.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aFabricante.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aFabricante.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aFabricante.Bairro;

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aFabricante.UF) > 0 then
       UF := Copy(aFabricante.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aFabricante.ativo) > 0 then
       Ativo := Copy(aFabricante.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;

     qry.ParamByName('datacadastro').DataType:= ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;

     qry.ParamByName('dataalteracao').DataType:= ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar salvar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Fabricantes_Linha64_Métodomuitolongo.pas;Método muito longo;7;"class function TModelFabricante.AlterarFabricante(
  aFabricante: TFabricante): Boolean;
var
   qry: TFDQuery;
   UF: String;
   Ativo: String;
begin
  Result:=False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE FABRICANTES              ' +
                  'SET                             ' +
                  'idfabricantes = :idfabricantes, ' +
                  'razao         = :razao,         ' +
                  'cnpj          = :cnpj,          ' +
                  'endereco      = :endereco,      ' +
                  'numero        = :numero,        ' +
                  'complemento   = :complemento,   ' +
                  'cep           = :cep,           ' +
                  'cidade        = :cidade,        ' +
                  'bairro        = :bairro,        ' +
                  'ativo         = :ativo,         ' +
                  'uf            = :uf,            ' +
                  'datacadastro  = now,            ' +
                  'datalateracao = now,            ' +
                  'WHERE                           ' +
                  'CNPJ          = :CNPJ           ';

    qry.ParamByName('idfabricantes').DataType   := ftInteger;
    qry.ParamByName('idfabricantes').AsInteger  := aFabricante.idFabricantes;
    qry.ParamByName('razao').DataType           := ftString;
    qry.ParamByName('razao').AsString           := aFabricante.razaosocial;
    qry.ParamByName('cnpj').DataType            := ftString;
    qry.ParamByName('cnpj').AsString            := aFabricante.cnpj ;
    qry.ParamByName('endereco').DataType        := ftString;
    qry.ParamByName('endereco').AsString        := aFabricante.endereco;
    qry.ParamByName('numero').DataType          := ftInteger;
    qry.ParamByName('numero').AsInteger         := aFabricante.numero;
    qry.ParamByName('complemento').DataType     := ftString;
    qry.ParamByName('complemento').AsString     := aFabricante.complemento;
    qry.ParamByName('cep').DataType             := ftString;
    qry.ParamByName('cep').AsString             := aFabricante.CEP;
    qry.ParamByName('cidade').DataType          := ftString;
    qry.ParamByName('cidade').AsString          := aFabricante.Cidade;
    qry.ParamByName('bairro').DataType          := ftString;
    qry.ParamByName('bairro').AsString          := aFabricante.Bairro;

    qry.ParamByName('uf').DataType              := ftString;

    if Length(aFabricante.UF) > 0 then
      UF := Copy(aFabricante.UF, 1, 2)
    else
      UF := '';

    qry.ParamByName('uf').AsString              := UF;

    qry.ParamByName('ativo').DataType           := ftString;
    if Length(aFabricante.ativo) > 0 then
      Ativo := Copy(aFabricante.ativo, 1, 1)
    else
      Ativo := '';

    qry.ParamByName('ativo').AsString           := Ativo;

    qry.ParamByName('dataalteracao').DataType   := ftDatetime;
    qry.ParamByName('dataalteracao').AsDateTime := aFabricante.DataAlteracao;

    qry.ParamByName('CNPJ').DataType            := ftString;
    qry.ParamByName('CNPJ').AsString            := aFabricante.cnpj;

    qry.ExecSQL;
    qry.connection.Commit;

    Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar atualizar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Produtos_Linha630_Métodomuitolongo.pas;Método muito longo;7;"class function TModelProduto.SalvarProduto(aProduto: TProduto): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Produtos ' +
                '(idprodutos,          ' +   //1
                'produto,              ' +   //2
                'foto,                 ' +   //3
                'preco,                ' +   //4
                'aro,                  ' +   //5
                'idFabricante,         ' +   //6
                'datainclusao,         ' +   //7
                'dataalteracao,        ' +   //8
                'dataexclusao,         ' +   //9
                'ativo,                ' +   //10
                'lancamento,           ' +   //11
                'furacao,              ' +   //12
                'offset_et,            ' +   //13
                'idlinha,              ' +   //14
                'idacabamento          ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idprodutos,          ' +   //1 ok
                ':produto,             ' +   //2 ok
                ':foto,                ' +   //3 ok
                ':preco,               ' +   //4 ok
                ':aro,                 ' +   //5 ok
                ':idFabricante,        ' +   //6 ok
                ':datainclusao,        ' +   //7 ok
                ':dataalteracao,       ' +   //8 ok
                ':dataexclusao,        ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':lancamento,          ' +   //11 ok
                ':furacao,             ' +   //12 ok
                ':offset_et,           ' +   //13 ok
                ':idlinha,             ' +   //14 ok
                ':idacabamento         ' +   //15 ok
                ')                     ');

     qry.ParamByName('idprodutos').DataType    := ftInteger;               //1

     qry.ParamByName('produto').DataType         := ftString;
     qry.ParamByName('produto').AsString         := aProduto.produto;      //2
     qry.ParamByName('foto').DataType            := ftStream;
     qry.ParamByName('foto').AsStream            := aProduto.foto;         //3 - Verificar
     qry.ParamByName('preco').DataType           := ftCurrency;
     qry.ParamByName('preco').AsCurrency         := aProduto.preco;        //4
     qry.ParamByName('aro').DataType             := ftInteger;
     qry.ParamByName('aro').AsInteger            := aProduto.aro;          //5
     qry.ParamByName('idfabricante').DataType    := ftInteger;
     qry.ParamByName('idfabricante').AsInteger   := aProduto.idfabricante; //6
     qry.ParamByName('datainclusao').DataType    := ftDateTime;
     qry.ParamByName('datainclusao').AsDateTime  := Now;                   //7
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;                   //8
     //qry.ParamByName('dataexclusao').DataType    := ftDateTime;
     //qry.ParamByName('dataexclusao').AsDateTime  := Now;                 //9

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aProduto.ativo) > 0 then
       Ativo := Copy(aProduto.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;                 //10

     qry.ParamByName('lancamento').DataType      := ftString;
     qry.ParamByName('lancamento').AsString      := aProduto.lancamento;   //11
     qry.ParamByName('furacao').DataType         := ftInteger;
     qry.ParamByName('furacao').AsInteger        := aProduto.furacao;      //12
     qry.ParamByName('offset_et').DataType       := ftInteger;
     qry.ParamByName('offset_et').AsInteger      := aProduto.OffsetEt;     //13
     qry.ParamByName('idlinha').DataType         := ftInteger;
     qry.ParamByName('idlinha').AsInteger        := aProduto.idlinha;      //14
     qry.ParamByName('idacabamento').DataType    := ftInteger;
     qry.ParamByName('idacabamento').AsInteger   := aProduto.idacabamento; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ProdutosSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o produto: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Produtos - Linha : 271 - Finalizou o salvar produto finalizou qry às ' + DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Produtos.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha273_Métodomuitolongo.pas;Uso de with;38;"with qry do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha273_Métodomuitolongo.pas;Método muito longo;7;"function TModelRegistro.GerarSerial: string;
var
  x:string;
  Y:string;
  z:string;
  data : TDateTime;
  qry, qry2: TFDQuery;
  Registrarfrm: TFrmRegistrar;
begin
  Result:= '';
  FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  FWMIService   := FSWbemLocator.ConnectServer('localhost', 'root\CIMV2', '', '');
  X:=Trim(GetWMIstring('Win32_BIOS','SerialNumber')); //Serial da Bios
  Y:=Trim(GetWMIstring('Win32_PhysicalMedia','SerialNumber')); //Serial do HD

  //label6.Caption:= x;
  //label4.Caption:= y;
  z:=x+y+(DateToStr(date));
  //label5.Caption:=z;
  Result:= z;

  qry:= TFDquery.Create(nil);
  qry.Connection  := TConexaoLicencas.CreateConnection;
  try
    qry.SQL.Clear;
    qry.SQL.Add('select * from registro');
    qry.SQL.Add('');

    qry.ExecSQL;
    qry.Connection.Commit;

    with qry do

     //FDQuery1.Edit;
     //Desabilitar botao Geral Serial
     //Edit1.Enabled:=False;
     //BtnRegistrar.Enabled:=False;
     //Button1.Enabled:=False;
     //PageControl1.Pages[1].TabVisible := False;
     // fim


     qry.FieldByName('chave').AsString      := z;
     qry.FieldByName('Data_inc').AsDateTime := Date;
     Data := date;
     qry.FieldByName('Data_exp').AsDateTime:=Data;
     //ShowMessage(DateToStr(Data+30));
     qry.FieldByName('serialhd').AsString:=y;

     qry.FieldByName('ID_Chave').AsInteger := qry2.FieldByName('ID_Chave').AsInteger;

     qry.FieldByName('contrasenha').AsString:='0';
     qry.FieldByName('ativado').AsString:='N';
     qry.Post;

  finally
     qry.Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha304_Usodewith.pas;Uso de with;7;"with qry do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha354_Métodomuitolongo.pas;Método muito longo;7;"class function TModelRegistro.GravarContraSenha(
  aRegistro: TModelRegistro): Boolean;
var
  qry: TFDQuery;
begin
  Result := False;
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  //Checar se a CONTRASENHA Existe se não avisar ao usuário que a Contra Senha está errada e encerrar o programa?
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('select contrasenha from registro');
    qry.SQL.Add(' where contrasenha = :contrasenha');
    qry.ParamByName('contrasenha').DataType := ftString;
    qry.ParamByName('contrasenha').AsString := aRegistro.ContraSenha;
    qry.Open;

    if qry.RecordCount > 0 then //Encontrou a ContraSenha faz o update
    begin
      qry.Connection.StartTransaction;
      try
        qry.close;
        qry.SQL.Clear;

        qry.SQL.Text:='UPDATE LICENCAS.REGISTRO      ' +
                      'SET                           ' +
                     // 'ID           = :id,           ' +
                     // 'ID_CHAVE     = :ID_CHAVE,     ' +
                     // 'CHAVE        = :CHAVE,        ' +
                      'DATA_INC     = :DATA_INC,     ' +
                      'DATA_EXP     = :DATA_EXP,     ' +
                      'CONTRASENHA  = :CONTRASENHA,  ' +
                      'ATIVADO      = :ATIVADO,      ' +
                    //  'SERIALHD     = :SERIALHD      ' +
                      'WHERE                         ' +
                      'CONTRASENHA     = :CONTRASENHA      ';


        qry.ParamByName('DATA_INC').DataType     := ftDate;
        qry.ParamByName('DATA_INC').AsDateTime   := Now;
        qry.ParamByName('DATA_EXP').DataType     := ftDate;
        qry.ParamByName('DATA_EXP').AsDate       := aRegistro.Data_exp + 30;
        qry.ParamByName('CONTRASENHA').DataType  := ftString;
        qry.ParamByName('CONTRASENHA').AsString  := aRegistro.ContraSenha;
        qry.ParamByName('ATIVADO').DataType      := ftString;
        qry.ParamByName('ATIVADO').AsString      := aRegistro.ativo;

        qry.ExecSQL;
        qry.Connection.Commit;

        Result := True;
      Except
      On E: Exception do
        begin
           Showmessage('Erro ao gravar tabela registro!'+ E.Message);
           qry.Connection.Rollback;
           Result := False;
        end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha426_Métodomuitolongo.pas;Método muito longo;7;"class function TModelRegistro.GravarNoBancoLicencas(
  aRegistro: TModelRegistro): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
  idChave : integer;
begin
  //Testar se a Licença já existe no banco de dados  buscar pelo cnpj  trazer o id e pesquisar na tabela registro
  //Se já existir o cnpj na tabela chaves e estiver aguardando a gravação da contrasenha na tabela registro o que fazer?
  // Informar o usuário que está aguardando a contrasenha e pular fora?
  qry:= TFDquery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('Select * from chaves');
    qry.SQL.Add(' where cnpj =:cnpj');
    qry.ParamByName('cnpj').DataType := ftString;
    qry.ParamByName('cnpj').AsString := aRegistro.cnpj;
    qry.Open;

    if qry.RecordCount > 0 then //O registro dos dados do cliente existe na tabela chaves
    begin
      ShowMessage('Registro encontrado');
      idChave:= qry.FieldByName('id_chave').AsInteger;

      qry.Close;
      qry.SQL.Clear;
      qry.SQL.Add('Select contrasenha from registro');
      qry.SQL.Add(' where id_chave=:id_chave');
      qry.ParamByName('id_chave').DataType  := ftInteger;
      qry.ParamByName('id_chave').AsInteger := idChave;
      qry.Open;

      if (qry.RecordCount > 0) and (qry.fieldbyname('contrasenha').AsString='') then
      begin
          //Gravar no Banco primeiro registro
          qry:= TFDquery.Create(nil);
          qry.Connection := TConexaoLicencas.CreateConnection;
          qry.Connection.StartTransaction;
          try
            qry.Close;
            qry.SQL.Clear;
            qry.SQL.Add('INSERT INTO      ' +
                        ' licencas.chaves ' +
                        '(id_chave,       ' + //1
                        'razao,           ' + //2
                        'cnpj,            ' + //3
                        'ie,              ' + //4
                        'im,              ' + //5
                        'endereco,        ' + //6
                        'numero,          ' + //7
                        'complemento,     ' + //8
                        'bairro,          ' + //9
                        'cidade,          ' + //10
                        'cep,             ' + //11
                        'uf,              ' + //12
                        'ativo,           ' + //13
                        'contato,         ' + //14
                        'telcontato,      ' + //15
                        'email,           ' + //16
                        'datacadastro,    ' + //17
                        'dataalteracao    ' + //18
                       // 'dataexclusao   ' + //19
                        ')                ' +
                        'VALUES (         ' +
                        ':id_chave,       ' + //1 ok
                        ':razao,          ' + //2 ok
                        ':cnpj,           ' + //3 ok
                        ':ie,             ' + //4 ok
                        ':im,             ' + //5 ok
                        ':endereco,       ' + //6 ok
                        ':numero,         ' + //7 ok
                        ':complemento,    ' + //8 ok
                        ':bairro,         ' + //9 ok
                        ':cidade,         ' + //10 ok
                        ':cep,            ' + //11 ok
                        ':uf,             ' + //12 ok
                        ':ativo,          ' + //13 ok
                        ':contato,        ' + //14
                        ':telcontato,     ' + //15
                        ':email,          ' + //16
                        ':datacadastro,   ' + //17 ok
                        ':dataalteracao   ' + //18 ok
                      //  ':dataexclusao, ' + //19 ok
                        ')                ');

             qry.ParamByName('id_chave').DataType    := ftInteger;             //1
             qry.ParamByName('razao').DataType       := ftString;
             qry.ParamByName('razao').AsString       := aRegistro.razao;       //2
             qry.ParamByName('cnpj').DataType        := ftString;
             qry.ParamByName('cnpj').AsString        := aRegistro.cnpj ;       //3
             qry.ParamByName('ie').DataType          := ftString;
             qry.ParamByName('ie').AsString          := aRegistro.ie;          //4
             qry.ParamByName('im').DataType          := ftString;
             qry.ParamByName('im').AsString          := aRegistro.im;          //5
             qry.ParamByName('endereco').DataType    := ftString;
             qry.ParamByName('endereco').AsString    := aRegistro.endereco;    //6
             qry.ParamByName('numero').DataType      := ftInteger;
             qry.ParamByName('numero').AsInteger     := aRegistro.numero;      //7
             qry.ParamByName('complemento').DataType := ftString;
             qry.ParamByName('complemento').AsString := aRegistro.complemento; //8
             qry.ParamByName('cep').DataType         := ftString;
             qry.ParamByName('cep').AsString         := aRegistro.CEP;         //9
             qry.ParamByName('cidade').DataType      := ftString;
             qry.ParamByName('cidade').AsString      := aRegistro.Cidade;      //10
             qry.ParamByName('bairro').DataType      := ftString;
             qry.ParamByName('bairro').AsString      := aRegistro.Bairro;      //11
             qry.ParamByName('uf').DataType          := ftString;
             if Length(aRegistro.UF) > 0 then
               UF := Copy(aRegistro.UF, 1, 2)
             else
               UF := '';

             qry.ParamByName('uf').AsString          := UF;                    //12

             qry.ParamByName('ativo').DataType       := ftString;
             if Length(aRegistro.ativo) > 0 then
               Ativo := Copy(aRegistro.ativo, 1, 1)
             else
               Ativo := '';

             qry.ParamByName('ativo').AsString       := Ativo;                 //13

             qry.ParamByName('contato').DataType     := ftString;
             qry.ParamByName('contato').AsString     := aRegistro.contato;     //14

             qry.ParamByName('telcontato').DataType     := ftString;
             qry.ParamByName('telcontato').AsString     := aRegistro.telcontato; //15

             qry.ParamByName('email').DataType     := ftString;
             qry.ParamByName('email').AsString     := aRegistro.email;           //16

             qry.ParamByName('datacadastro').DataType  := ftDateTime;
             qry.ParamByName('datacadastro').AsDateTime:= Now;                 //17

             qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //18
             qry.ParamByName('dataalteracao').AsDateTime:= Now;

        //     qry.ParamByName('dataexclusao').DataType := ftDateTime;
        //     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //19

             qry.ExecSQL;
             qry.Connection.Commit;

             Result := True;
          Except
           On E: Exception do
              begin
                if aRegistro.Linguagem='Portugues' then
                  ShowMessage('Erro ao tentar gravar licença!' + E.Message)
                else
                  ShowMessage('Error trying to write license!!' + E.Message);

                qry.Connection.Rollback;
                qry.Free;
              end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha610_Métodomuitolongo.pas;Método muito longo;7;"class function TModelRegistro.GravarRegistro(
  aRegistro: TModelRegistro; achave: String): Boolean;
var
  qry: TFDQuery;
  data: TDateTime;
begin
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO REGISTRO      ' +
                 '(id,                      ' +
                 'id_chave,                 ' +
                 'chave,                    ' +
                 'data_inc,                 ' +
                 'data_exp,                 ' +
                 'contrasenha,              ' +
                 'ativado,                  ' +
                 'serialhd                  ' +
               //  'WHERE id_chave =:id_chave ' +
                 ')                         ' +
                 'VALUES (                  ' +
                 ':id,                      ' +
                 ':id_chave,                ' +
                 ':chave,                   ' +
                 ':data_inc,                ' +
                 ':data_exp,                ' +
                 ':contrasenha,             ' +
                 ':ativado,                 ' +
                 ':serialhd                 ' +
                 ')                         ');

     qry.ParamByName('chave').DataType     := ftString;
     qry.ParamByName('chave').AsString      := aChave;

     qry.ParamByName('Data_inc').DataType   := ftDateTime;
     qry.ParamByName('Data_inc').AsDateTime := Date;

     Data := Date;

     qry.ParamByName('Data_exp').DataType    := ftDateTime;
     qry.ParamByName('Data_exp').AsDateTime  :=Data;

     //ShowMessage(DateToStr(Data+30));
     qry.ParamByName('serialhd').DataType    := ftDateTime;
     qry.ParamByName('serialhd').AsString    :=aRegistro.serialhd;

     qry.ParamByName('contrasenha').AsString :='0';
     qry.ParamByName('ativado').AsString     :='N';

     //Ver como fazer?
     //qry.ParamByName('id_chave').AsInteger := //qry2.FieldByName('ID_Chave').AsInteger;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
  On E: Exception do
    begin
       Showmessage('Erro ao gravar tabela registro!'+ E.Message);
       qry.Connection.Rollback;
       Result := False;
    end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha70_Métodomuitolongo.pas;Método muito longo;7;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);
      procedure Setdataregistro(const Value: TDatetime);
      procedure SetCEP(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setcontato(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Setserial(const Value: string);
      function  GetWMIstring(const WMIClass, WMIProperty:string): string;
      procedure SetOnLabel6TextChanged(const Value: TNotifyEvent);
      procedure Setserialhd(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
    procedure Setid_chave(const Value: string);
    public
      property razao       : string    read Frazao write Setrazao;
      property cnpj        : string    read Fcnpj write Setcnpj;
      property ie          : string    read Fie write Setie;
      property im          : string    read Fim write Setim;
      property endereco    : string    read Fendereco write Setendereco;
      property numero      : integer   read Fnumero write Setnumero;
      property complemento : string    read Fcomplemento write Setcomplemento;
      property bairro      : string    read Fbairro write Setbairro;
      property cidade      : string    read Fcidade write Setcidade;
      property uf          : string    read Fuf write Setuf;
      property CEP         : string    read FCEP write SetCEP;
      property ativo       : string    read Fativo write Setativo;
      property responsavel : string    read Fresponsavel write Setresponsavel;
      property contato     : string    read Fcontato write Setcontato;
      property telcontato  : string    read Ftelcontato write Settelcontato;
      property telefone    : string    read Ftelefone write Settelefone;
      property email       : string    read Femail write Setemail;
      property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
      property Linguagem   : string    read FLinguagem write SetLinguagem;
      property serial      : string    read Fserial write Setserial;  //transferir do projeto antigo para esse
      property serialhd    : string    read Fserialhd write Setserialhd;
      property ContraSenha : String    read FContraSenha write SetContraSenha;
      property Data_exp    : TDateTime read FData_exp write SetData_exp;
      property id_chave    : string    read Fid_chave write Setid_chave;

      //Verificar se será necessário criar mais propertys para a tabela Registro
      property OnLabel6TextChanged: TNotifyEvent read FOnLabel6TextChanged write SetOnLabel6TextChanged;
      procedure enviarEmail; //Já chama  aqui a gravação no banco de  licenças
      function GerarSerial: string;
      class function validarDados(aRegistro: TModelRegistro ; aLingua: string) : boolean;
      class function GravarNoBancoLicencas(aRegistro : TModelRegistro): Boolean;  //Tabela Chaves
      class function ValidarLicenca(adata: TDateTime; acnpj: string): Boolean;
      class function GravarRegistro(aRegistro: TModelRegistro; achave: String): Boolean;
      class function GravarContraSenha(aRegistro: TModelRegistro): Boolean;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Model.Registro_Linha739_Métodomuitolongo.pas;Método muito longo;7;"class function TModelRegistro.GravarRegistro(
  aRegistro: TModelRegistro; achave: String): Boolean;
var
  qry: TFDQuery;
  data: TDateTime;
begin
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO REGISTRO      ' +
                 '(id,                      ' +
                 'id_chave,                 ' +
                 'chave,                    ' +
                 'data_inc,                 ' +
                 'data_exp,                 ' +
                 'contrasenha,              ' +
                 'ativado,                  ' +
                 'serialhd                  ' +
               //  'WHERE id_chave =:id_chave ' +
                 ')                         ' +
                 'VALUES (                  ' +
                 ':id,                      ' +
                 ':id_chave,                ' +
                 ':chave,                   ' +
                 ':data_inc,                ' +
                 ':data_exp,                ' +
                 ':contrasenha,             ' +
                 ':ativado,                 ' +
                 ':serialhd                 ' +
                 ')                         ');

     qry.ParamByName('id').DataType :=ftinteger;
     qry.ParamByName('id_chave').DataType:= ftInteger;

     qry.ParamByName('chave').DataType     := ftString;
     qry.ParamByName('chave').AsString      := aChave;

     qry.ParamByName('Data_inc').DataType   := ftDateTime;
     qry.ParamByName('Data_inc').AsDateTime := Date;

     Data := Date;

     qry.ParamByName('Data_exp').DataType    := ftDateTime;
     qry.ParamByName('Data_exp').AsDateTime  :=Data;

     //ShowMessage(DateToStr(Data+30));
     qry.ParamByName('serialhd').DataType    := ftDateTime;
     qry.ParamByName('serialhd').AsString    :=aRegistro.serialhd;

     qry.ParamByName('contrasenha').AsString :='0';
     qry.ParamByName('ativado').AsString     :='N';

     //Ver como fazer?
     //qry.ParamByName('id_chave').AsInteger := //qry2.FieldByName('ID_Chave').AsInteger;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
  On E: Exception do
    begin
       Showmessage('Erro ao gravar tabela registro!'+ E.Message);
       qry.Connection.Rollback;
       Result := False;
    end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.Client_Linha206_Usodewith.pas;Uso de with;7;"with FRESTRequest.Params.AddItem do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.Client_Linha23_Métodomuitolongo.pas;Método muito longo;7;"    procedure ExecuteRequest;
    procedure DoJoinComponents;
    function PrepareUrlSegments(const AValue: string): string;
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Timeout: Integer; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function ClearBody: IRequest;
    function AddParam(const AName, AValue: string; const AKind: TRESTRequestParameterKind = {$IF COMPILERVERSION < 33}TRESTRequestParameterKind.pkGETorPOST{$ELSE}TRESTRequestParameterKind.pkQUERY{$ENDIF}; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddBody(const AContent: string; const AContentType: TRESTContentType = ctAPPLICATION_JSON): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function FallbackCharsetEncoding(const AFallbackCharsetEncoding: string): IRequest;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
  protected
    procedure DoAfterExecute(Sender: TCustomRESTRequest); virtual;
    procedure DoBeforeExecute(Sender: TCustomRESTRequest); virtual;
    procedure DoHTTPProtocolError(Sender: TCustomRESTRequest); virtual;
  public
    constructor Create; virtual;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.Contract_Linha29_Métodomuitolongo.pas;Método muito longo;7;"  TRR4DCallbackOnBeforeExecute = procedure(const Req: IRequest);
  TRR4DCallbackOnAfterExecute = procedure(const Req: IRequest; const Res: IResponse);
{$ELSE}
  TRR4DCallbackOnBeforeExecute = reference to procedure(const Req: IRequest);
  TRR4DCallbackOnAfterExecute = reference to procedure(const Req: IRequest; const Res: IResponse);
{$ENDIF}

  IRequest = interface
    ['{2C882459-F4C3-4854-8F7A-F68E8F8DE98E}']
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
	{$IF DEFINED(RR4D_SYNAPSE)}
    function MimeType: string; overload;
    function MimeType(const AMimeType: string): IRequest; overload;
	{$ENDIF}
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    {$IF DEFINED(RR4D_NETHTTP)}
    function Asynchronous(const AValue: Boolean): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function ConnectionTimeout(const AConnectiomTimeout: Integer): IRequest;
    {$ENDIF}
    {$IF DEFINED(RR4D_INDY) or DEFINED(FPC) or DEFINED(RR4D_SYNAPSE) or DEFINED(RR4D_NETHTTP) or DEFINED(RR4D_ICS)}
    function AddParam(const AName, AValue: string): IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddHeader(const AName, AValue: string): IRequest;
    {$ELSE}
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function AddHeader(const AName, AValue: string; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddParam(const AName, AValue: string; const AKind: TRESTRequestParameterKind = {$IF COMPILERVERSION < 33}TRESTRequestParameterKind.pkGETorPOST{$ELSE}TRESTRequestParameterKind.pkQUERY{$ENDIF}; const AOptions: TRESTRequestParameterOptions = []): IRequest;
    function AddBody(const AContent: string; const AContentType: TRESTContentType = ctAPPLICATION_JSON): IRequest; overload;
    function FallbackCharsetEncoding(const AFallbackCharsetEncoding: string): IRequest;
    {$ENDIF}
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function ClearParams: IRequest;
    function UserAgent(const AName: string): IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    {$IF DEFINED(RR4D_INDY) or DEFINED(FPC) or DEFINED(RR4D_SYNAPSE) or DEFINED(RR4D_NETHTTP)}
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    {$ELSEIF DEFINED(RR4D_ICS)}
    function AddFile(const AFileName: string; UploadStrat:THttpUploadStrat): IRequest; overload;
    {$ELSE}
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: TRESTContentType = TRESTContentType.ctNone): IRequest; overload;
    {$ENDIF}
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    {$IF DEFINED(RR4D_INDY) or DEFINED(RR4D_ICS) or DEFINED(RR4D_SYNAPSE)}
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    {$ENDIF}
    {$IF DEFINED(RR4D_INDY)}
    function HTTPOptions(const AHTTPOptions: TIdHTTPOptions): IRequest;
    {$ENDIF}
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.FPHTTPClient_Linha43_Métodomuitolongo.pas;Método muito longo;7;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: Tstrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IResponse); virtual;
    procedure DoBeforeExecute(const Sender: TFPHTTPClient); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.ICS_Linha23_Métodomuitolongo.pas;Método muito longo;7;"    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddHeader(const AName, AValue: string): IRequest;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function ClearParams: IRequest;
    function UserAgent(const AName: string): IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddFile(const AFileName: string; UploadStrat: THttpUploadStrat): IRequest; overload;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    function MakeURL(const AIncludeParams: Boolean = True): string;
  protected
    procedure DoBeforeExecute; virtual;
    procedure DoAfterExecute; virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.Indy_Linha36_Métodomuitolongo.pas;Método muito longo;7;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
    function HTTPOptions(const AHTTPOptions: TIdHTTPOptions): IRequest;
    procedure OnStatusInfoEx(ASender: TObject; const AsslSocket: PSSL; const AWhere, Aret: TIdC_INT; const AType, AMsg: string);
  protected
    procedure DoBeforeExecute; virtual;
    procedure DoAfterExecute; virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.NetHTTP_Linha27_Métodomuitolongo.pas;Método muito longo;7;"    function ExecuteRequest(const AMethod: TMethodRequest): IHTTPResponse;
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function ConnectionTimeout(const AConnectiomTimeout: Integer): IRequest;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: TStrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function Asynchronous(const AValue: Boolean): IRequest;
    function SynchronizedEvents(const AValue: Boolean): IRequest;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    procedure NetHTTPClientValidateServerCertificate(const Sender: TObject; const ARequest: TURLRequest; const Certificate: TCertificate; var Accepted: Boolean);    
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IHTTPResponse); virtual;
    procedure DoBeforeExecute(const Sender: TNetHTTPClient); virtual;
    procedure DoHTTPProtocolError(const Sender: TObject; const AError: string); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\RESTRequest4D.Request.Synapse_Linha47_Métodomuitolongo.pas;Método muito longo;7;"    procedure ExecuteRequest(const AMethod: TMethodRequest);
    function AcceptEncoding: string; overload;
    function AcceptEncoding(const AAcceptEncoding: string): IRequest; overload;
    function AcceptCharset: string; overload;
    function AcceptCharset(const AAcceptCharset: string): IRequest; overload;
    function Adapters(const AAdapter: IRequestAdapter): IRequest; overload;
    function Adapters(const AAdapters: TArray<IRequestAdapter>): IRequest; overload;
    function Adapters: TArray<IRequestAdapter>; overload;
    function Accept: string; overload;
    function Accept(const AAccept: string): IRequest; overload;
    function MimeType: string; overload;
    function MimeType(const AMimeType: string): IRequest; overload;
    function Timeout: Integer; overload;
    function Timeout(const ATimeout: Integer): IRequest; overload;
    function BaseURL(const ABaseURL: string): IRequest; overload;
    function BaseURL: string; overload;
    function Resource(const AResource: string): IRequest; overload;
    function RaiseExceptionOn500: Boolean; overload;
    function RaiseExceptionOn500(const ARaiseException: Boolean): IRequest; overload;
    function Resource: string; overload;
    function ResourceSuffix(const AResourceSuffix: string): IRequest; overload;
    function ResourceSuffix: string; overload;
    function Token(const AToken: string): IRequest;
    function TokenBearer(const AToken: string): IRequest;
    function BasicAuthentication(const AUsername, APassword: string): IRequest;
    function Retry(const ARetries: Integer): IRequest;
    function OnBeforeExecute(const AOnBeforeExecute: TRR4DCallbackOnBeforeExecute): IRequest;
    function OnAfterExecute(const AOnAfterExecute: TRR4DCallbackOnAfterExecute): IRequest;
    function Get: IResponse;
    function Post: IResponse;
    function Put: IResponse;
    function Delete: IResponse;
    function Patch: IResponse;
    function FullRequestURL(const AIncludeParams: Boolean = True): string;
    function ClearBody: IRequest;
    function AddBody(const AContent: string): IRequest; overload;
    function AddBody(const AContent: TJSONObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TJSONArray; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TObject; const AOwns: Boolean = True): IRequest; overload;
    function AddBody(const AContent: TStream; const AOwns: Boolean = True): IRequest; overload;
    function AddUrlSegment(const AName, AValue: string): IRequest;
    function ClearHeaders: IRequest;
    function AddHeader(const AName, AValue: string): IRequest;
    function ClearParams: IRequest;
    function ContentType(const AContentType: string): IRequest; overload;
    function ContentType: string; overload;
    function UserAgent(const AName: string): IRequest;
    function AddCookies(const ACookies: Tstrings): IRequest;
    function AddCookie(const ACookieName, ACookieValue: string): IRequest;
    function AddParam(const AName, AValue: string): IRequest;
    function AddField(const AFieldName: string; const AValue: string): IRequest; overload;
    function AddFile(const AFieldName: string; const AFileName: string; const AContentType: string = ''): IRequest; overload;
    function AddFile(const AFieldName: string; const AValue: TStream; const AFileName: string = ''; const AContentType: string = ''): IRequest; overload;
    function MakeURL(const AIncludeParams: Boolean = True): string;
    function Proxy(const AServer, APassword, AUsername: string; const APort: Integer): IRequest;
    function DeactivateProxy: IRequest;
    function CertFile(const APath: string): IRequest;
    function KeyFile(const APath: string): IRequest;
  protected
    procedure DoAfterExecute(const Sender: TObject; const AResponse: IResponse); virtual;
    procedure DoBeforeExecute(const Sender: THTTPSend); virtual;
  public
    constructor Create;
    class function New: IRequest;
    destructor Destroy; override;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Tests.Horse.Core.Param_Linha25_Métodomuitolongo.pas;Método muito longo;7;"    function RequiredMessage(const AKey: String): string;
    function ConvertErrorMessage(const AKey, AValue, AType: String): string;

  public
    [Setup]
    procedure Setup;

    [TearDown]
    procedure TearDown;

    [Test]
    procedure ContainsKey;

    [Test]
    procedure NotContainsKey;

    [Test]
    procedure ContainsKeyDiferentCase;

    [Test]
    procedure ContainsValue;

    [Test]
    procedure NotContainsValue;

    [Test]
    procedure ToArray;

    [Test]
    procedure TryGetValueTrue;

    [Test]
    procedure TryGetValueFalse;

    [Test]
    procedure TryGetValueDiferentCase;

    [Test]
    procedure Content;

    [Test]
    procedure Count;

    [Test]
    procedure List;

    [Test]
    procedure Index;

    [Test]
    procedure IndexNotFound;

    [Test]
    procedure IndexDiferentCase;

    [Test]
    procedure AsBoolean;

    [Test]
    [TestCase('TrueValue1', 'True,true,true')]
    [TestCase('TrueValue2', '1,1,true')]
    [TestCase('FalseValue1', 'False,true,false')]
    [TestCase('FalseValue2', '5,1,false')]
    procedure AsBooleanParam(AParamValue, ATrueValue: string; AResult: Boolean);

    [Test]
    procedure AsBooleanNotRequired;

    [Test]
    procedure AsBooleanRequired;

    [Test]
    procedure AsCurrency;

    [Test]
    procedure AsCurrencyDecimalSeparator;

    [Test]
    procedure AsCurrencyNotRequired;

    [Test]
    procedure AsCurrencyRequired;

    [Test]
    procedure AsCurrencyErrorFormat;

    [Test]
    procedure AsDateTime;

    [Test]
    procedure AsDateTimeRequired;

    [Test]
    procedure AsDateTimeNotRequired;

    [Test]
    procedure AsDateTimeOnlyData;

    [Test]
    procedure AsDateTimeChangeFormat;

    [Test]
    procedure AsDateTimeInvalidFormat;

    [Test]
    procedure AsDate;

    [Test]
    procedure AsDateRequired;

    [Test]
    procedure AsDateNotRequired;

    [Test]
    procedure AsDateChangeFormat;

    [Test]
    procedure AsDateInvalidFormat;

    [Test]
    procedure AsExtended;

    [Test]
    procedure AsExtendedDecimalSeparator;

    [Test]
    procedure AsExtendedNotRequired;

    [Test]
    procedure AsExtendedRequired;

    [Test]
    procedure AsExtendedErrorFormat;

    [Test]
    procedure AsFloat;

    [Test]
    procedure AsFloatDecimalSeparator;

    [Test]
    procedure AsFloatNotRequired;

    [Test]
    procedure AsFloatRequired;

    [Test]
    procedure AsFloatErrorFormat;

    [Test]
    procedure AsInteger;

    [Test]
    procedure AsIntegerNotRequired;

    [Test]
    procedure AsIntegerRequired;

    [Test]
    procedure AsIntegerErrorFormat;

    [Test]
    procedure AsInt64;

    [Test]
    procedure AsInt64NotRequired;

    [Test]
    procedure AsInt64Required;

    [Test]
    procedure AsInt64ErrorFormat;

    [Test]
    procedure AsISO8601DateTime;

    [Test]
    procedure AsISO8601DateTimeOnlyData;

    [Test]
    procedure AsISO8601DateTimeNotRequired;

    [Test]
    procedure AsISO8601DateTimeRequired;

    [Test]
    procedure AsISO8601DateTimeErrorFormat;

    [Test]
    procedure AsStream;

    [Test]
    procedure AsStreamNotFoundNotRequired;

    [Test]
    procedure AsStreamNotFoundRequired;

    [Test]
    procedure AsStreamSaveToFile;

    [Test]
    procedure AsStreamNotFoundSaveToFile;

    [Test]
    procedure AsString;

    [Test]
    procedure AsStringRequired;

    [Test]
    procedure AsStringNotRequired;

    [Test]
    procedure AsStringDiferentCase;

    [Test]
    procedure AsTime;

    [Test]
    procedure AsTimeRequired;

    [Test]
    procedure AsTimeNotRequired;

    [Test]
    procedure AsTimeChangeFormat;

    [Test]
    procedure AsTimeInvalidFormat;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UBuscaDocWikiGoogle_Linha5_Métodomuitolongo.pas;Método muito longo;7;"function BuscarDocWikiGoogle(const Codigo, Mensagem: string): string;

implementation

uses
  System.SysUtils, System.Classes, System.JSON, System.NetEncoding,
  IdHTTP, IdSSLOpenSSL;

const
  API_KEY = 'AIzaSyAOKWVgjABtxStLv-iRTYxheI_PX5y_H8Y'; // ?? Substitua por sua chave de API
  CSE_ID = '03399718856334828';      // ? Seu ID de mecanismo de busca

function BuscarDocWikiGoogle(const Codigo, Mensagem: string): string;
var
  HTTP: TIdHTTP;
  SSL: TIdSSLIOHandlerSocketOpenSSL;
  URL, Resposta, Query: string;
  JSONRoot, Item: TJSONObject;
  Items: TJSONArray;
  I: Integer;
  Stream: TStringStream;
begin
  Result := '';
  HTTP := TIdHTTP.Create(nil);
  SSL := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  Stream := TStringStream.Create('', TEncoding.UTF8);
  try
    HTTP.IOHandler := SSL;
    HTTP.HandleRedirects := True;
    HTTP.Request.UserAgent := 'Mozilla/5.0 (Delphi Indy)';
    HTTP.Request.AcceptEncoding := 'utf-8';

    Query := TNetEncoding.URL.Encode('Delphi ' + Codigo + ' ' + Mensagem);
    URL := Format(
      'https://www.googleapis.com/customsearch/v1?key=%s&cx=%s&q=%s',
      [API_KEY, CSE_ID, Query]
    );

    Resposta := HTTP.Get(URL);

    JSONRoot := TJSONObject.ParseJSONValue(Resposta) as TJSONObject;
    try
      if Assigned(JSONRoot) and JSONRoot.TryGetValue<TJSONArray>('items', Items) then
      begin
        for I := 0 to Items.Count - 1 do
        begin
          Item := Items.Items[I] as TJSONObject;
          if Item.TryGetValue<string>('link', Result) then
          begin
            if Result.StartsWith('https://docwiki.embarcadero.com/') then
              Exit
            else
              Result := ''; // ignora se não for docwiki
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UCadastroClientes_Linha185_Métodomuitolongo.pas;Método muito longo;7;"    procedure FormShow(Sender: TObject);
    procedure BtnNovoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BtnPrimeiroClick(Sender: TObject);
    procedure btnAnteriorClick(Sender: TObject);
    procedure BtnProximoClick(Sender: TObject);
    procedure BtnUltimoClick(Sender: TObject);
    procedure BtnAlterarClick(Sender: TObject);
    procedure BtnGravarClick(Sender: TObject);
    procedure CBAtivoExit(Sender: TObject);
    procedure EdtNumeroKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure EdtCnpjKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure EdtCepKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure BtnExcluirClick(Sender: TObject);
    procedure BtnPesquisarClick(Sender: TObject);
    procedure TabItemPesquisaClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EdtCnpjExit(Sender: TObject);
  private
    { Private declarations }
    FConexao: TFDConnection;
    FCliente: TClientes;
    FContato: TContato;
    PodeGravar: Boolean;
    FUFCliente: string;
    FAtivoCliente: string;
    qry: TFDQuery;
    RegrasDeNegocios: TModelCliente;
    FModelContato: TModelContato;
    FTipo: String;
    FController: TControllerCliente;
    CDS: TClientDataSet;
    FLinguagem: string;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FGravarLog: Boolean;        //Para uso com o Log
    FHabilitarLogsSistema: string;
    FNextIDContato: Integer;
    FGravacaoSucesso: Boolean;
    procedure DesabilitaBotoes(const BotaoSet:TBotaoSet);
    Procedure PopularGridClientes;
    procedure PreencheDadosEncontradosDoCliente;
    procedure PopularDataSet;
    procedure CarregarConfiguracao;
    procedure PopularContatos;
    function LerSalvarLogsBancoDeDados: Boolean;
    function GravarLogsBancoDeDados: Boolean;
  public
    { Public declarations }
    DataSet: TClientDataSet;
    FSomenteAtivos: string;
    FSemContatos  : string;
    FBtnUltimo    : string;
    Function CriarDataSet(aDadaSet: TClientDataSet): TClientDataSet;
    procedure OnDataSetChange;
    procedure PopularClientes;
    procedure CarregarCores;
    procedure CarregarLinguagem;
    function ProximoIDContato: integer;


  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UCadastroFabricantes_Linha417_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmFabricantes.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     LblCodCliente.Text      := 'Cod. Fabricante';
     LblRazao.Text           := 'Razão Social / Nome';
     LblCnpj.Text            := 'CNPJ / CPF';
     LblEndereco.Text        := 'Endereço';
     LblNumero.Text          := 'Número';
     LblComplemento.Text     := 'Complemento';
     LblCEP.Text             := 'CEP';
     LblCidade.Text          := 'Cidade';
     LblCEP.Text             := 'CEP';
     LblUF.Text              := 'UF';
     LblAtivo.Text           := 'Ativo';
     LblPesquisar.Text       := 'Pesquisar';
     BtnNovo.Text            := '&Novo';
     BtnAlterar.Text         := '&Alterar';
     BtnExcluir.Text         := '&Excluir';
     BtnSalvar.Text          := '&Salvar';
     TabItemCadastro.Text    := 'Cadastro';
     TabItemPesquisa.Text    := 'Pesquisa';
     TabItemContato.Text     := 'Contato';
     lblTitulo.Text          := 'Cadastro do Fabricantes';
     FrmFabricantes.Caption  := 'Cadastro do Fabricantes';

   end
   else if FLinguagem = 'Ingles' then
   begin
     LblCodCliente.Text      := 'Id. Manufacturer';
     LblRazao.Text           := 'Corporate Name / Name';
     LblCnpj.Text            := 'Tax Identification Number - TIN';
     LblEndereco.Text        := 'Address';
     LblNumero.Text          := 'Number';
     LblComplemento.Text     := 'Complement';
     LblCidade.Text          := 'City';
     LblCEP.Text             := 'Zip Code';
     LblUF.Text              := 'State';
     LblAtivo.Text           := 'Active';
     LblPesquisar.Text       := 'Search';
     BtnNovo.Text            := '&New';
     BtnAlterar.Text         := '&Alter';
     BtnExcluir.Text         := '&Delete';
     BtnSalvar.Text          := '&Save';
     TabItemCadastro.Text    := 'Register';
     TabItemPesquisa.Text    := 'Search';
     TabItemContato.Text     := 'Contact';
     lblTitulo.Text          := 'Manufacturer Registration';
     FrmFabricantes.Caption  := 'Manufacturer Registration';
   end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Categoria_Linha102_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Categoria_Linha118_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Categoria_Linha32_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Categoria_Linha53_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Categoria_Linha86_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Cliente_Linha137_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Cliente_Linha33_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Cliente_Linha55_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Cliente_Linha79_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Cliente_Linha95_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.FotoProcedimento_Linha103_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.FotoProcedimento_Linha32_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.FotoProcedimento_Linha51_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Procedimento_Linha121_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Procedimento_Linha32_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Procedimento_Linha54_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Procedimento_Linha76_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Procedimento_Linha92_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Servico_Linha31_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Servico_Linha53_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Servico_Linha76_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDAO.Servico_Linha92_Usodewith.pas;Uso de with;7;"with TFDQuery.Create(nil) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uDashboardHTMLUtils_Linha5_Métodomuitolongo.pas;Método muito longo;7;"procedure GerarGraficoHTMLEmbed;

implementation

uses
  System.SysUtils, System.Classes;

procedure GerarGraficoHTMLEmbed;
var
  SL, SLJson: TStringList;
  PastaGraficos, CaminhoHTML, LinhaJSON: string;
  Ferramentas: TArray<string>;
  i: Integer;
  NomeJson, IDCanvas: string;
begin
  SetLength(Ferramentas, 5);
  Ferramentas[0] := 'queryanalizer';
  Ferramentas[1] := 'solidchcker';
  Ferramentas[2] := 'scanneracoplamento';
  Ferramentas[3] := 'analisadorhints';
  Ferramentas[4] := 'verificadorcodigomorto';

  PastaGraficos := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0))) + 'graficos\';
  CaminhoHTML := PastaGraficos + 'grafico.html';

  SL := TStringList.Create;
  try
    SL.Add('<!DOCTYPE html>');
    SL.Add('<html><head>');
    SL.Add('<meta charset=""UTF-8"">');
    SL.Add('<title>Dashboard</title>');
    SL.Add('<script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>');
    SL.Add('<style>');
    SL.Add('body { font-family: Arial; margin: 40px; background: #f4f4f4; }');
    SL.Add('.grid { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; }');
    SL.Add('.grafico { background: #fff; padding: 20px; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }');
    SL.Add('canvas { width: 100%; height: 300px !important; }');
    SL.Add('</style></head><body>');
    SL.Add('<h1>?? Painel Integrado</h1>');
    SL.Add('<div class=""grid"">');

    for i := 0 to High(Ferramentas) do
    begin
      NomeJson := PastaGraficos + Ferramentas[i] + '.json';
      if FileExists(NomeJson) then
      begin
        SLJson := TStringList.Create;
        try
          SLJson.LoadFromFile(NomeJson, TEncoding.UTF8);
          LinhaJSON := SLJson.Text.Replace(#13#10, '').Replace('""', '\""');
          IDCanvas := 'canvas' + IntToStr(i+1);

          SL.Add('<div class=""grafico"">');
          SL.Add('<h3>' + Ferramentas[i] + '</h3>');
          SL.Add('<canvas id=""' + IDCanvas + '""></canvas>');
          SL.Add('<script>');
          SL.Add('var data = JSON.parse(""' + LinhaJSON + '"");');
          SL.Add('new Chart(document.getElementById(""' + IDCanvas + '""), { type: ""line"", data: data, options: { responsive: true, plugins: { legend: { position: ""bottom"" } } } });');
          SL.Add('</script>');
          SL.Add('</div>');
        finally
          SLJson.Free;
        end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uFrmPix_Linha121_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uFrmPix_Linha123_Usodewith.pas;Uso de with;7;"With row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uFrmPix_Linha137_Usodewith.pas;Uso de with;7;"with row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UGeradorRelatorio_Linha14_Métodomuitolongo.pas;Método muito longo;7;"procedure GerarRelatorioUnico(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);
procedure ExportarCSV(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);

implementation


procedure GerarRelatorioUnico(const Relatorios: TList<TRelatorioProjeto>; const DestinoRelatorio: string);
var
  HTML: TStringList;
  Relatorio: TRelatorioProjeto;
  Linha, HTMLFile, Codigo, Msg: string;
  Match: TMatch;
  Sugestao: TSugestaoIA;
begin
  if DestinoRelatorio <> '' then
    HTMLFile := TPath.Combine(DestinoRelatorio, 'RelatorioCompleto.html')
  else
    HTMLFile := 'RelatorioCompleto.html';

  HTML := TStringList.Create;
  try
    HTML.Add('<html><head><meta charset=""utf-8""><style>');
    HTML.Add('body{font-family:Arial;} h2{color:#003366;} h3{color:#333;} ul{margin-left:20px;}');
    HTML.Add('li{margin-bottom:8px;} .hint{color:green;} .warning{color:orange;}');
    HTML.Add('</style></head><body>');
    HTML.Add('<h1>Relatório Consolidado de Hints e Warnings</h1>');

    for Relatorio in Relatorios do
    begin
      HTML.Add('<hr><h2>' + Relatorio.NomeProjeto + '</h2>');

      if Relatorio.Hints.Count > 0 then
      begin
        HTML.Add('<h3>Hints</h3><ul>');
        for Linha in Relatorio.Hints do
        begin
          HTML.Add('<li class=""hint"">' + Linha);

          Match := TRegEx.Match(Linha, '^.+\(\d+\):\s+\[([HW]\d{4})\]\s+(.*)$');
          if Match.Success then
          begin
            Codigo := Match.Groups[1].Value;
            Msg := Match.Groups[2].Value;

            if USugestoesCache.ObterCache.TryGetValue(Codigo, Sugestao) then
            begin
              if Sugestao.Origem = osDocWiki then
                HTML.Add('<br><i>?? <a href=""' +
                         Sugestao.Solucao.Replace('Consulte a documentação oficial: ', '') +
                         '"">Ver documentação oficial</a></i>')
              else
                HTML.Add('<br><i>? Nenhuma sugestão encontrada</i>');
            end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uModelJSON_Linha57_Métodomuitolongo.pas;Método muito longo;7;"class procedure TJSONModel.CarregarJSONArrayGenerico(
  const Caminho: string;
  Pagina, LinhasPorPagina: Integer;
  DataSet: TClientDataSet;
  TreeView: TTreeView;
  out Total: Integer;
  ProgressBar: TProgressBar = nil);
var
  JSONStr: string;
  JSONValue: TJSONValue;
  JSONArray: TJSONArray;
  Campos: TDictionary<string, TFieldType>;
  ListaCampos: TArray<string>;
  Campo: string;
  Pair: TJSONPair;
  DummyInt: Integer;
  i, j, StartIdx, EndIdx: Integer;
  Obj: TJSONObject;
  Fld: TField;
  Objeto: TJSONObject;
  RootNode, Sub: TTreeNode;
begin
  JSONStr := TFile.ReadAllText(Caminho, TEncoding.UTF8);
  JSONStr := CorrigirJSONSimples(JSONStr);
  JSONValue := TJSONObject.ParseJSONValue(JSONStr);

  if not Assigned(JSONValue) then
    raise Exception.Create('Conteúdo JSON inválido.');

  if JSONValue is TJSONArray then
    JSONArray := TJSONArray(JSONValue)
  else if JSONValue is TJSONObject then
  begin
    JSONArray := TJSONArray.Create;
    JSONArray.AddElement(JSONValue); // transfere a posse
  end
  else
    raise Exception.Create('JSON não é um array ou objeto.');

  Total := JSONArray.Count;
  if Total = 0 then Exit;

  Campos := TDictionary<string, TFieldType>.Create;
  try
    for i := 0 to JSONArray.Count - 1 do
    begin
      if JSONArray.Items[i] is TJSONObject then
      begin
        Obj := JSONArray.Items[i] as TJSONObject;
        for j := 0 to Obj.Count - 1 do
        begin
          Pair := Obj.Pairs[j];
          Campo := Pair.JsonString.Value;
          if not Campos.ContainsKey(Campo) then
          begin
            if TryStrToInt(Pair.JsonValue.Value, DummyInt) then
              Campos.Add(Campo, ftInteger)
            else if SameText(Pair.JsonValue.Value, 'true') or SameText(Pair.JsonValue.Value, 'false') then
              Campos.Add(Campo, ftBoolean)
            else
              Campos.Add(Campo, ftString);
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha101_Métodomuitolongo.pas;Método muito longo;7;"procedure TForm1.VerificaFila;
begin
  // Criar a Thread anonima
  TThread.CreateAnonymousThread(
    procedure
    var
      QryLocal, QryBoNota, QryChamados: TFDquery;
      LBoNota: String;
      Fila: TQueue<string>;
      Placa, Local: string;
      proximo: string;
      i: Integer;

      SearchString: string;
      LineIndex: Integer;
    begin
      Fila := TQueue<string>.Create;
      Queue := TQueue<string>.Create;

      QryLocal := TFDquery.Create(nil);
      QryLocal.Connection := FDConnection1;
      try
        QryLocal.Close;
        QryLocal.SQL.Clear;
        QryLocal.SQL.Add('select f.*, v.*, v.placa,l.local from fila f');
        QryLocal.SQL.Add
          (' inner join veiculos v on(f.idveiculo = v.idveiculos) ');
        QryLocal.SQL.Add(' inner join locais l on(f.idlocal = l.idlocais)');
        QryLocal.SQL.Add(' where f.ativo=''S'' '); // se comentar pega todos os
        QryLocal.SQL.Add(' order by f.datahoraentrada');

        // Se a conexão cair reconectar
        if not FDConnection1.Connected then
          FDConnection1.Connected := True;

        QryLocal.Open();

        {$IFDEF DEBUG}
          Showmessage('QryLocal Qtde Registros é de: ' +
          IntToStr(QryLocal.RecordCount));
        {$ENDIF}

        if QryLocal.RecordCount > 0 then
        begin

          // Adicionar Todas as placas ao Memo1
          Memo1.Clear; // Limpa o Memo1 antes de adicionar novos dados
          QryLocal.First;
          while not QryLocal.Eof do
          begin
            Placa := QryLocal.FieldByName('placa').AsString;
            Local := QryLocal.FieldByName('local').AsString;
            TThread.Synchronize(nil,
              procedure
              begin
                Memo1.Lines.Add(Placa + ' - ' + Local);
                // Adiciona a linha ao Memo1
              end);
            Placa := QryLocal.FieldByName('placa').AsString;
            Fila.Enqueue(Placa);
            QryLocal.Next;
          end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha106_Usodewith.pas;Uso de with;7;"with FDQuery1 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha136_Usodewith.pas;Uso de with;7;"with FDQuery2 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha166_Usodewith.pas;Uso de with;7;"with FDQuery2 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha349_Usodewith.pas;Uso de with;7;"with ListView1.Columns.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha355_Usodewith.pas;Uso de with;7;"with ListView1.Columns.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha361_Usodewith.pas;Uso de with;7;"with ListView1.Columns.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha557_Métodomuitolongo.pas;Método muito longo;7;"procedure TForm1.ToggleFullScreen;
const
  ID_FULLSCREEN = 897;
begin
  if MPCHandle = 0 then Exit;

  if not MPCFullScreenMode then
  begin
    // === Entrar em tela cheia ===

    // Remove do painel
    Winapi.Windows.SetParent(MPCHandle, 0);

    // Restaura bordas/janela
    SetWindowLong(MPCHandle, GWL_STYLE,
      GetWindowLong(MPCHandle, GWL_STYLE) or WS_CAPTION or WS_THICKFRAME);

    // Traz para frente
    SetForegroundWindow(MPCHandle);

    // Entra em fullscreen (Alt+Enter)
    SendMessage(MPCHandle, WM_COMMAND, ID_FULLSCREEN, 0);

    // Marca estado
    MPCFullScreenMode := True;

    // Atualiza texto do botão
    btnToggleFull.Caption := 'Voltar ao Painel';
  end
  else
  begin
    // === Voltar ao painel ===

    // Sai do fullscreen
    SendMessage(MPCHandle, WM_COMMAND, ID_FULLSCREEN, 0);
    Sleep(300);

    // Remove bordas
    SetWindowLong(MPCHandle, GWL_STYLE,
      GetWindowLong(MPCHandle, GWL_STYLE) and not WS_CAPTION and not WS_THICKFRAME);

    // Volta ao painel
    Winapi.Windows.SetParent(MPCHandle, Panel3.Handle);

    // Redimensiona
    SetWindowPos(MPCHandle, 0, 0, 0, Panel3.Width, Panel3.Height, SWP_NOZORDER or SWP_SHOWWINDOW);

    // Marca estado
    MPCFullScreenMode := False;

    // Atualiza texto do botão
    btnToggleFull.Caption := 'Tela Cheia';
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha64_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha67_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha87_Usodewith.pas;Uso de with;7;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha90_Métodomuitolongo.pas;Método muito longo;7;"procedure TForm1.ListWMIClasses;
var
  Locator: OLEVariant;
  Services: OLEVariant;
  ClassesEnum: IEnumvariant;
  WMIClass: OLEVariant;
  PropertiesEnum: IEnumvariant;
  Prop: OLEVariant;
  Fetched: Cardinal;
  CurrClass: string;
  ScriptBuilder: TStringList;
  ClassProps: TStringList;
  i: Integer;
  FirebirdType: string;
  DatabasePath, User, Password: string;
begin
  ScriptBuilder := TStringList.Create;
  ClassProps := TStringList.Create;
  ClassProps.Sorted := True;
  ClassProps.Duplicates := dupIgnore;

  // Ajuste aqui o caminho, usuário e senha do banco Firebird desejado
  DatabasePath := 'C:\bancoWMI.fdb';
  User := 'SYSDBA';
  Password := 'masterkey';

  CoInitialize(nil);
  try
    try
      Locator := CreateOleObject('WbemScripting.SWbemLocator');
      Services := Locator.ConnectServer('.', 'root\cimv2');
      ClassesEnum := IUnknown(Services.ExecQuery('SELECT * FROM meta_class', 'WQL', 0)._NewEnum) as IEnumVariant;

      // Criação do banco de dados no script
      ScriptBuilder.Add('-- Script gerado para criação do banco Firebird e tabelas das classes WMI');
      ScriptBuilder.Add(Format('CREATE DATABASE ''%s'' USER ''%s'' PASSWORD ''%s'';', [DatabasePath, User, Password]));
      ScriptBuilder.Add('');

      while ClassesEnum.Next(1, WMIClass, Fetched) = 0 do
      begin
        CurrClass := WMIClass.Path_.Class;

        Memo1.Lines.Add('Classe: ' + CurrClass);
        Memo1.Lines.Add('  Propriedades:');

        ClassProps.Clear;

        PropertiesEnum := IUnknown(WMIClass.Properties_._NewEnum) as IEnumVariant;

        while PropertiesEnum.Next(1, Prop, Fetched) = 0 do
        begin
          FirebirdType := CIMTypeToFirebirdType(Prop.CIMType);

          ClientDataSet1.Append;
          ClientDataSet1.FieldByName('Tabela').AsString := CurrClass;
          ClientDataSet1.FieldByName('Campos').AsString := Prop.Name;
          ClientDataSet1.FieldByName('Tamanho').AsString := VarToStr(Prop.CIMType);
          ClientDataSet1.Post;

          Memo1.Lines.Add('    ' + Prop.Name + ' : ' + VarToStr(Prop.CIMType));

          ClassProps.Add(Format('  ""%s"" %s', [Prop.Name, FirebirdType]));

          Prop := Unassigned;
        end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit1_Linha90_Usodewith.pas;Uso de with;7;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha100_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha102_Usodewith.pas;Uso de with;7;"With row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha115_Usodewith.pas;Uso de with;7;"with row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha81_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha83_Usodewith.pas;Uso de with;7;"With row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominioCad_Linha92_Usodewith.pas;Uso de with;7;"with row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha119_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha121_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha130_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha133_Usodewith.pas;Uso de with;7;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha164_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha166_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha176_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha179_Usodewith.pas;Uso de with;7;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondominio_Linha182_Usodewith.pas;Uso de with;7;"With Popup('PopupPix', 'Pagamento Pix').Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimosCad_Linha100_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimosCad_Linha102_Usodewith.pas;Uso de with;7;"With row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimosCad_Linha115_Usodewith.pas;Uso de with;7;"with row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha134_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha136_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha138_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha145_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha147_Usodewith.pas;Uso de with;7;"With Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha148_Usodewith.pas;Uso de with;7;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitCondonimos_Linha150_Usodewith.pas;Uso de with;7;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarContrasenha_Linha134_Métodomuitolongo.pas;Uso de with;32;"with FDQuery1 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarContrasenha_Linha134_Métodomuitolongo.pas;Método muito longo;7;"procedure TFRMGerarContraSenha.Button1Click(Sender: TObject);
var
  strsql: string;
  strsql2: string;
  contrasenha: string;
  senhafinal: string;
  i: Integer;
const
  str = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%?';
  max = 15;
begin
  if Edit1.Text = '' then
  begin
    ShowMessage('Entre com a chave.');
    Edit1.SetFocus;
  end
  else
  begin
    if EdtData.Text = '' then
    begin
      ShowMessage('Entre com a data de vencimento.');
      EdtData.SetFocus;
    end
    else
    begin
      with FDQuery1 do;
      begin
        strsql := 'select * from registro where chave=' + #39 +
          Edit1.Text + #39;
        strsql := strsql + ' and contrasenha=0';

        strsql2 :=
          'select razao from chaves,registro where chaves.id_chave= registro.id_chave and registro.chave='
          + #39 + Edit1.Text + #39;
        FDQuery2.SQL.Clear;
        FDQuery2.SQL.Add(strsql2);
        FDQuery2.Open();
        Label6.Caption := FDQuery2.FieldByName('razao').AsString;

        // ShowMessage(strsql);
        FDQuery1.SQL.Clear;
        FDQuery1.SQL.Add(strsql);
        FDQuery1.Open();
        if (FDQuery1.RecordCount) = 1 then
        begin
          ShowMessage('Chave encontrada');
          // rotina de gerar a contra-senha
          contrasenha := FDQuery1.FieldByName('chave').AsString;
          // ShowMessage(contrasenha);
          // Gerar contra-senha
          Randomize;
          Label3.Caption := '';
          for i := 1 to max do
          begin
            try
              FDConnection1.StartTransaction;

              FDQuery1.Edit;
              Label3.Caption := Label3.Caption + str[Random(Length(str)) + 1];
              FDQuery1.FieldByName('contrasenha').AsString := contrasenha +
              Label3.Caption;
              senhafinal := contrasenha + Label3.Caption;

              Memo1.Lines.Clear;
              Memo1.Lines.Add(senhafinal);

              // Encriptar
              // Memo1.Lines.Add(Crypt('D',senhafinal));
              // fim de encriptar

              FDQuery1.FieldByName('ativado').AsString := 'S';
              FDQuery1.FieldByName('data_exp').AsDateTime :=
              StrToDateTime(EdtData.Text);
              FDQuery1.Post;
              FDCOnnection1.Commit;

             Except
             on E: Exception do
             begin
               ShowMessage('Erro ao gravar Contra Senha' + e.Message);
               FDConnection1.Rollback;
               Exit;
             end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarContrasenha_Linha159_Usodewith.pas;Uso de with;7;"with FDQuery1 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha181_Usodewith.pas;Uso de with;7;"with FDQuery1,FDQuery2 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha220_Usodewith.pas;Uso de with;7;"with FDQuery2 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha250_Usodewith.pas;Uso de with;7;"with FDQuery2 do;"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha306_Métodomuitolongo.pas;Método muito longo;7;"procedure TFRMGERARSERIAL.Button4Click(Sender: TObject);
var
    IdSMTP1: TIdSMTP;
    Idmessage: TIdMessage;
    TextoMsg: TidText;
    IdSSL: TIdSSLIOHandlerSocketOpenSSL;
    contatol:string;
    emaill:string;
    telcontatol:string;
    const
    CRFL = #13#10;

begin
    IdSMTP1                 := TIdSMTP.create(nil);
    IdSMTP1.ConnectTimeout  := 10000;
    IdSMTP1.ReadTimeout     := 10000;

    IdMessage               := TIdMessage.create(nil);
    IdMessage.Clear;
    IdMessage.CharSet       := 'iso-8859-1';
    IdMessage.Encoding      := MeMIME;
    IdMessage.ContentType   := 'multipart/related'   ;
    IdMessage.subject       := 'Novo Serial Gerado do cliente: ' +FDQuery2.FieldByName('razao').AsString ;

    textomsg                := TIdText.Create(IdMessage.MessageParts);
    //textomsg.Body.Text      := 'Se você consegue ler isto então é porque funcionou o teste!';
    contatol    := FDQuery2.FieldByName('contato').AsString;
    emaill      := FDQuery2.FieldByName('email').AsString;
    telcontatol := FDQuery2.FieldByName('telcontato').AsString;
    Memo1.Lines.Add(contatol);
    Memo1.Lines.Add(emaill);
    Memo1.Lines.Add(telcontatol);
    //TextoMsg.Body.Text      :=Memo1.Lines.Text + #13 + 'Serial gerado: '+Label5.Caption;

    //TextoMsg.Body.Text      :=Memo1.Lines.Text;
    TextoMsg.Body.Add('Chave Gerada: '+Label5.Caption+'<br/>');
    TextoMsg.Body.Add(contatol+'<br/>');
    TextoMsg.Body.Add(emaill+'<br/>');
    TextoMsg.Body.Add(telcontatol+'<br/>');


    textomsg.ContentType    := 'text/html';

    if ((cbtipo.itemindex = 0) or (cbtipo.itemindex = 2)) then
    begin
        // GMAIL e YAHOO

        if cbtipo.itemindex = 0 then
        begin
            idSMTP1.Host            := 'smtp.gmail.com';
            idSMTP1.Username        := 'delphi.send@gmail.com';
            idSMTP1.Password        := 'delphi.send12345';
        end
        else begin
            idSMTP1.Host            := 'smtp.mail.yahoo.com';
            idSMTP1.Username        := 'email@yahoo.com.br';
            idSMTP1.Password        := 'senha';
        end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha368_Usodewith.pas;Uso de with;7;"with idSMTP1 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitGerarSerial_Linha418_Usodewith.pas;Uso de with;7;"with idSMTP1 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitPrincipal_Linha120_Usodewith.pas;Uso de with;7;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitPrincipal_Linha121_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitPrincipal_Linha163_Usodewith.pas;Uso de with;7;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UnitPrincipal_Linha96_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unitsendemail_Linha126_Usodewith.pas;Uso de with;7;"with idSMTP1 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unitsendemail_Linha77_Usodewith.pas;Uso de with;7;"with idSMTP1 do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_D2Bridge_Server_Console_Linha220_Métodomuitolongo.pas;Método muito longo;7;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TCRMWebAppGlobal.Create(TApplication.Create(nil));
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'CRM';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TFrmPrincipal;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Let?s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_D2Bridge_Server_Console_Linha231_Métodomuitolongo.pas;Método muito longo;7;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TLoja2WebAppGlobal.Create(nil);
 
 //App Information
 {
 D2BridgeServerController.ServerAppTitle:= 'My App D2Bridge';
 D2BridgeServerController.ServerAppDescription:= 'My App Descrition';
 D2BridgeServerController.ServerAppAuthor:= 'Talis Jonatas Gomes';
 }
  
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'Loja2';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TForm1;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Letï¿½s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_D2Bridge_Server_Linha93_Usodewith.pas;Uso de with;7;"with Button_Options.ClientToScreen(point(0, 1 + Button_Options.Height)) do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_D2Bridge_Server_Linha97_Métodomuitolongo.pas;Método muito longo;7;"procedure TForm_D2Bridge_Server.Button_StartClick(Sender: TObject);
begin
 D2BridgeServerController.PrimaryFormClass:= TForm_Login;

 D2BridgeServerController.APPName:= 'Loja3';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 D2BridgeServerController.Prism.Options.DataSetLog:= true;

 //D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Letï¿½s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha104_Usodewith.pas;Uso de with;7;"with D2Bridge.Items.add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha109_Usodewith.pas;Uso de with;7;"with Card do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha115_Usodewith.pas;Uso de with;7;"with BodyItems.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha117_Usodewith.pas;Uso de with;7;"with Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha120_Usodewith.pas;Uso de with;7;"with Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha123_Usodewith.pas;Uso de with;7;"with Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha124_Usodewith.pas;Uso de with;7;"with Col.Items.add do //Example Edit + Button same row and col"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\Unit_Login_Linha130_Usodewith.pas;Uso de with;7;"with Row.Items.Add do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UPrincipal_Linha109_Métodomuitolongo.pas;Método muito longo;7;"    procedure Button1Click(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure Edit3Change(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure DBGrid1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure DBGrid1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1ColEnter(Sender: TObject);
    procedure FDQuery1ativoGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure SpeedButton1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure BtnDesmarcarItensClick(Sender: TObject);
    procedure BtnExrpotarTabelaDeItensClick(Sender: TObject);
    procedure CBCabosClick(Sender: TObject);
    procedure ClientDataSet1FilterRecord(DataSet: TDataSet;
      var Accept: Boolean);

  private
    { Private declarations }
     ShiftClick: Boolean;
     ShiftStartRow, ShiftEndRow: Integer;
     ListaItens: TStringList;

     procedure CarregarGrid;
    procedure DesmarcarTodosItens;
    procedure ExpDOC(DataSet: TDataSet; Arq: string);
    procedure FiltrarRegistros;
    procedure CriarDataSet;
  public
    { Public declarations }
    qryFabricantes: TFDQuery;
    numero: integer;
    PartNumbers: TPartNumberInfo; //TStringList;
    procedure ExportToUTF8Text(descritivo: string; outputPath: string);
    procedure CopiarParaAreaDeTransferencia(const texto: string);
    procedure ExportSelectedRecordsToTextFiles;
    procedure SelectRows(StartRow, EndRow: Integer);
    procedure Swap(var A, B: Integer);
    procedure GerarArquivoWord;
    procedure ConcatenateWordFiles(const FilePaths: array of string; const OutputFile: string);
    function FindAllDocxFiles(const DirectoryPath: string): TArray<string>;
    function FiltrarNomeArquivo(const NomeOriginal: string): string;
    procedure GerarAruivoWordunico;
    function ExtrairNomeArquivo(const NomeOriginal: string): string;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UPrincipal_Linha1459_Usodewith.pas;Uso de with;7;"With FrmPrincipal do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UPrincipal_Linha1480_Usodewith.pas;Uso de with;7;"With FrmPrincipal do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UPrincipal_Linha209_Métodomuitolongo.pas;Método muito longo;7;"    procedure Circle1Gesture(Sender: TObject;
      const EventInfo: TGestureEventInfo; var Handled: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure Circle1Click(Sender: TObject);
    procedure Circle1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Layout1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Single);
    procedure Image4Gesture(Sender: TObject; const EventInfo: TGestureEventInfo;
      var Handled: Boolean);
    procedure Image4MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Image4MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1DblClick(Sender: TObject);
    procedure Image4DblClick(Sender: TObject);
    procedure MenuItemFabricantesCategoriasClick(Sender: TObject);
    procedure NewImagemDbClick(Sender: TObject);
    procedure NewImagemMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure NewImagemGesture(Sender: TObject;
              const EventInfo: TGestureEventInfo;
              var Handled: Boolean);
    procedure NewImagemMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure FormShow(Sender: TObject);
    procedure BtnCarregarFotoClick(Sender: TObject);
    procedure MenuItemConfiguracoesSistemaClick(Sender: TObject);
    procedure MenuItem16Click(Sender: TObject);
    procedure BtnCopiarFotoClick(Sender: TObject);
    procedure Image4MouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure TrackBar1Change(Sender: TObject);
    procedure CBMarcasChange(Sender: TObject);
    procedure CBModeloChange(Sender: TObject);
    procedure CBFabricantesChange(Sender: TObject);
    procedure CBCategoriasChange(Sender: TObject);
    procedure CBLinhasChange(Sender: TObject);
    procedure CBProdutosChange(Sender: TObject);
    procedure BtnCopiarRodaClick(Sender: TObject);
    procedure MenuItemClientesDadosClick(Sender: TObject);
    procedure MenuItemClientesVeiculosClick(Sender: TObject);
    procedure MenuItemFabricantesDadosClick(Sender: TObject);
    procedure MenuItemClientesOrcamentosClick(Sender: TObject);
    procedure MenuItemRegistrarClick(Sender: TObject);
    procedure BtnCarregarRodaCalotaClick(Sender: TObject);
    procedure SairExecute(Sender: TObject);
    procedure LogOffExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure MediaReceiverProfileResourceReceived(const Sender: TObject;
      const AResource: TRemoteResource);
    procedure MediaReceiverManagerRequestManagerPassword(const Sender: TObject;
      const ARemoteIdentifier: string; var Password: string);
    procedure MenuItemFabricanteProdutosClick(Sender: TObject);
    procedure MenuItemFabricantesDeVeiculosClick(Sender: TObject);
    procedure Image5Click(Sender: TObject);
    procedure ImageLogoClick(Sender: TObject);
    procedure MenuItem2Click(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure MenuItem4Click(Sender: TObject);
    procedure MenuItemBackupClick(Sender: TObject);
    procedure Button5Click(Sender: TObject);


  private
    { Private declarations }
    MoveObjeto: Boolean;
    OffSet: TPointF;
    NewCircle: TCircle;
    NewImagem: TImage;
    FIdMarcaSelecionada: integer;
    FIdFabricante: integer;
    FIdCategoria: integer;
    FidLinha: integer;
    FMemoryStream: TMemoryStream;
    FBlobStream: TStream;
    FIdProduto: integer;
    FValorTotalOrcamento: Double;
    ProdutoDS: TDataSet;
    qry: TFDQuery;
    FConexao: TFDConnection;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FArquivoLogo: String; //Nome do Arquivo da Logo a Ser carregado

    procedure Modo_Edicao(editar: Boolean);
    procedure Modo_Edicao2(editar: Boolean);
    procedure NewImagemMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure SetidUsuario(const Value: Integer);
    procedure SaveBitmapToFile(Bitmap: TBitmap; const FileName: string);
    procedure EnviarImagemWhatsApp(const FileName: string);
    procedure EnviarAnexoWhatsApp(const FileName: string);
    function ImageToBase64(const FileName: string): string;
    function DesabilitaEdtWhatsApp:Boolean;

    function CapturaTela:TBitMap;

  public
    { Public declarations }
     FidUsuario: Integer;
     FLinguagem: string;
     property idUsuario: Integer read FidUsuario write SetidUsuario;
     procedure CarregarCores;
     procedure CarregarLinguagem;
     procedure CarregarLogo;
     constructor create;
     destructor destroy;override;

  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\UPrincipal_Linha416_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmPrincipal.BtnCopiarRodaClick(Sender: TObject);
begin
  if MoveObjeto then
    Modo_Edicao(False);

  if NOT Assigned(NewCircle) then
    begin
      // Create a new TCircle component
      NewCircle := TCircle.Create(Self);

      // Copy the properties of the original TCircle component
      NewCircle.Position.X := Circle1.Position.X + 50;
      NewCircle.Position.Y := Circle1.Position.Y + 50;
      NewCircle.Width      := Circle1.Width;
      NewCircle.Height     := Circle1.Height;
      NewCircle.Fill.Color := Circle1.Fill.Color;

      //Criar o TImage dentro do NewCircle
      NewImagem:= TImage.Create(NewCircle);
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Eventos
      //NewImagem.OnClick      :=  NewImagemClick;
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      NewCircle.Parent := Self; //Cria no Formulário Principal
    end
    else //apagar o mesmo ou receber a copia da Matrix Atual
    begin
      //Criar o TImage dentro do NewCircle
      NewImagem.BitMap.Clear($000000);
      NewImagem:= TImage.Create(nil); //NewCircle - original
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Copy the events from the original TImage to the new TImage
      //NewImagem.OnClick      :=  NewImagemClick; //Ficou com o clique esquerdo sem função
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      //Exit;
    end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uPrincipal_Linha94_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmPrincipal.BtnCriarBaseClick(Sender: TObject);
var
  Connection: TFDConnection;
  Query: TFDQuery;
  ScriptFile: TStringList;
  OpenDialog: TOpenDialog;
  ScriptText: string;
  ScriptsPath: string;
  DatabaseName: string;
begin
  ScriptsPath := ExtractFilePath(Application.ExeName) + 'scripts\'; // Caminho para a pasta ""scripts"" da aplicação

  OpenDialog            := TOpenDialog.Create(nil);
  OpenDialog.Filter     := 'Arquivos SQL (*.sql)|*.sql'; // Filtro para selecionar apenas arquivos SQL
  OpenDialog.InitialDir := ScriptsPath; // Define a pasta inicial do OpenDialog como a pasta ""scripts"" da aplicação

  if OpenDialog.Execute then
  begin
    Connection := TFDConnection.Create(nil);
    try
      Connection.DriverName := 'MySQL'; // Driver do FireDAC para MySQL
      Connection.Params.Add('Server=localhost'); // Endereço do servidor MySQL
      Connection.Params.Add('User_Name=root'); // Usuário do MySQL
      Connection.Params.Add('Password=19741974'); // Senha do MySQL

      Connection.Connected := True;

      Query := TFDQuery.Create(nil);
      try
        Query.Connection := Connection;

        ScriptFile := TStringList.Create;
        try
          ScriptFile.LoadFromFile(OpenDialog.FileName); // Carrega o script do arquivo selecionado

          ScriptText := ScriptFile.Text; // Obtém o texto do script

          // Substitui o texto ""fulanorodas2"" pelo valor do TEdit (Edit1.Text)
          ScriptText := StringReplace(ScriptText, 'fulanorodas2', Edit1.Text, [rfReplaceAll]);

          Query.SQL.Text := ScriptText; // Define o script carregado como texto SQL do Query

          // Procura o nome do banco de dados dentro do script
          DatabaseName := ExtractDatabaseNameFromScript(ScriptText);

          if DatabaseName <> '' then
          begin
            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Criando o banco de dados: ' + DatabaseName);

            // Cria o banco de dados com o nome extraído
            Query.SQL.Text := 'CREATE SCHEMA IF NOT EXISTS `' + DatabaseName + '`';
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado com sucesso.');

            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Executando o restante do script...');

            // Executa o restante do script
            Query.SQL.Text := ScriptText;
            Query.ExecSQL;

            // Adicionar registro à tabela de login
            Memo1.Lines.Add('Adicionando o usuario admin à tabela de login...');

            Query.SQL.Text :=
              'INSERT INTO login (usuario, senha, email, tipo, ativo, idcliente) ' +
              'VALUES (:usuario, :senha, :email, :tipo, :ativo, :idcliente)';
            Query.Params.ParamByName('usuario').AsString    := 'admin';
            Query.Params.ParamByName('senha').AsString      := '123';
            Query.Params.ParamByName('email').AsString      := Edit2.Text;
            Query.Params.ParamByName('tipo').AsString       := 'A';
            Query.Params.ParamByName('ativo').AsString      := 'S';
            Query.Params.ParamByName('idcliente').AsInteger := 1;
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado e script executado com sucesso: ' + DatabaseName);

            //se é demo temos que adicionar a data do termino do demo na tabela registro
            if cbDemo.Checked then
            begin

              //id, id_chave, chave, data_inc (now) ,  data_exp now+30, contrasenha, ativado ='S' e serialhd
              Query.SQL.Clear;
              Query.SQL.Text :=
              'INSERT INTO registro (id, id_chave, data_inc, data_exp, contrasenha, ativo, serialhd ) ' +
              'VALUES (:id, :id_chave, :data_inc, :data_exp, :contrasenha, :ativo, :serialhd)';
              Query.Params.ParamByName('id').AsString          := '1';
              Query.Params.ParamByName('id_chave').AsString    := '1';
              Query.Params.ParamByName('data_inc').AsDate      := now;
              Query.Params.ParamByName('data_exp').AsDate      := now+30;
              Query.Params.ParamByName('contrasenha').AsString := 'Conect';
              Query.Params.ParamByName('ativo').AsString       := 'S';
              Query.Params.ParamByName('serialhd').AsString    := '0';
              Query.ExecSQL;

              Memo1.Lines.Add('Foi criada uma data de expiração ' + DateToStr(Now+30) + ' , pois o programa foi marcado como Demo');
            end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\URegistrar_Linha349_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmRegistrar.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     lblRazao.Text        := 'Razão Social / Nome';
     lblCnpj_cpf.Text     := 'CNPJ / CPF';
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Endereço';
     lblNumero.Text       := 'Número';
     LblComplemento.Text  := 'Complemento';
     LblBairro.Text       := 'Bairro';
     LblCidade.Text       := 'Cidade';
     LblResponnsavel.Text := 'Nome do responsável pelo registro';
     LblTelefone.Text     := 'Telefone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     BtnRegistrar.Text    := '&Registrar';
     LblTitulo.Text       := 'Registro do Wheel Pro';
     lblCEP.Text          := 'CEP';
     FrmRegistrar.Caption := 'Registro do Wheel Pro';
     TabItem1.Text        := 'Cadastro';
     TabItem2.Text        := 'Gerar senha';
     TabItem3.Text        := 'Enviar Serial';
     TabItem4.Text        := 'Inserir Contra-Senha';
     lblEntreseuCNPJ.Text := 'Entre seu CNPJ';
     lblSeuSerial.Text    := 'Seu Serial';
     lblNumserialHD.Text  := 'O número serial do seu HD é:';
     lblseuSErialBios.Text:= 'Seu Serial da Bios é :';
     lblContraSenha.Text  := 'Contra - Senha';
   end
   else if FLinguagem = 'Ingles' then
   begin
     lblRazao.Text        := 'Corporate Name / Name';
     lblCnpj_cpf.Text     := 'Tax Identification Number - TIN';
     lblIe.Visible        := False;
     EdtInscricaoEstadual.Visible:= False;
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Visible        := False;
     EdtIncricaoMunicipal.Visible:= False;
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Address';
     lblNumero.Text       := 'Number';
     LblComplemento.Text  := 'Complement';
     LblBairro.Text       := 'Neighborhood';
     LblCidade.Text       := 'City';
     LblResponnsavel.Text := 'Name of person responsible for registration';
     LblTelefone.Text     := 'Phone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     lblCEP.Text          := 'ZIP CODE';
     BtnRegistrar.Text    := '&Register';
     LblTitulo.Text       := 'Wheel Pro registration';
     FrmRegistrar.Caption := 'Wheel Pro registration';
     TabItem1.Text        := 'Register';
     TabItem2.Text        := 'Generate Password';
     TabItem3.Text        := 'Send Serial';
     TabItem4.Text        := 'Enter Password';
     lblEntreseuCNPJ.Text := 'Enter your EIN';
     lblSeuSerial.Text    := 'Your Serial';
     lblNumserialHD.Text  := 'Serial number of your HD is:';
     lblseuSErialBios.Text:= 'Your Bios Serial is:';
     lblContraSenha.Text  := 'Password';
   end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\uView.CadastroDePedidos_Linha208_Usodewith.pas;Uso de with;7;"with mtbItensPedido.FieldDefs do"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\View.CustomizedEventEditorForm_Linha135_Métodomuitolongo.pas;Método muito longo;7;"procedure TcxSchedulerEventEditorCustomized.btnOkClick(Sender: TObject);
var
  //EnviarConfirmacao: TModelAgendamento;
  LIdLocal: integer;
  qryIdLocal: TFDQuery;
  qryIdVeiculo:TFDQuery;
  qryFila: TFDQuery;
begin
  inherited;

  //localizar o veiculo pela placa no cadastro para pegar o idveiculo
  qryIdVeiculo:= TFDQuery.Create(nil);
  qryIdVeiculo.Connection:= DataModule3.FDConnection1;
  try
    qryIdVeiculo.SQL.Add('select idveiculos from veiculos');
    qryIdVeiculo.SQL.Add(' where placa = :placa');
    qryIdVeiculo.parambyname('placa').AsString := Event.GetCustomFieldValueByName('Placa'); //CBPlacasVeiculos.EditValue;//cxTextEdit1.editValue;
    qryIdVeiculo.open;

    if qryIdVeiculo.RecordCount > 0 then
    begin
      //Preenche parâmetros a serem enviados no e-mail
      LSubject    := teSubject.EditValue;
      LLocal      := Event.GetCustomFieldValueByName('Locais');// cxDBComboBoxLocais.;//cxDBComboBoxLocais.EditValue;     //como pegar o valor selecionado
      LPlaca      := Event.GetCustomFieldValueByName('Placa');//CBPlacasVeiculos.Text;//cxTextEdit1.EditValue;
      LNF         := cxTextEdit2.EditValue;
      LidVeiculo  := qryIdVeiculo.FieldByName('idveiculos').AsInteger;
      LNotaFiscal := cxTextEdit2.editValue;
      LTelefone   := cxTextEdit3.EditValue;
      LEmail      := cxTextEdit4.EditValue;
      LData       := deStart.EditingValue;
      LHora       := teStart.EditValue;
      LObs        := meMessage.EditValue;

      LMemo := TStringList.Create;
      LMemo.Add(LSubject);
      LMemo.Add('Local    :' + LLocal);
      LMemo.Add('Placa    :' + LPlaca);
      LMemo.Add('NF       :' + IntToStr(LNotaFiscal));
      LMemo.Add('Telefone :' + LTelefone);
      LMemo.Add('E-mail   :' + LEMail);
      LMemo.Add('Data     :' + DateTimeToStr(LData));
      LMemo.Add('Hora     :' + LHora);
      LMemo.Add('Obs.     :' + LObs);

    end
    else
    begin
      TThread.Synchronize(nil,
      procedure
      begin
        ShowMessage('Veiculo Não cadastrado!');
        //Inserir o veiculo na tabela veiculos
        Application.CreateForm(TFrmEntradaVeiculos, FrmEntradaVeiculos);
        FrmEntradaVeiculos.ShowModal;
      end);
    end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\View.GerenciaFila_Linha112_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmGerenciarFila.FormShow(Sender: TObject);
begin
  //Enviar os e-mails do agendamento - ver a Thread para essa parte
  TTHread.CreateAnonymousThread(procedure
  var
    qryEmviarEmail, qry2: TFDQuery;
    LEnviar : TModelAgendamento;
    LSubject: string;
    LEmail: String;
    LMemo: String;
    LDataEnvio: TDate;
    LPlaca: String;
    LLocal: String;
    LNF: Integer;
    LTelefone: String;
    LHora: TTime;
    LOBs: String;
  begin
    qryEmviarEmail:= TFDquery.Create(nil);
    qryEmviarEmail.Connection:= DataModule3.FDConnection1;
    try
      qryEmviarEmail.Close;
      qryEmviarEmail.SQL.Clear;
      qryEmviarEmail.SQL.Add('select * from email');
      qryEmviarEmail.sql.Add(' where enviado=''N'' ');
      qryEmviarEmail.Open;

      if qryEmviarEmail.RecordCount > 0 then
      begin
        LSubject   := qryEmviarEmail.FieldByName('subject').AsString;
        LEmail     := qryEmviarEmail.FieldByName('email').AsString;
        LMemo      := qryEmviarEmail.FieldByName('memo').AsString;
        LDataEnvio := qryEmviarEmail.FieldByName('dataenvio').AsDateTime;
        LPlaca     := qryEmviarEmail.FieldByName('placa').AsString;;
        LLocal     := qryEmviarEmail.FieldByName('local').AsString;;
        LNF        := qryEmviarEmail.FieldByName('nf').AsInteger;
        LTelefone  := qryEmviarEmail.FieldByName('telefone').AsString;
        LHora      := qryEmviarEmail.FieldByName('hora').AsVariant;
        LOBs       := qryEmviarEmail.FieldByName('memo').AsString;


        qryEmviarEmail.First;
        while not qryEmviarEmail.Eof do
        begin
          LEnviar := TModelAgendamento.Create;
          try
            if LEnviar.EnviarEmail2(LSubject, LPlaca, LNF, LLocal, LTelefone, LEmail, LDataEnvio, TimeToStr(LHora) , LObs) then
            begin
                LEnviar.EditarEmailEnviado;
                //update da tabela email o campo enviado tem que mudar para S
                qry2:= TFDquery.Create(nil);
                qry2.Connection:= DM.DataModule3.FDConnection1;
                try
                  qry2.SQL.clear;
                  qry2.SQL.Text :=
                  'UPDATE email  ' +
                  'SET enviado = ''S'' ' +  //Nono N veiculos não vão para o monitor
                  'WHERE idemail = :idemail';

                  qry2.ParamByName('idemail').AsInteger := qryEmviarEmail.FieldByName('idemail').AsInteger;

                  qry2.ExecSQL;
                finally
                  qry2.Free;
                end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\View.Principal_Linha133_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmPrincipal.CarregarEdits;
var
  IniFile: TIniFile;
  EncryptedServer    : string;
  DecryptedServer    : string;
  EncryptedPassword  : string;
  DecryptedPassword  : string;
  EncryptedDataBase  : string;
  DescryptedDataBase : string;
  EncryptedUserName  : string;
  DescryptedUserName : string;

  EncryptedServerLicencas    : string;
  DecryptedServerLicencas    : string;
  EncryptedPasswordLicencas  : string;
  DecryptedPasswordLicencas  : string;
  EncryptedDataBaseLicencas  : string;
  DescryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas  : string;
  DescryptedUserNameLicencas : string;

  Funcao: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Server.ini');
  Funcao  := TCriptografia.Create;
  try
    EncryptedServer   := IniFile.ReadString('Banco de Dados', 'Server', '');
    EncryptedPassword := IniFile.ReadString('Banco de Dados', 'Password', '');
    EncryptedDataBase := IniFile.ReadString('Banco de Dados', 'Database', '');
    EncryptedUserName := IniFile.ReadString('Banco de Dados', 'User_Name', '');

    DecryptedServer    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPassword  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBase := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserName := Funcao.DecryptString(EncryptedUserName, 123);

    EncryptedServerLicencas   := IniFile.ReadString('BancoLicencas', 'Server', '');
    EncryptedPasswordLicencas := IniFile.ReadString('BancoLicencas', 'Password', '');
    EncryptedDataBaseLicencas := IniFile.ReadString('BancoLicencas', 'Database', '');
    EncryptedUserNameLicencas := IniFile.ReadString('BancoLicencas', 'User_Name', '');

    DecryptedServerLicencas    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPasswordLicencas  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBaseLicencas := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserNameLicencas := Funcao.DecryptString(EncryptedUserName, 123);

    // Carregar Edits Aba Banco - GroupBox Banco
    EdtDadosBancoServer.Text   := DecryptedServer;
    EdtDadosBancoPassword.Text := DecryptedPassword;
    EdtDadosBancoDataBase.Text := DescryptedDataBase;
    EdtDadosBancoUserName.Text := DescryptedUserName;

    //Carregar Edits Aba Dados Encryptados - GroupBox Licenças
    EdtEncryptadosBancoLicencasServer.Text   := DecryptedServerLicencas;
    EdtEncryptadosBancoLicencasPassword.Text := DecryptedPasswordLicencas;
    EdtEncryptadosBancoLicencasDataBase.Text := DescryptedDataBaseLicencas;
    EdtEncryptadosBancoLicencasUserName.Text := DescryptedUserNameLicencas;

  finally
    IniFile.Free;
    Funcao.Free;
  end;
"
c:\fontes\CodeSmellDetector\Win32\Debug\relatorios\sugestoes\View.Principal_Linha75_Métodomuitolongo.pas;Método muito longo;7;"procedure TFrmPrincipal.BtnEncriptarClick(Sender: TObject);
var
  IniFile: TIniFile;
  EncryptedServer   : string;
  EncryptedPassword : string;
  EncryptedDataBase : string;
  EncryptedUserName : string;
  EncryptedServerLicencas   : string;
  EncryptedPasswordLicencas : string;
  EncryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas : string;
  Funcoes: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Server.ini');
  Funcoes:= TCriptografia.Create;
  try
     EncryptedServer   := Funcoes.EncryptString(EdtDadosBancoServer.Text, 123);
     EncryptedPassword := Funcoes.EncryptString(EdtDadosBancoPassword.Text, 123);
     EncryptedDataBase := Funcoes.EncryptString(EdtDadosBancoDataBase.Text,123);
     EncryptedUserName := Funcoes.EncryptString(EdtDadosBancoUserName.Text,123);

     EncryptedServerLicencas   := Funcoes.EncryptString(EdtDadosLicenasServer.Text,123);
     EncryptedPasswordLicencas := Funcoes.EncryptString(EdtDadosLicencasPassword.Text,123);
     EncryptedDataBaseLicencas := Funcoes.EncryptString(EdtDadosLicenasDataBase.Text,123);
     EncryptedUserNameLicencas := Funcoes.EncryptString(EdtDadosLicencasUserName.Text,123);

     //Escreve no arquivo ini
     IniFile.WriteString('Banco de Dados', 'Server', EncryptedServer);
     IniFile.WriteString('Banco de Dados', 'Password', EncryptedPassword);
     IniFile.WriteString('Banco de Dados', 'Database', EncryptedDataBase);
     IniFile.WriteString('Banco de Dados', 'User_Name', EncryptedUserName);

     IniFile.WriteString('BancoLicencas', 'Server',    EncryptedServerLicencas);
     IniFile.WriteString('BancoLicencas', 'Password',  EncryptedPasswordLicencas);
     IniFile.WriteString('BancoLicencas', 'Database',  EncryptedDataBaseLicencas);
     IniFile.WriteString('BancoLicencas', 'User_Name', EncryptedUserNameLicencas);

     //Preenche os Edits da Aba Encriptada - Banco
     EdtEncryptadosBancoServer.Text   := EncryptedServer;
     EdtEncryptadosBancoPassword.Text := EncryptedPassword;
     EdtEncryptadosBancoDataBase.Text := EncryptedDataBase;
     EdtEncryptadosBancoUserName.Text := EncryptedUserName;

     //Preenche os Edits da Aba Encriptada - Banco Licenças
     EdtEncryptadosBancoLicencasServer.Text   := EncryptedServerLicencas;
     EdtEncryptadosBancoLicencasPassword.Text := EncryptedPasswordLicencas;
     EdtEncryptadosBancoLicencasDataBase.Text := EncryptedDataBaseLicencas;
     EdtEncryptadosBancoLicencasUserName.Text := EncryptedUserNameLicencas;

     inifile.UpdateFile;

  finally
    IniFile.Free;
    Funcoes.Free;
  end;
"
c:\fontes\CRM\backup\UnitCondonimos.pas;Uso de with;134;"with D2Bridge.Items.add do"
c:\fontes\CRM\backup\UnitCondonimos.pas;Uso de with;136;"With Row.Items.Add do"
c:\fontes\CRM\backup\UnitCondonimos.pas;Uso de with;145;"With Row.Items.Add do"
c:\fontes\CRM\backup\UnitCondonimos.pas;Uso de with;148;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CRM\FSPix-VCL\uFrmPix.pas;Uso de with;121;"with D2Bridge.Items.add do"
c:\fontes\CRM\FSPix-VCL\uFrmPix.pas;Uso de with;123;"With row.Items.Add do"
c:\fontes\CRM\FSPix-VCL\uFrmPix.pas;Uso de with;137;"with row.Items.Add do"
c:\fontes\CRM\MainMenu\FSD.MainMenu.Wizard.pas;Método muito longo;36;"     function GetWindowsDefaultLanguage: string;

     procedure CreateMenu;

     procedure OnClickNovoWizard(Sender: TObject);
     procedure OnClickDocWiki(Sender: TObject);
     //procedure OnClickLoja(Sender: TObject);
     procedure OnClickMenuHistoryProjects(Sender: TObject);

     {Vagas}
     procedure OnClickVagasDelphi(Sender: TObject);

     {Utilitários}
     procedure OnClickSQLite(Sender: TObject);
     procedure OnClickMySQL(Sender: TObject);
     procedure OnClickForumDelphi(Sender: TObject);
     procedure OnClickPostGres(Sender: TObject);
     procedure OnClickPostman(Sender: TObject);
     procedure OnClickChatGPT(Sender: TObject);
     procedure OnClickAnalisarHints(Sender: TObject);
     procedure OnClickIBExpert(Sender: TObject);
     procedure OnClickSQLSErverManagerStudio(Sender: TObject);
     procedure OnClickJSONtoDelphiClass(Sender: TObject);
     procedure OnClickJSONFormater(Sender: TObject);
     procedure OnClickIconFinder(Sender: TObject);
     procedure OnClickIcons8(Sender: TObject);
     procedure OnClickAcoplamentosUnits(Sender: TObject);
     procedure OnClickimGetIt(Sender: TObject);


     {Cursos}
     procedure OnClickNutror(Sender: TOBject);
     procedure OnClickNovoEAD(Sender: TObject);
     procedure OnClickDevPoint(Sender: TObject);
     procedure OnclickGitHubBozon(Sender: TObject);
     procedure OnclickPostGresBozon(Sender: TObject);

     {YouTube}
     procedure OnClickEmbarcaderoBrasil(Sender: TObject);
     procedure OnClickEmbarcadero(Sender: TObject);
     procedure onClickYouTubeConectSolutions(Sender: Tobject);
     procedure onClickVoiceEnabledApp(Sender: TObject);
     procedure OnClickGitHubCurso(Sender: TObject);
     procedure OnClickCursoApiREst(Sender: TObject);
     procedure OnClickOpenToosAPI(Sender: TObject);
     procedure OnClickBossSSH(Sender: TObject);
     procedure OnClickDelphicon2023_day1(Sender: TObject);
     procedure OnClickDelphicon2023_day2(Sender: TObject);
     procedure OnClickDelphicon2023_day3(Sender: TObject);
     procedure OnClickmqfb(Sender: TObject);
     procedure OnClickChapmanWorld(Sender: TObject);

     procedure OnClickOTA(Sender: TObject);
     procedure OnclickDelphiBasics(Sender: TObject);

     procedure OnClickHorseBasicAuth(Sender: TObject);
     procedure OnClickHandleException(Sender: TObject);
     procedure OnClickHorseJWT(Sender: TObject);

     {Git Hubs}
     procedure OnClickSynopseSynPDF(Sender: TObject);
     procedure OnClickNewAudio(Sender: TObject);
     procedure OnClickRedisClient(Sender: TObject);
     procedure OnClickFireBase4Delphi(Sender: TObject);
     procedure OnClickTurboPackVCL(Sender: TObject);
     procedure OnClickFortesReportCE(Sender: TObject);
     procedure OnClickDelphiJose(Sebder: TObject);
     procedure OnClickXPAD(Sender: TObject);
     procedure OnClickHorse(Sender: TObject);
     procedure OnClickSimpleORM(Sender: TObject);
     procedure OnClickHorseETag(Sender: TObject);
     procedure OnClickDelphiMVCFrameWork(Sender: TObject);
     procedure OnclickJEDIJCL(Sender: TObject);
     procedure OnclickJEDIJVCL(Sender: TObject);
     procedure OnclickJediInc(Sender: TObject);
     procedure OnclickDelphiMessageBus(Sender: TObject);
     procedure OnclickDelphiDocker(Sender: TObject);
     procedure OnclickEmbarcaderoGitHub(Sender: TObject);
     procedure OnclickChromiumGitHub(Sender: TObject);
     procedure OnclickSkia4Delphi(Sender: TObject);
     procedure OnclickUserControl(Sender: TObject);
     procedure OnclickAeggys(Sender: TObject);

     {Blogs}
     procedure OnClickBlogConectSolutions(Sender: TObject);
     procedure OnClickBlogAndreCelestino(Sender: TObject);
     procedure OnClickBlogEmbarcadero(Sender: TObject);
     procedure OnClickBlogMarcoCantu(Sender: TObject);
     procedure OnClickBlogZettaOmmnis(Sender: TObject);
     procedure OnClickBlogChapmanWorld(Sender: TObject);
     procedure OnClickBlogRoadToDelphi(Sender: TObject);
     procedure OnClickBlogLandgrafDev(Sender: TObject);
     procedure OnClickBlogStephenBalls(Sender: TObject);
     procedure OnClickBlogKonopka(Sender: TObject);
     procedure OnClickBlogAndys(Sender: TObject);

     {Ferramentas para Download}
     procedure OnClickFerramentasIbExpert(Sender: TObject);
     procedure OnClickFerramentasFirebird(Sender: TObject);
     procedure OnClickFerramentasMySQL(Sender: TObject);
     procedure OnClickFerramentasSQLiteExpert(Sender: TObject);
     procedure OnClickFerramentasInnoSetup(Sender: TObject);
     procedure OnClickFerramentasCNPack(Sender: TObject);
     procedure OnClickFerramentasInnoScriptStudio(Sender: TObject);
     procedure OnClickFerramentasInsomnia(Sender: TObject);
     procedure OnClickFerramentasNavicat(Sender: TObject);
     procedure OnClickFerramentasIdeFixPack(Sender: TObject);
     procedure OnClickFerramentasToolsFree(Sender: TObject);
     procedure OnClickFerramentasSiteGitIgnore(Sender: TObject);
     procedure OnClickFerramentasSiteRegexLib(Sender: TObject);
     procedure OnClickFerramentasGoogleMeeting(Sender: TObject);
     procedure OnClickFaceBookVideo(Sender: TObject);
     procedure OnClickLinkedinVideo(Sender: TObject);


     {Grupos de Facebook}
     procedure OnClickFacebookDelphiTips(Sender: TObject);
     procedure OnClickFacebookLiteratudaDelphi(Sender: TObject);

     {Livros}
     procedure OnClickLivroDelphiAndroid(Sender: TObject);
     procedure OnClickLivroObjectPascal(Sender: TObject);



     function CreateSubMenu(AParent: TMenuItem;
                            ACaption: String;
                            AName: String;
                            AOnClick: TNotifyEvent;
                            AImageIndex: Integer = -1): TMenuItem;

     procedure AddImageToImageList;
     procedure OnClickYouTube(Sender: TObject);
     procedure VoiceEnabledApp(Sender: TObject);



  protected
     function GetIDString: string;
     function GetName: string;
     function GetState: TWizardState;


    { Launh the AddIn }
    procedure Execute;

  public

  constructor create;
end;
"
c:\fontes\CRM\MainMenu\FSD.MainMenu.Wizard.pas;Método muito longo;282;"procedure TFSDMainMenuWizard.CreateMenu;
var
  menu: TMainMenu;
  menuName: string;
  itemFormacao: TMenuItem;
  itemUtilitarios: TMenuItem;
  itemCursos: TMenuItem;
  itemGitHubs: TMenuItem;
  itemYoutube: TMenuItem;
  itemAPI: TMenuItem;
  itemBlogs: TMenuItem;
  itemGruposFaceBook: TMenuItem;
  itemFerramentas: TMenuItem;
  itemLivros: TMenuItem;
  itemLoja: TMenuItem;
  itemVagas: TMenuItem;

  Lingua: string;
begin
  menu := (BorlandIDEServices as INTAServices).MainMenu;
  menuName := 'Informacao';

  if menu.FindComponent(menuName) <> nil then
    menu.FindComponent(menuName).Free;

  itemFormacao := TMenuItem.Create(menu);
  itemFormacao.Name := menuName;
  itemFormacao.Caption := 'Estagiário Eletrônico';

  menu.Items.Add(itemFormacao);

 // CreateSubMenu(itemFormacao, 'Novo Wirzard', 'imNovoWizard', OnClickNovoWizard);
  CreateSubMenu(itemFormacao, 'Histórico Projetos', 'imHistoricoProjetos', OnclickMenuHistoryProjects);
  CreateSubMenu(itemFormacao, 'Embarcadero Doc Wiki', 'imDocWiki', OnClickDocWiki);
  CreateSubMenu(itemFormacao, 'Transmitir via Google Meeting', 'imFerramentasGoogleMeeeting', OnClickFerramentasGoogleMeeting);
  CreateSubMenu(itemFormacao, 'Transmitir via FaceBook', 'imFaceBookVideo', OnClickFaceBookVideo);
  CreateSubMenu(itemFormacao, 'Transmitir via Linkedin', 'imLinkedinVideo', OnClickLinkedinVideo);


  //CreateSuBMenu(itemFormacao, 'Loja', 'imLoja', OnClickLoja);

  {Livros} //Recurso de Linguagem ainda em testes.
  FLingua:= GetWindowsDefaultLanguage;
  if FLingua <> 'Português(Brasil)' then
  begin
    itemLivros := CreateSubMenu(itemFormacao, 'Livros de Delphi (Compras)', 'imLivros', nil);
    CreateSubMenu(itemLivros, 'Delphi para Android e iOS: Desenvolvendo Aplicativos Móveis', 'imLivrosDelphiAndroid', OnClickLivroDelphiAndroid);
    CreateSubMenu(itemLivros, 'Object Pascal Para Delphi', 'imLivrosObjectPascal', OnClickLivroObjectPascal);
  end
  else
  begin
    itemLivros := CreateSubMenu(itemFormacao, 'Books Delphi (Buy)', 'imLivros', nil);
    CreateSubMenu(itemLivros, 'Delphi for Android and iOS: Desenvolvendo Aplicativos Móveis', 'imLivrosDelphiAndroid', OnClickLivroDelphiAndroid);
    CreateSubMenu(itemLivros, 'Object Pascal for Delphi', 'imLivrosObjectPascal', OnClickLivroObjectPascal);
  end;
"
c:\fontes\CRM\NewProject\FSD.NewProject.NewFormMain.Source.pas;Uso de with;38;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewFormMain.SourceFile.pas;Uso de with;50;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewFormMain.SourceFile.pas;Uso de with;115;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Behaviors.pas;Uso de with;27;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Behaviors.pas;Método muito longo;10;"procedure CreateUnitBehaviors(ProjectPath, NameSpace : string);


implementation

procedure CreateUnitBehaviors(ProjectPath, NameSpace : string);
var
 unitName: string;
 unitPath: string;
 unitFileName: string;
begin
  unitPath := ProjectPath  + 'src\Model\Behaviors\';
  unitName := NameSpace + '.Model.Behaviors';
  unitFileName := unitPath + unitName + '.pas';

  ForceDirectories(unitPath);

  with TStringList.Create do
  try
    Add('unit %0:s.Model.Behaviors;																');
    Add('                                                                                   ');
    Add('interface                                                                          ');
    Add('                                                                                   ');
    Add('uses                                                                               ');
    Add('  System.SysUtils,                                                                 ');
    Add('  System.UITypes,                                                                  ');
    Add('  Vcl.Dialogs,                                                                     ');
    Add('  Vcl.Forms;                                                                       ');
    Add('                                                                                   ');
    Add('type T%0:sBehaviors = class                                                        ');
    Add('                                                                                   ');
    Add('  private                                                                          ');
    Add('    procedure BehaviorException(Sender: TObject; E: Exception);                    ');
    Add('                                                                                   ');
    Add('  public                                                                           ');
    Add('    constructor create;                                                            ');
    Add('    destructor Destroy; override;                                                  ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('var                                                                                ');
    Add('  ModelBehaviors : T%0:sBehaviors;                                                 ');
    Add('                                                                                   ');
    Add('implementation                                                                     ');
    Add('                                                                                   ');
    Add('{ T%0:sBehaviors }                                                                 ');
    Add('                                                                                   ');
    Add('procedure T%0:sBehaviors.BehaviorException(Sender: TObject; E: Exception);         ');
    Add('begin                                                                              ');
    Add('  MessageDlg(E.Message, mtWarning, [mbOK], 0);                                     ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('constructor T%0:sBehaviors.create;                                                 ');
    Add('begin                                                                              ');
    Add('  ReportMemoryLeaksOnShutdown := True;                                             ');
    Add('  Application.OnException := BehaviorException;                                    ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('destructor T%0:sBehaviors.Destroy;                                                 ');
    Add('begin                                                                              ');
    Add('                                                                                   ');
    Add('  inherited;                                                                       ');
    Add('end;                                                                               ');
    Add('                                                                                   ');
    Add('initialization                                                                     ');
    Add('  ModelBehaviors := T%0:sBehaviors.Create;                                         ');
    Add('                                                                                   ');
    Add('finalization                                                                       ');
    Add('  ModelBehaviors.DisposeOf;                                                        ');
    Add('                                                                                   ');
    Add('end.                                                                               ');

    Text := Format(Text, [Namespace, TGuid.NewGuid.ToString]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

  finally
    Free;
  end;
"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionFiredac.pas;Uso de with;26;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionFiredac.pas;Uso de with;154;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionFiredac.pas;Método muito longo;10;"procedure CreateUnitComponentConnectionFiredac(ProjectPath, Namespace: string);

implementation

procedure CreateUnitComponentConnectionFiredac(ProjectPath, Namespace: string);
var
  unitName: string;
  unitPath: string;
  unitFileName: string;
begin
  unitPath := ProjectPath + '\src\Model\Components\Connection\';
  unitName := NameSpace + '.Components.Connection.Firedac';
  unitFileName := unitPath + unitName + '.pas';

  ForceDirectories(unitPath);

  with TStringList.Create do
  try
    Add('unit %0:s.Components.Connection.Firedac;																							');
    Add('                                                                                                                                   ');
    Add('interface                                                                                                                          ');
    Add('                                                                                                                                   ');
    Add('uses                                                                                                                               ');
    Add('  %0:s.Components.Connection.Interfaces,                                                                                           ');
    Add('  FireDAC.Stan.Intf,                                                                                                               ');
    Add('  FireDAC.Stan.Option,                                                                                                             ');
    Add('  FireDAC.Stan.Error,                                                                                                              ');
    Add('  FireDAC.UI.Intf,                                                                                                                 ');
    Add('  FireDAC.Phys.Intf,                                                                                                               ');
    Add('  FireDAC.Stan.Def,                                                                                                                ');
    Add('  FireDAC.Stan.Pool,                                                                                                               ');
    Add('  FireDAC.Stan.Async,                                                                                                              ');
    Add('  FireDAC.Phys,                                                                                                                    ');
    Add('  FireDAC.Phys.SQLite,                                                                                                             ');
    Add('  FireDAC.Phys.SQLiteDef,                                                                                                          ');
    Add('  FireDAC.Stan.ExprFuncs,                                                                                                          ');
    Add('  FireDAC.VCLUI.Wait,                                                                                                              ');
    Add('  FireDAC.DApt,                                                                                                                    ');
    Add('  Data.DB,                                                                                                                         ');
    Add('  FireDAC.Comp.Client,                                                                                                             ');
    Add('  FireDAC.Stan.Param,                                                                                                              ');
    Add('  System.SysUtils,                                                                                                                 ');
    Add('  System.Classes;                                                                                                                  ');
    Add('                                                                                                                                   ');
    Add('type T%0:sComponentsConnectionFiredac = class(TInterfacedObject, I%0:sComponentsConnection)                                       ');
    Add('  private                                                                                                                          ');
    Add('    FConnection : TFDConnection;                                                                                                   ');
    Add('    FQuery : TFDQuery;                                                                                                             ');
    Add('  public                                                                                                                           ');
    Add('    constructor Create;                                                                                                            ');
    Add('    destructor Destroy; override;                                                                                                  ');
    Add('    class function New : I%0:sComponentsConnection;                                                                                ');
    Add('    function Active ( aValue : Boolean ) : I%0:sComponentsConnection;                                                              ');
    Add('    function AddParam ( aParam : String; aValue : Variant ) : I%0:sComponentsConnection; overload;                                 ');
    Add('    function AddParam ( aParam : String; aValue : TPersistent ) : I%0:sComponentsConnection; overload;                             ');
    Add('    function DataSet : TDataSet;                                                                                                   ');
    Add('    function ExecSQL : I%0:sComponentsConnection;                                                                                  ');
    Add('    function Open : I%0:sComponentsConnection;                                                                                     ');
    Add('    function SQL ( aValue : String ) : I%0:sComponentsConnection;                                                                  ');
    Add('    function SQLClear : I%0:sComponentsConnection;                                                                                 ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('implementation                                                                                                                     ');
    Add('                                                                                                                                   ');
    Add('{ T%0:sComponentsConnectionFiredac }                                                                                              ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.Active(aValue: Boolean): I%0:sComponentsConnection;                                     ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.Active := aValue;                                                                                                         ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.AddParam(aParam: String; aValue: Variant): I%0:sComponentsConnection;                   ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ParamByName(aParam).Value := aValue;                                                                                      ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.AddParam(aParam: String; aValue: TPersistent): I%0:sComponentsConnection;               ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ParamByName(aParam).Assign(aValue);                                                                                       ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('constructor T%0:sComponentsConnectionFiredac.Create;                                                                              ');
    Add('begin                                                                                                                              ');
    Add('  FConnection := TFDConnection.Create(nil);                                                                                        ');
    Add('  FQuery := TFDQuery.Create(nil);                                                                                                  ');
    Add('  FQuery.Connection := FConnection;                                                                                                ');
    Add('  FConnection.Params.DriverID := ''SQLite'';                                                                                         ');
    Add('  FConnection.Params.Database := ExtractFilePath(GetModuleName(HInstance)) + ''%0:s.db3'';                                           ');
    Add('  FConnection.Params.Add(''LockingMode=Normal'');                                                                                    ');
    Add('  FConnection.Connected;                                                                                                           ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.DataSet: TDataSet;                                                                      ');
    Add('begin                                                                                                                              ');
    Add('  Result := FQuery;                                                                                                                ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('destructor T%0:sComponentsConnectionFiredac.Destroy;                                                                              ');
    Add('begin                                                                                                                              ');
    Add('  FQuery.DisposeOf;                                                                                                                ');
    Add('  FConnection.DisposeOf;                                                                                                           ');
    Add('  inherited;                                                                                                                       ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.ExecSQL: I%0:sComponentsConnection;                                                     ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.ExecSQL;                                                                                                                  ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('class function T%0:sComponentsConnectionFiredac.New: I%0:sComponentsConnection;                                                   ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self.Create;                                                                                                           ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.Open: I%0:sComponentsConnection;                                                        ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.Open;                                                                                                                     ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.SQL(aValue: String): I%0:sComponentsConnection;                                         ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.SQL.Add(aValue);                                                                                                          ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('function T%0:sComponentsConnectionFiredac.SQLClear: I%0:sComponentsConnection;                                                    ');
    Add('begin                                                                                                                              ');
    Add('  Result := Self;                                                                                                                  ');
    Add('  FQuery.SQL.Clear;                                                                                                                ');
    Add('end;                                                                                                                               ');
    Add('                                                                                                                                   ');
    Add('end.                                                                                                                               ');

    Text := Format(Text, [Namespace]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

    // Criar Arquivo de Banco SQLite
    with TStringList.Create do
    try
      SaveToFile(ProjectPath + Namespace + '.db3');
    finally
      Free;
    end;
"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionInterfaces.pas;Variável global;16;"var"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionInterfaces.pas;Uso de with;27;"with TStringList.Create do"
c:\fontes\CRM\NewProject\FSD.NewProject.NewUnit.Component.ConnectionInterfaces.pas;Método muito longo;10;"procedure CreateUnitComponentConnectionInterfaces(ProjectPath, NameSpace: string);

implementation


procedure CreateUnitComponentConnectionInterfaces(ProjectPath, NameSpace: string);
var
  unitName: string;
  unitPath: string;
  unitFileName: string;
begin
   unitPath := ProjectPath + '\src\Model\Components\Connection\';
   unitName := NameSpace + '.Components.Connection.Interfaces';
   unitFileName := unitPath + unitName + '.pas';

   ForceDirectories(unitPath);

   with TStringList.Create do
  try
    Add('unit %0:s.Components.Connection.Interfaces;');
    Add('');
    Add('interface');
    Add('');
    Add('uses');
    Add('  Data.DB, ');
    Add('  System.SysUtils,');
    Add('  System.Classes;');
    Add('');
    Add('type');
    Add('  I%0:sComponentsConnection = interface');
    Add('    [''%1:s'']');
    Add('    function Active ( aValue : Boolean ) : IEstoqueComponentsConnection;');
    Add('    function AddParam ( aParam : String; aValue : Variant ) : IEstoqueComponentsConnection; overload;');
    Add('    function AddParam ( aParam : String; aValue : TPersistent ) : IEstoqueComponentsConnection; overload;');
    Add('    function DataSet : TDataSet;');
    Add('    function ExecSQL : IEstoqueComponentsConnection;');
    Add('    function Open : IEstoqueComponentsConnection;');
    Add('    function SQL ( aValue : String ) : IEstoqueComponentsConnection;');
    Add('    function SQLClear : IEstoqueComponentsConnection;');
    Add('  end;');
    Add('');
    Add('implementation');
    Add('');
    Add('end.');

    Text := Format(Text, [Namespace, TGuid.NewGuid.ToString]);
    SaveToFile(unitFileName);

    GetActiveProject.AddFile(unitFileName, True);

  finally
    Free;
  end;
"
c:\fontes\CRM\UnitCondominio.pas;Uso de with;164;"with D2Bridge.Items.add do"
c:\fontes\CRM\UnitCondominio.pas;Uso de with;166;"With Row.Items.Add do"
c:\fontes\CRM\UnitCondominio.pas;Uso de with;176;"With Row.Items.Add do"
c:\fontes\CRM\UnitCondominio.pas;Uso de with;179;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CRM\UnitCondominio.pas;Uso de with;182;"With Popup('PopupPix', 'Pagamento Pix').Items.Add do"
c:\fontes\CRM\UnitCondominioCad.pas;Uso de with;100;"with D2Bridge.Items.add do"
c:\fontes\CRM\UnitCondominioCad.pas;Uso de with;102;"With row.Items.Add do"
c:\fontes\CRM\UnitCondominioCad.pas;Uso de with;115;"with row.Items.Add do"
c:\fontes\CRM\UnitCondonimos.pas;Uso de with;136;"with D2Bridge.Items.add do"
c:\fontes\CRM\UnitCondonimos.pas;Uso de with;138;"With Row.Items.Add do"
c:\fontes\CRM\UnitCondonimos.pas;Uso de with;147;"With Row.Items.Add do"
c:\fontes\CRM\UnitCondonimos.pas;Uso de with;150;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CRM\UnitCondonimosCad.pas;Uso de with;100;"with D2Bridge.Items.add do"
c:\fontes\CRM\UnitCondonimosCad.pas;Uso de with;102;"With row.Items.Add do"
c:\fontes\CRM\UnitCondonimosCad.pas;Uso de with;115;"with row.Items.Add do"
c:\fontes\CRM\UnitPrincipal.pas;Uso de with;121;"with D2Bridge.Items.add do"
c:\fontes\CRM\UnitPrincipal.pas;Uso de with;163;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CRM\Unit_D2Bridge_Server_Console.pas;Método muito longo;220;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TCRMWebAppGlobal.Create(TApplication.Create(nil));
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'FZ Admin';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TFrmPrincipal;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Let?s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\CRM2\crm-master\UnitCondominio.pas;Uso de with;119;"with D2Bridge.Items.add do"
c:\fontes\CRM2\crm-master\UnitCondominio.pas;Uso de with;121;"With Row.Items.Add do"
c:\fontes\CRM2\crm-master\UnitCondominio.pas;Uso de with;130;"With Row.Items.Add do"
c:\fontes\CRM2\crm-master\UnitCondominio.pas;Uso de with;133;"With Popup('PopupCondominioCad', 'Cadastro de Condominios').Items.Add do"
c:\fontes\CRM2\crm-master\UnitCondominioCad.pas;Uso de with;81;"with D2Bridge.Items.add do"
c:\fontes\CRM2\crm-master\UnitCondominioCad.pas;Uso de with;83;"With row.Items.Add do"
c:\fontes\CRM2\crm-master\UnitCondominioCad.pas;Uso de with;92;"with row.Items.Add do"
c:\fontes\CRM2\crm-master\UnitPrincipal.pas;Uso de with;96;"with D2Bridge.Items.add do"
c:\fontes\CRM2\crm-master\UnitPrincipal.pas;Uso de with;120;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\CRM2\crm-master\Unit_D2Bridge_Server_Console.pas;Método muito longo;220;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TCRMWebAppGlobal.Create(TApplication.Create(nil));
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'CRM';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TFrmPrincipal;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Let?s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\Curso Horse\modules\horse\src\Horse.Core.pas;Método muito longo;49;"    class function TrimPath(const APath: string): string;
    class function RegisterRoute(const AHTTPType: TMethodType; const APath: string; const ACallback: THorseCallback): THorseCore;
    class var FDefaultHorse: THorseCore;

    function InternalRoute(const APath: string): IHorseCoreRoute<THorseCore>;
    function InternalGroup: IHorseCoreGroup<THorseCore>;
    function InternalGetRoutes: THorseRouterTree;
    procedure InternalSetRoutes(const AValue: THorseRouterTree);
    class function GetRoutes: THorseRouterTree; static;
    class procedure SetRoutes(const AValue: THorseRouterTree); static;
    class function MakeHorseModule: THorseModule;

    class function GetCallback(const ACallbackRequest: THorseCallbackRequestResponse): THorseCallback; overload;
    class function GetCallback(const ACallbackRequest: THorseCallbackRequest): THorseCallback; overload;
{$IFNDEF FPC}
    class function GetCallback(const ACallbackResponse: THorseCallbackResponse): THorseCallback; overload;
{$ENDIF}
    class function GetCallbacks: TArray<THorseCallback>;
    class function RegisterCallbacksRoute(const AMethod: TMethodType; const APath: string): THorseCore;
  public
    constructor Create; virtual;
    class function ToModule: THorseModule;
    class destructor UnInitialize; {$IFNDEF FPC}virtual; {$ENDIF}
    class function AddCallback(const ACallback: THorseCallback): THorseCore;
    class function AddCallbacks(const ACallbacks: TArray<THorseCallback>): THorseCore;

    class function Group: IHorseCoreGroup<THorseCore>;
    class function Route(const APath: string): IHorseCoreRoute<THorseCore>;

    class function Use(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Use(const ACallback: THorseCallback): THorseCore; overload;
    class function Use(const APath: string; const ACallbacks: array of THorseCallback): THorseCore; overload;
    class function Use(const ACallbacks: array of THorseCallback): THorseCore; overload;

    class function All(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function All(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function All(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function All(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Get(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Get(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Get(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Get(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Put(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Put(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Put(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Put(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IF (DEFINED(FPC) or (CompilerVersion > 27.0))}
    class function Patch(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Patch(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Patch(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Patch(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IFEND}
    class function Head(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Head(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Head(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Head(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
    class function Post(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Post(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Post(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Post(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IF (defined(fpc) or (CompilerVersion > 27.0))}
    class function Delete(const APath: string; const ACallback: THorseCallback): THorseCore; overload;
    class function Delete(const APath: string; const ACallback: THorseCallbackRequestResponse): THorseCore; overload;
    class function Delete(const APath: string; const ACallback: THorseCallbackRequest): THorseCore; overload;
{$IFNDEF FPC}
    class function Delete(const APath: string; const ACallback: THorseCallbackResponse): THorseCore; overload;
{$IFEND}
{$IFEND}
    class property Routes: THorseRouterTree read GetRoutes write SetRoutes;
    class function GetInstance: THorseCore;
    class function Version: string;
  end;
"
c:\fontes\Curso Horse\modules\horse\src\Horse.Mime.pas;Método muito longo;153;"procedure THorseMimeTypesExt.InitializeFileType;
begin
  {$REGION 'MIME CONST'}
  FFileType.AddOrSetValue('ez', 'application/andrew-inset');
  FFileType.AddOrSetValue('aw', 'application/applixware');
  FFileType.AddOrSetValue('atom', 'application/atom+xml');
  FFileType.AddOrSetValue('atomcat', 'application/atomcat+xml');
  FFileType.AddOrSetValue('atomsvc', 'application/atomsvc+xml');
  FFileType.AddOrSetValue('bson', 'application/bson');
  FFileType.AddOrSetValue('ccxml', 'application/ccxml+xml');
  FFileType.AddOrSetValue('cdmia', 'application/cdmi-capability');
  FFileType.AddOrSetValue('cdmic', 'application/cdmi-container');
  FFileType.AddOrSetValue('cdmid', 'application/cdmi-domain');
  FFileType.AddOrSetValue('cdmio', 'application/cdmi-object');
  FFileType.AddOrSetValue('cdmiq', 'application/cdmi-queue');
  FFileType.AddOrSetValue('cu', 'application/cu-seeme');
  FFileType.AddOrSetValue('davmount', 'application/davmount+xml');
  FFileType.AddOrSetValue('dbk', 'application/docbook+xml');
  FFileType.AddOrSetValue('dssc', 'application/dssc+der');
  FFileType.AddOrSetValue('xdssc', 'application/dssc+xml');
  FFileType.AddOrSetValue('ecma', 'application/ecmascript');
  FFileType.AddOrSetValue('emma', 'application/emma+xml');
  FFileType.AddOrSetValue('epub', 'application/epub+zip');
  FFileType.AddOrSetValue('exi', 'application/exi');
  FFileType.AddOrSetValue('pfr', 'application/font-tdpfr');
  FFileType.AddOrSetValue('gml', 'application/gml+xml');
  FFileType.AddOrSetValue('gpx', 'application/gpx+xml');
  FFileType.AddOrSetValue('gxf', 'application/gxf');
  FFileType.AddOrSetValue('stk', 'application/hyperstudio');
  FFileType.AddOrSetValue('ink', 'application/inkml+xml');
  FFileType.AddOrSetValue('inkml', 'application/inkml+xml');
  FFileType.AddOrSetValue('ipfix', 'application/ipfix');
  FFileType.AddOrSetValue('jar', 'application/java-archive');
  FFileType.AddOrSetValue('ser', 'application/java-serialized-object');
  FFileType.AddOrSetValue('class', 'application/java-vm');
  FFileType.AddOrSetValue('js', 'application/javascript');
  FFileType.AddOrSetValue('json', 'application/json');
  FFileType.AddOrSetValue('map', 'application/json');
  FFileType.AddOrSetValue('jsonml', 'application/jsonml+json');
  FFileType.AddOrSetValue('lostxml', 'application/lost+xml');
  FFileType.AddOrSetValue('hqx', 'application/mac-binhex40');
  FFileType.AddOrSetValue('cpt', 'application/mac-compactpro');
  FFileType.AddOrSetValue('mads', 'application/mads+xml');
  FFileType.AddOrSetValue('mrc', 'application/marc');
  FFileType.AddOrSetValue('mrcx', 'application/marcxml+xml');
  FFileType.AddOrSetValue('ma', 'application/mathematica');
  FFileType.AddOrSetValue('nb', 'application/mathematica');
  FFileType.AddOrSetValue('mb', 'application/mathematica');
  FFileType.AddOrSetValue('mathml', 'application/mathml+xml');
  FFileType.AddOrSetValue('mbox', 'application/mbox');
  FFileType.AddOrSetValue('mscml', 'application/mediaservercontrol+xml');
  FFileType.AddOrSetValue('metalink', 'application/metalink+xml');
  FFileType.AddOrSetValue('meta4', 'application/metalink4+xml');
  FFileType.AddOrSetValue('mets', 'application/mets+xml');
  FFileType.AddOrSetValue('mods', 'application/mods+xml');
  FFileType.AddOrSetValue('m21', 'application/mp21');
  FFileType.AddOrSetValue('mp21', 'application/mp21');
  FFileType.AddOrSetValue('mp4s', 'application/mp4');
  FFileType.AddOrSetValue('doc', 'application/msword');
  FFileType.AddOrSetValue('dot', 'application/msword');
  FFileType.AddOrSetValue('mxf', 'application/mxf');
  FFileType.AddOrSetValue('bin', 'application/octet-stream');
  FFileType.AddOrSetValue('bpk', 'application/octet-stream');
  FFileType.AddOrSetValue('class', 'application/octet-stream');
  FFileType.AddOrSetValue('deploy', 'application/octet-stream');
  FFileType.AddOrSetValue('dist', 'application/octet-stream');
  FFileType.AddOrSetValue('distz', 'application/octet-stream');
  FFileType.AddOrSetValue('dmg', 'application/octet-stream');
  FFileType.AddOrSetValue('dms', 'application/octet-stream');
  FFileType.AddOrSetValue('dump', 'application/octet-stream');
  FFileType.AddOrSetValue('elc', 'application/octet-stream');
  FFileType.AddOrSetValue('iso', 'application/octet-stream');
  FFileType.AddOrSetValue('lha', 'application/octet-stream');
  FFileType.AddOrSetValue('lrf', 'application/octet-stream');
  FFileType.AddOrSetValue('lzh', 'application/octet-stream');
  FFileType.AddOrSetValue('mar', 'application/octet-stream');
  FFileType.AddOrSetValue('pkg', 'application/octet-stream');
  FFileType.AddOrSetValue('so', 'application/octet-stream');
  FFileType.AddOrSetValue('oda', 'application/oda');
  FFileType.AddOrSetValue('opf', 'application/oebps-package+xml');
  FFileType.AddOrSetValue('ogx', 'application/ogg');
  FFileType.AddOrSetValue('omdoc', 'application/omdoc+xml');
  FFileType.AddOrSetValue('onetoc', 'application/onenote');
  FFileType.AddOrSetValue('onetoc2', 'application/onenote');
  FFileType.AddOrSetValue('onetmp', 'application/onenote');
  FFileType.AddOrSetValue('onepkg', 'application/onenote');
  FFileType.AddOrSetValue('oxps', 'application/oxps');
  FFileType.AddOrSetValue('xer', 'application/patch-ops-error+xml');
  FFileType.AddOrSetValue('pdf', 'application/pdf');
  FFileType.AddOrSetValue('pgp', 'application/pgp-encrypted');
  FFileType.AddOrSetValue('asc', 'application/pgp-signature');
  FFileType.AddOrSetValue('sig', 'application/pgp-signature');
  FFileType.AddOrSetValue('prf', 'application/pics-rules');
  FFileType.AddOrSetValue('p10', 'application/pkcs10');
  FFileType.AddOrSetValue('p7m', 'application/pkcs7-mime');
  FFileType.AddOrSetValue('p7c', 'application/pkcs7-mime');
  FFileType.AddOrSetValue('p7s', 'application/pkcs7-signature');
  FFileType.AddOrSetValue('p8', 'application/pkcs8');
  FFileType.AddOrSetValue('ac', 'application/pkix-attr-cert');
  FFileType.AddOrSetValue('cer', 'application/pkix-cert');
  FFileType.AddOrSetValue('crl', 'application/pkix-crl');
  FFileType.AddOrSetValue('pkipath', 'application/pkix-pkipath');
  FFileType.AddOrSetValue('pki', 'application/pkixcmp');
  FFileType.AddOrSetValue('pls', 'application/pls+xml');
  FFileType.AddOrSetValue('ai', 'application/postscript');
  FFileType.AddOrSetValue('eps', 'application/postscript');
  FFileType.AddOrSetValue('ps', 'application/postscript');
  FFileType.AddOrSetValue('cww', 'application/prs.cww');
  FFileType.AddOrSetValue('pskcxml', 'application/pskc+xml');
  FFileType.AddOrSetValue('rdf', 'application/rdf+xml');
  FFileType.AddOrSetValue('rif', 'application/reginfo+xml');
  FFileType.AddOrSetValue('rnc', 'application/relax-ng-compact-syntax');
  FFileType.AddOrSetValue('rl', 'application/resource-lists+xml');
  FFileType.AddOrSetValue('rld', 'application/resource-lists-diff+xml');
  FFileType.AddOrSetValue('rs', 'application/rls-services+xml');
  FFileType.AddOrSetValue('gbr', 'application/rpki-ghostbusters');
  FFileType.AddOrSetValue('mft', 'application/rpki-manifest');
  FFileType.AddOrSetValue('roa', 'application/rpki-roa');
  FFileType.AddOrSetValue('rsd', 'application/rsd+xml');
  FFileType.AddOrSetValue('rss', 'application/rss+xml');
  FFileType.AddOrSetValue('rtf', 'application/rtf');
  FFileType.AddOrSetValue('sbml', 'application/sbml+xml');
  FFileType.AddOrSetValue('scq', 'application/scvp-cv-request');
  FFileType.AddOrSetValue('scs', 'application/scvp-cv-response');
  FFileType.AddOrSetValue('spq', 'application/scvp-vp-request');
  FFileType.AddOrSetValue('spp', 'application/scvp-vp-response');
  FFileType.AddOrSetValue('sdp', 'application/sdp');
  FFileType.AddOrSetValue('setpay', 'application/set-payment-initiation');
  FFileType.AddOrSetValue('setreg', 'application/set-registration-initiation');
  FFileType.AddOrSetValue('shf', 'application/shf+xml');
  FFileType.AddOrSetValue('smi', 'application/smil+xml');
  FFileType.AddOrSetValue('smil', 'application/smil+xml');
  FFileType.AddOrSetValue('soap', 'application/soap+xml');
  FFileType.AddOrSetValue('rq', 'application/sparql-query');
  FFileType.AddOrSetValue('srx', 'application/sparql-results+xml');
  FFileType.AddOrSetValue('gram', 'application/srgs');
  FFileType.AddOrSetValue('grxml', 'application/srgs+xml');
  FFileType.AddOrSetValue('sru', 'application/sru+xml');
  FFileType.AddOrSetValue('ssdl', 'application/ssdl+xml');
  FFileType.AddOrSetValue('ssml', 'application/ssml+xml');
  FFileType.AddOrSetValue('tei', 'application/tei+xml');
  FFileType.AddOrSetValue('teicorpus', 'application/tei+xml');
  FFileType.AddOrSetValue('tfi', 'application/thraud+xml');
  FFileType.AddOrSetValue('tsd', 'application/timestamped-data');
  FFileType.AddOrSetValue('plb', 'application/vnd.3gpp.pic-bw-large');
  FFileType.AddOrSetValue('psb', 'application/vnd.3gpp.pic-bw-small');
  FFileType.AddOrSetValue('pvb', 'application/vnd.3gpp.pic-bw-var');
  FFileType.AddOrSetValue('tcap', 'application/vnd.3gpp2.tcap');
  FFileType.AddOrSetValue('pwn', 'application/vnd.3m.post-it-notes');
  FFileType.AddOrSetValue('aso', 'application/vnd.accpac.simply.aso');
  FFileType.AddOrSetValue('imp', 'application/vnd.accpac.simply.imp');
  FFileType.AddOrSetValue('acu', 'application/vnd.acucobol');
  FFileType.AddOrSetValue('atc', 'application/vnd.acucorp');
  FFileType.AddOrSetValue('acutc', 'application/vnd.acucorp');
  FFileType.AddOrSetValue('air', 'application/vnd.adobe.air-application-installer-package+zip');
  FFileType.AddOrSetValue('fcdt', 'application/vnd.adobe.formscentral.fcdt');
  FFileType.AddOrSetValue('fxp', 'application/vnd.adobe.fxp');
  FFileType.AddOrSetValue('fxpl', 'application/vnd.adobe.fxp');
  FFileType.AddOrSetValue('xdp', 'application/vnd.adobe.xdp+xml');
  FFileType.AddOrSetValue('xfdf', 'application/vnd.adobe.xfdf');
  FFileType.AddOrSetValue('ahead', 'application/vnd.ahead.space');
  FFileType.AddOrSetValue('azf', 'application/vnd.airzip.filesecure.azf');
  FFileType.AddOrSetValue('azs', 'application/vnd.airzip.filesecure.azs');
  FFileType.AddOrSetValue('azw', 'application/vnd.amazon.ebook');
  FFileType.AddOrSetValue('acc', 'application/vnd.americandynamics.acc');
  FFileType.AddOrSetValue('ami', 'application/vnd.amiga.ami');
  FFileType.AddOrSetValue('apk', 'application/vnd.android.package-archive');
  FFileType.AddOrSetValue('cii', 'application/vnd.anser-web-certificate-issue-initiation');
  FFileType.AddOrSetValue('fti', 'application/vnd.anser-web-funds-transfer-initiation');
  FFileType.AddOrSetValue('atx', 'application/vnd.antix.game-component');
  FFileType.AddOrSetValue('mpkg', 'application/vnd.apple.installer+xml');
  FFileType.AddOrSetValue('m3u8', 'application/vnd.apple.mpegurl');
  FFileType.AddOrSetValue('swi', 'application/vnd.aristanetworks.swi');
  FFileType.AddOrSetValue('iota', 'application/vnd.astraea-software.iota');
  FFileType.AddOrSetValue('aep', 'application/vnd.audiograph');
  FFileType.AddOrSetValue('mpm', 'application/vnd.blueice.multipass');
  FFileType.AddOrSetValue('bmi', 'application/vnd.bmi');
  FFileType.AddOrSetValue('rep', 'application/vnd.businessobjects');
  FFileType.AddOrSetValue('cdxml', 'application/vnd.chemdraw+xml');
  FFileType.AddOrSetValue('mmd', 'application/vnd.chipnuts.karaoke-mmd');
  FFileType.AddOrSetValue('cdy', 'application/vnd.cinderella');
  FFileType.AddOrSetValue('cla', 'application/vnd.claymore');
  FFileType.AddOrSetValue('rp9', 'application/vnd.cloanto.rp9');
  FFileType.AddOrSetValue('c4g', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4d', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4f', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4p', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c4u', 'application/vnd.clonk.c4group');
  FFileType.AddOrSetValue('c11amc', 'application/vnd.cluetrust.cartomobile-config');
  FFileType.AddOrSetValue('c11amz', 'application/vnd.cluetrust.cartomobile-config-pkg');
  FFileType.AddOrSetValue('csp', 'application/vnd.commonspace');
  FFileType.AddOrSetValue('cdbcmsg', 'application/vnd.contact.cmsg');
  FFileType.AddOrSetValue('cmc', 'application/vnd.cosmocaller');
  FFileType.AddOrSetValue('clkx', 'application/vnd.crick.clicker');
  FFileType.AddOrSetValue('clkk', 'application/vnd.crick.clicker.keyboard');
  FFileType.AddOrSetValue('clkp', 'application/vnd.crick.clicker.palette');
  FFileType.AddOrSetValue('clkt', 'application/vnd.crick.clicker.template');
  FFileType.AddOrSetValue('clkw', 'application/vnd.crick.clicker.wordbank');
  FFileType.AddOrSetValue('wbs', 'application/vnd.criticaltools.wbs+xml');
  FFileType.AddOrSetValue('pml', 'application/vnd.ctc-posml');
  FFileType.AddOrSetValue('ppd', 'application/vnd.cups-ppd');
  FFileType.AddOrSetValue('car', 'application/vnd.curl.car');
  FFileType.AddOrSetValue('pcurl', 'application/vnd.curl.pcurl');
  FFileType.AddOrSetValue('dart', 'application/vnd.dart');
  FFileType.AddOrSetValue('rdz', 'application/vnd.data-vision.rdz');
  FFileType.AddOrSetValue('uvf', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvvf', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvd', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvvd', 'application/vnd.dece.data');
  FFileType.AddOrSetValue('uvt', 'application/vnd.dece.ttml+xml');
  FFileType.AddOrSetValue('uvvt', 'application/vnd.dece.ttml+xml');
  FFileType.AddOrSetValue('uvx', 'application/vnd.dece.unspecified');
  FFileType.AddOrSetValue('uvvx', 'application/vnd.dece.unspecified');
  FFileType.AddOrSetValue('uvz', 'application/vnd.dece.zip');
  FFileType.AddOrSetValue('uvvz', 'application/vnd.dece.zip');
  FFileType.AddOrSetValue('fe_launch', 'application/vnd.denovo.fcselayout-link');
  FFileType.AddOrSetValue('dna', 'application/vnd.dna');
  FFileType.AddOrSetValue('mlp', 'application/vnd.dolby.mlp');
  FFileType.AddOrSetValue('dpg', 'application/vnd.dpgraph');
  FFileType.AddOrSetValue('dfac', 'application/vnd.dreamfactory');
  FFileType.AddOrSetValue('kpxx', 'application/vnd.ds-keypoint');
  FFileType.AddOrSetValue('ait', 'application/vnd.dvb.ait');
  FFileType.AddOrSetValue('svc', 'application/vnd.dvb.service');
  FFileType.AddOrSetValue('geo', 'application/vnd.dynageo');
  FFileType.AddOrSetValue('mag', 'application/vnd.ecowin.chart');
  FFileType.AddOrSetValue('nml', 'application/vnd.enliven');
  FFileType.AddOrSetValue('esf', 'application/vnd.epson.esf');
  FFileType.AddOrSetValue('msf', 'application/vnd.epson.msf');
  FFileType.AddOrSetValue('qam', 'application/vnd.epson.quickanime');
  FFileType.AddOrSetValue('slt', 'application/vnd.epson.salt');
  FFileType.AddOrSetValue('ssf', 'application/vnd.epson.ssf');
  FFileType.AddOrSetValue('es3', 'application/vnd.eszigno3+xml');
  FFileType.AddOrSetValue('et3', 'application/vnd.eszigno3+xml');
  FFileType.AddOrSetValue('ez2', 'application/vnd.ezpix-album');
  FFileType.AddOrSetValue('ez3', 'application/vnd.ezpix-package');
  FFileType.AddOrSetValue('fdf', 'application/vnd.fdf');
  FFileType.AddOrSetValue('mseed', 'application/vnd.fdsn.mseed');
  FFileType.AddOrSetValue('seed', 'application/vnd.fdsn.seed');
  FFileType.AddOrSetValue('dataless', 'application/vnd.fdsn.seed');
  FFileType.AddOrSetValue('json', 'application/vnd.embarcadero.firedac+json');
  FFileType.AddOrSetValue('xml', 'application/vnd.embarcadero.firedac+xml');
  FFileType.AddOrSetValue('bin', 'application/vnd.embarcadero.firedac+bin');
  FFileType.AddOrSetValue('gph', 'application/vnd.flographit');
  FFileType.AddOrSetValue('ftc', 'application/vnd.fluxtime.clip');
  FFileType.AddOrSetValue('fm', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('frame', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('maker', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('book', 'application/vnd.framemaker');
  FFileType.AddOrSetValue('fnc', 'application/vnd.frogans.fnc');
  FFileType.AddOrSetValue('ltf', 'application/vnd.frogans.ltf');
  FFileType.AddOrSetValue('fsc', 'application/vnd.fsc.weblaunch');
  FFileType.AddOrSetValue('oas', 'application/vnd.fujitsu.oasys');
  FFileType.AddOrSetValue('oa2', 'application/vnd.fujitsu.oasys2');
  FFileType.AddOrSetValue('oa3', 'application/vnd.fujitsu.oasys3');
  FFileType.AddOrSetValue('fg5', 'application/vnd.fujitsu.oasysgp');
  FFileType.AddOrSetValue('bh2', 'application/vnd.fujitsu.oasysprs');
  FFileType.AddOrSetValue('ddd', 'application/vnd.fujixerox.ddd');
  FFileType.AddOrSetValue('xdw', 'application/vnd.fujixerox.docuworks');
  FFileType.AddOrSetValue('xbd', 'application/vnd.fujixerox.docuworks.binder');
  FFileType.AddOrSetValue('fzs', 'application/vnd.fuzzysheet');
  FFileType.AddOrSetValue('txd', 'application/vnd.genomatix.tuxedo');
  FFileType.AddOrSetValue('ggb', 'application/vnd.geogebra.file');
  FFileType.AddOrSetValue('ggt', 'application/vnd.geogebra.tool');
  FFileType.AddOrSetValue('gex', 'application/vnd.geometry-explorer');
  FFileType.AddOrSetValue('gre', 'application/vnd.geometry-explorer');
  FFileType.AddOrSetValue('gxt', 'application/vnd.geonext');
  FFileType.AddOrSetValue('g2w', 'application/vnd.geoplan');
  FFileType.AddOrSetValue('g3w', 'application/vnd.geospace');
  FFileType.AddOrSetValue('gmx', 'application/vnd.gmx');
  FFileType.AddOrSetValue('kml', 'application/vnd.google-earth.kml+xml');
  FFileType.AddOrSetValue('kmz', 'application/vnd.google-earth.kmz');
  FFileType.AddOrSetValue('gqf', 'application/vnd.grafeq');
  FFileType.AddOrSetValue('gqs', 'application/vnd.grafeq');
  FFileType.AddOrSetValue('gac', 'application/vnd.groove-account');
  FFileType.AddOrSetValue('ghf', 'application/vnd.groove-help');
  FFileType.AddOrSetValue('gim', 'application/vnd.groove-identity-message');
  FFileType.AddOrSetValue('grv', 'application/vnd.groove-injector');
  FFileType.AddOrSetValue('gtm', 'application/vnd.groove-tool-message');
  FFileType.AddOrSetValue('tpl', 'application/vnd.groove-tool-template');
  FFileType.AddOrSetValue('vcg', 'application/vnd.groove-vcard');
  FFileType.AddOrSetValue('hal', 'application/vnd.hal+xml');
  FFileType.AddOrSetValue('zmm', 'application/vnd.handheld-entertainment+xml');
  FFileType.AddOrSetValue('hbci', 'application/vnd.hbci');
  FFileType.AddOrSetValue('les', 'application/vnd.hhe.lesson-player');
  FFileType.AddOrSetValue('hpgl', 'application/vnd.hp-hpgl');
  FFileType.AddOrSetValue('hpid', 'application/vnd.hp-hpid');
  FFileType.AddOrSetValue('hps', 'application/vnd.hp-hps');
  FFileType.AddOrSetValue('jlt', 'application/vnd.hp-jlyt');
  FFileType.AddOrSetValue('pcl', 'application/vnd.hp-pcl');
  FFileType.AddOrSetValue('pclxl', 'application/vnd.hp-pclxl');
  FFileType.AddOrSetValue('sfd-hdstx', 'application/vnd.hydrostatix.sof-data');
  FFileType.AddOrSetValue('mpy', 'application/vnd.ibm.minipay');
  FFileType.AddOrSetValue('afp', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('listafp', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('list3820', 'application/vnd.ibm.modcap');
  FFileType.AddOrSetValue('irm', 'application/vnd.ibm.rights-management');
  FFileType.AddOrSetValue('sc', 'application/vnd.ibm.secure-container');
  FFileType.AddOrSetValue('icc', 'application/vnd.iccprofile');
  FFileType.AddOrSetValue('icm', 'application/vnd.iccprofile');
  FFileType.AddOrSetValue('igl', 'application/vnd.igloader');
  FFileType.AddOrSetValue('ivp', 'application/vnd.immervision-ivp');
  FFileType.AddOrSetValue('ivu', 'application/vnd.immervision-ivu');
  FFileType.AddOrSetValue('igm', 'application/vnd.insors.igm');
  FFileType.AddOrSetValue('xpw', 'application/vnd.intercon.formnet');
  FFileType.AddOrSetValue('xpx', 'application/vnd.intercon.formnet');
  FFileType.AddOrSetValue('i2g', 'application/vnd.intergeo');
  FFileType.AddOrSetValue('qbo', 'application/vnd.intu.qbo');
  FFileType.AddOrSetValue('qfx', 'application/vnd.intu.qfx');
  FFileType.AddOrSetValue('rcprofile', 'application/vnd.ipunplugged.rcprofile');
  FFileType.AddOrSetValue('irp', 'application/vnd.irepository.package+xml');
  FFileType.AddOrSetValue('xpr', 'application/vnd.is-xpr');
  FFileType.AddOrSetValue('fcs', 'application/vnd.isac.fcs');
  FFileType.AddOrSetValue('jam', 'application/vnd.jam');
  FFileType.AddOrSetValue('rms', 'application/vnd.jcp.javame.midlet-rms');
  FFileType.AddOrSetValue('jisp', 'application/vnd.jisp');
  FFileType.AddOrSetValue('joda', 'application/vnd.joost.joda-archive');
  FFileType.AddOrSetValue('ktz', 'application/vnd.kahootz');
  FFileType.AddOrSetValue('ktr', 'application/vnd.kahootz');
  FFileType.AddOrSetValue('karbon', 'application/vnd.kde.karbon');
  FFileType.AddOrSetValue('chrt', 'application/vnd.kde.kchart');
  FFileType.AddOrSetValue('kfo', 'application/vnd.kde.kformula');
  FFileType.AddOrSetValue('flw', 'application/vnd.kde.kivio');
  FFileType.AddOrSetValue('kon', 'application/vnd.kde.kontour');
  FFileType.AddOrSetValue('kpr', 'application/vnd.kde.kpresenter');
  FFileType.AddOrSetValue('kpt', 'application/vnd.kde.kpresenter');
  FFileType.AddOrSetValue('ksp', 'application/vnd.kde.kspread');
  FFileType.AddOrSetValue('kwd', 'application/vnd.kde.kword');
  FFileType.AddOrSetValue('kwt', 'application/vnd.kde.kword');
  FFileType.AddOrSetValue('htke', 'application/vnd.kenameaapp');
  FFileType.AddOrSetValue('kia', 'application/vnd.kidspiration');
  FFileType.AddOrSetValue('kne', 'application/vnd.kinar');
  FFileType.AddOrSetValue('knp', 'application/vnd.kinar');
  FFileType.AddOrSetValue('skp', 'application/vnd.koan');
  FFileType.AddOrSetValue('skd', 'application/vnd.koan');
  FFileType.AddOrSetValue('skt', 'application/vnd.koan');
  FFileType.AddOrSetValue('skm', 'application/vnd.koan');
  FFileType.AddOrSetValue('sse', 'application/vnd.kodak-descriptor');
  FFileType.AddOrSetValue('lasxml', 'application/vnd.las.las+xml');
  FFileType.AddOrSetValue('lbd', 'application/vnd.llamagraphics.life-balance.desktop');
  FFileType.AddOrSetValue('lbe', 'application/vnd.llamagraphics.life-balance.exchange+xml');
  FFileType.AddOrSetValue('123', 'application/vnd.lotus-1-2-3');
  FFileType.AddOrSetValue('apr', 'application/vnd.lotus-approach');
  FFileType.AddOrSetValue('pre', 'application/vnd.lotus-freelance');
  FFileType.AddOrSetValue('nsf', 'application/vnd.lotus-notes');
  FFileType.AddOrSetValue('org', 'application/vnd.lotus-organizer');
  FFileType.AddOrSetValue('scm', 'application/vnd.lotus-screencam');
  FFileType.AddOrSetValue('lwp', 'application/vnd.lotus-wordpro');
  FFileType.AddOrSetValue('portpkg', 'application/vnd.macports.portpkg');
  FFileType.AddOrSetValue('mcd', 'application/vnd.mcd');
  FFileType.AddOrSetValue('mc1', 'application/vnd.medcalcdata');
  FFileType.AddOrSetValue('cdkey', 'application/vnd.mediastation.cdkey');
  FFileType.AddOrSetValue('mwf', 'application/vnd.mfer');
  FFileType.AddOrSetValue('mfm', 'application/vnd.mfmp');
  FFileType.AddOrSetValue('flo', 'application/vnd.micrografx.flo');
  FFileType.AddOrSetValue('igx', 'application/vnd.micrografx.igx');
  FFileType.AddOrSetValue('mif', 'application/vnd.mif');
  FFileType.AddOrSetValue('daf', 'application/vnd.mobius.daf');
  FFileType.AddOrSetValue('dis', 'application/vnd.mobius.dis');
  FFileType.AddOrSetValue('mbk', 'application/vnd.mobius.mbk');
  FFileType.AddOrSetValue('mqy', 'application/vnd.mobius.mqy');
  FFileType.AddOrSetValue('msl', 'application/vnd.mobius.msl');
  FFileType.AddOrSetValue('plc', 'application/vnd.mobius.plc');
  FFileType.AddOrSetValue('txf', 'application/vnd.mobius.txf');
  FFileType.AddOrSetValue('mpn', 'application/vnd.mophun.application');
  FFileType.AddOrSetValue('mpc', 'application/vnd.mophun.certificate');
  FFileType.AddOrSetValue('xul', 'application/vnd.mozilla.xul+xml');
  FFileType.AddOrSetValue('cil', 'application/vnd.ms-artgalry');
  FFileType.AddOrSetValue('cab', 'application/vnd.ms-cab-compressed');
  FFileType.AddOrSetValue('xls', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlm', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xla', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlc', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlt', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlw', 'application/vnd.ms-excel');
  FFileType.AddOrSetValue('xlam', 'application/vnd.ms-excel.addin.macroenabled.12');
  FFileType.AddOrSetValue('xlsb', 'application/vnd.ms-excel.sheet.binary.macroenabled.12');
  FFileType.AddOrSetValue('xlsm', 'application/vnd.ms-excel.sheet.macroenabled.12');
  FFileType.AddOrSetValue('xltm', 'application/vnd.ms-excel.template.macroenabled.12');
  FFileType.AddOrSetValue('eot', 'application/vnd.ms-fontobject');
  FFileType.AddOrSetValue('chm', 'application/vnd.ms-htmlhelp');
  FFileType.AddOrSetValue('ims', 'application/vnd.ms-ims');
  FFileType.AddOrSetValue('lrm', 'application/vnd.ms-lrm');
  FFileType.AddOrSetValue('thmx', 'application/vnd.ms-officetheme');
  FFileType.AddOrSetValue('cat', 'application/vnd.ms-pki.seccat');
  FFileType.AddOrSetValue('stl', 'application/vnd.ms-pki.stl');
  FFileType.AddOrSetValue('ppt', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('pps', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('pot', 'application/vnd.ms-powerpoint');
  FFileType.AddOrSetValue('ppam', 'application/vnd.ms-powerpoint.addin.macroenabled.12');
  FFileType.AddOrSetValue('pptm', 'application/vnd.ms-powerpoint.presentation.macroenabled.12');
  FFileType.AddOrSetValue('sldm', 'application/vnd.ms-powerpoint.slide.macroenabled.12');
  FFileType.AddOrSetValue('ppsm', 'application/vnd.ms-powerpoint.slideshow.macroenabled.12');
  FFileType.AddOrSetValue('potm', 'application/vnd.ms-powerpoint.template.macroenabled.12');
  FFileType.AddOrSetValue('mpp', 'application/vnd.ms-project');
  FFileType.AddOrSetValue('mpt', 'application/vnd.ms-project');
  FFileType.AddOrSetValue('docm', 'application/vnd.ms-word.document.macroenabled.12');
  FFileType.AddOrSetValue('dotm', 'application/vnd.ms-word.template.macroenabled.12');
  FFileType.AddOrSetValue('wps', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wks', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wcm', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wdb', 'application/vnd.ms-works');
  FFileType.AddOrSetValue('wpl', 'application/vnd.ms-wpl');
  FFileType.AddOrSetValue('xps', 'application/vnd.ms-xpsdocument');
  FFileType.AddOrSetValue('mseq', 'application/vnd.mseq');
  FFileType.AddOrSetValue('mus', 'application/vnd.musician');
  FFileType.AddOrSetValue('msty', 'application/vnd.muvee.style');
  FFileType.AddOrSetValue('taglet', 'application/vnd.mynfc');
  FFileType.AddOrSetValue('nlu', 'application/vnd.neurolanguage.nlu');
  FFileType.AddOrSetValue('ntf', 'application/vnd.nitf');
  FFileType.AddOrSetValue('nitf', 'application/vnd.nitf');
  FFileType.AddOrSetValue('nnd', 'application/vnd.noblenet-directory');
  FFileType.AddOrSetValue('nns', 'application/vnd.noblenet-sealer');
  FFileType.AddOrSetValue('nnw', 'application/vnd.noblenet-web');
  FFileType.AddOrSetValue('ngdat', 'application/vnd.nokia.n-gage.data');
  FFileType.AddOrSetValue('n-gage', 'application/vnd.nokia.n-gage.symbian.install');
  FFileType.AddOrSetValue('rpst', 'application/vnd.nokia.radio-preset');
  FFileType.AddOrSetValue('rpss', 'application/vnd.nokia.radio-presets');
  FFileType.AddOrSetValue('edm', 'application/vnd.novadigm.edm');
  FFileType.AddOrSetValue('edx', 'application/vnd.novadigm.edx');
  FFileType.AddOrSetValue('FExt', 'application/vnd.novadigm.FExt');
  FFileType.AddOrSetValue('odc', 'application/vnd.oasis.opendocument.chart');
  FFileType.AddOrSetValue('otc', 'application/vnd.oasis.opendocument.chart-template');
  FFileType.AddOrSetValue('odb', 'application/vnd.oasis.opendocument.database');
  FFileType.AddOrSetValue('odf', 'application/vnd.oasis.opendocument.formula');
  FFileType.AddOrSetValue('odft', 'application/vnd.oasis.opendocument.formula-template');
  FFileType.AddOrSetValue('odg', 'application/vnd.oasis.opendocument.graphics');
  FFileType.AddOrSetValue('otg', 'application/vnd.oasis.opendocument.graphics-template');
  FFileType.AddOrSetValue('odi', 'application/vnd.oasis.opendocument.image');
  FFileType.AddOrSetValue('oti', 'application/vnd.oasis.opendocument.image-template');
  FFileType.AddOrSetValue('odp', 'application/vnd.oasis.opendocument.presentation');
  FFileType.AddOrSetValue('otp', 'application/vnd.oasis.opendocument.presentation-template');
  FFileType.AddOrSetValue('ods', 'application/vnd.oasis.opendocument.spreadsheet');
  FFileType.AddOrSetValue('ots', 'application/vnd.oasis.opendocument.spreadsheet-template');
  FFileType.AddOrSetValue('odt', 'application/vnd.oasis.opendocument.text');
  FFileType.AddOrSetValue('odm', 'application/vnd.oasis.opendocument.text-master');
  FFileType.AddOrSetValue('ott', 'application/vnd.oasis.opendocument.text-template');
  FFileType.AddOrSetValue('oth', 'application/vnd.oasis.opendocument.text-web');
  FFileType.AddOrSetValue('xo', 'application/vnd.olpc-sugar');
  FFileType.AddOrSetValue('dd2', 'application/vnd.oma.dd2+xml');
  FFileType.AddOrSetValue('oxt', 'application/vnd.openofficeorg.extension');
  FFileType.AddOrSetValue('pptx', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
  FFileType.AddOrSetValue('sldx', 'application/vnd.openxmlformats-officedocument.presentationml.slide');
  FFileType.AddOrSetValue('ppsx', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow');
  FFileType.AddOrSetValue('potx', 'application/vnd.openxmlformats-officedocument.presentationml.template');
  FFileType.AddOrSetValue('xlsx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  FFileType.AddOrSetValue('xltx', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template');
  FFileType.AddOrSetValue('docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
  FFileType.AddOrSetValue('dotx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template');
  FFileType.AddOrSetValue('mgp', 'application/vnd.osgeo.mapguide.package');
  FFileType.AddOrSetValue('dp', 'application/vnd.osgi.dp');
  FFileType.AddOrSetValue('esa', 'application/vnd.osgi.subsystem');
  FFileType.AddOrSetValue('pdb', 'application/vnd.palm');
  FFileType.AddOrSetValue('pqa', 'application/vnd.palm');
  FFileType.AddOrSetValue('oprc', 'application/vnd.palm');
  FFileType.AddOrSetValue('paw', 'application/vnd.pawaafile');
  FFileType.AddOrSetValue('str', 'application/vnd.pg.format');
  FFileType.AddOrSetValue('ei6', 'application/vnd.pg.osasli');
  FFileType.AddOrSetValue('efif', 'application/vnd.picsel');
  FFileType.AddOrSetValue('wg', 'application/vnd.pmi.widget');
  FFileType.AddOrSetValue('plf', 'application/vnd.pocketlearn');
  FFileType.AddOrSetValue('pbd', 'application/vnd.powerbuilder6');
  FFileType.AddOrSetValue('box', 'application/vnd.previewsystems.box');
  FFileType.AddOrSetValue('mgz', 'application/vnd.proteus.magazine');
  FFileType.AddOrSetValue('qps', 'application/vnd.publishare-delta-tree');
  FFileType.AddOrSetValue('ptid', 'application/vnd.pvi.ptid1');
  FFileType.AddOrSetValue('qxd', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxt', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qwd', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qwt', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxl', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('qxb', 'application/vnd.quark.quarkxpress');
  FFileType.AddOrSetValue('bed', 'application/vnd.realvnc.bed');
  FFileType.AddOrSetValue('mxl', 'application/vnd.recordare.musicxml');
  FFileType.AddOrSetValue('musicxml', 'application/vnd.recordare.musicxml+xml');
  FFileType.AddOrSetValue('cryptonote', 'application/vnd.rig.cryptonote');
  FFileType.AddOrSetValue('cod', 'application/vnd.rim.cod');
  FFileType.AddOrSetValue('rm', 'application/vnd.rn-realmedia');
  FFileType.AddOrSetValue('rmvb', 'application/vnd.rn-realmedia-vbr');
  FFileType.AddOrSetValue('link66', 'application/vnd.route66.link66+xml');
  FFileType.AddOrSetValue('st', 'application/vnd.sailingtracker.track');
  FFileType.AddOrSetValue('see', 'application/vnd.seemail');
  FFileType.AddOrSetValue('sema', 'application/vnd.sema');
  FFileType.AddOrSetValue('semd', 'application/vnd.semd');
  FFileType.AddOrSetValue('semf', 'application/vnd.semf');
  FFileType.AddOrSetValue('ifm', 'application/vnd.shana.informed.formdata');
  FFileType.AddOrSetValue('itp', 'application/vnd.shana.informed.formtemplate');
  FFileType.AddOrSetValue('iif', 'application/vnd.shana.informed.interchange');
  FFileType.AddOrSetValue('ipk', 'application/vnd.shana.informed.package');
  FFileType.AddOrSetValue('twd', 'application/vnd.simtech-mindmapper');
  FFileType.AddOrSetValue('twds', 'application/vnd.simtech-mindmapper');
  FFileType.AddOrSetValue('mmf', 'application/vnd.smaf');
  FFileType.AddOrSetValue('teacher', 'application/vnd.smart.teacher');
  FFileType.AddOrSetValue('sdkm', 'application/vnd.solent.sdkm+xml');
  FFileType.AddOrSetValue('sdkd', 'application/vnd.solent.sdkm+xml');
  FFileType.AddOrSetValue('dxp', 'application/vnd.spotfire.dxp');
  FFileType.AddOrSetValue('sfs', 'application/vnd.spotfire.sfs');
  FFileType.AddOrSetValue('sdc', 'application/vnd.stardivision.calc');
  FFileType.AddOrSetValue('sda', 'application/vnd.stardivision.draw');
  FFileType.AddOrSetValue('sdd', 'application/vnd.stardivision.impress');
  FFileType.AddOrSetValue('smf', 'application/vnd.stardivision.math');
  FFileType.AddOrSetValue('sdw', 'application/vnd.stardivision.writer');
  FFileType.AddOrSetValue('vor', 'application/vnd.stardivision.writer');
  FFileType.AddOrSetValue('sgl', 'application/vnd.stardivision.writer-global');
  FFileType.AddOrSetValue('smzip', 'application/vnd.stepmania.package');
  FFileType.AddOrSetValue('sm', 'application/vnd.stepmania.stepchart');
  FFileType.AddOrSetValue('sxc', 'application/vnd.sun.xml.calc');
  FFileType.AddOrSetValue('stc', 'application/vnd.sun.xml.calc.template');
  FFileType.AddOrSetValue('sxd', 'application/vnd.sun.xml.draw');
  FFileType.AddOrSetValue('std', 'application/vnd.sun.xml.draw.template');
  FFileType.AddOrSetValue('sxi', 'application/vnd.sun.xml.impress');
  FFileType.AddOrSetValue('sti', 'application/vnd.sun.xml.impress.template');
  FFileType.AddOrSetValue('sxm', 'application/vnd.sun.xml.math');
  FFileType.AddOrSetValue('sxw', 'application/vnd.sun.xml.writer');
  FFileType.AddOrSetValue('sxg', 'application/vnd.sun.xml.writer.global');
  FFileType.AddOrSetValue('stw', 'application/vnd.sun.xml.writer.template');
  FFileType.AddOrSetValue('sus', 'application/vnd.sus-calendar');
  FFileType.AddOrSetValue('susp', 'application/vnd.sus-calendar');
  FFileType.AddOrSetValue('svd', 'application/vnd.svd');
  FFileType.AddOrSetValue('sis', 'application/vnd.symbian.install');
  FFileType.AddOrSetValue('sisx', 'application/vnd.symbian.install');
  FFileType.AddOrSetValue('xsm', 'application/vnd.syncml+xml');
  FFileType.AddOrSetValue('bdm', 'application/vnd.syncml.dm+wbxml');
  FFileType.AddOrSetValue('xdm', 'application/vnd.syncml.dm+xml');
  FFileType.AddOrSetValue('tao', 'application/vnd.tao.intent-module-archive');
  FFileType.AddOrSetValue('pcap', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('cap', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('dmp', 'application/vnd.tcpdump.pcap');
  FFileType.AddOrSetValue('tmo', 'application/vnd.tmobile-livetv');
  FFileType.AddOrSetValue('tpt', 'application/vnd.trid.tpt');
  FFileType.AddOrSetValue('mxs', 'application/vnd.triscape.mxs');
  FFileType.AddOrSetValue('tra', 'application/vnd.trueapp');
  FFileType.AddOrSetValue('ufd', 'application/vnd.ufdl');
  FFileType.AddOrSetValue('ufdl', 'application/vnd.ufdl');
  FFileType.AddOrSetValue('utz', 'application/vnd.uiq.theme');
  FFileType.AddOrSetValue('umj', 'application/vnd.umajin');
  FFileType.AddOrSetValue('unityweb', 'application/vnd.unity');
  FFileType.AddOrSetValue('uoml', 'application/vnd.uoml+xml');
  FFileType.AddOrSetValue('vcx', 'application/vnd.vcx');
  FFileType.AddOrSetValue('vsd', 'application/vnd.visio');
  FFileType.AddOrSetValue('vst', 'application/vnd.visio');
  FFileType.AddOrSetValue('vss', 'application/vnd.visio');
  FFileType.AddOrSetValue('vsw', 'application/vnd.visio');
  FFileType.AddOrSetValue('vis', 'application/vnd.visionary');
  FFileType.AddOrSetValue('vsf', 'application/vnd.vsf');
  FFileType.AddOrSetValue('wbxml', 'application/vnd.wap.wbxml');
  FFileType.AddOrSetValue('wmlc', 'application/vnd.wap.wmlc');
  FFileType.AddOrSetValue('wmlsc', 'application/vnd.wap.wmlscriptc');
  FFileType.AddOrSetValue('wtb', 'application/vnd.webturbo');
  FFileType.AddOrSetValue('nbp', 'application/vnd.wolfram.player');
  FFileType.AddOrSetValue('wpd', 'application/vnd.wordperfect');
  FFileType.AddOrSetValue('wqd', 'application/vnd.wqd');
  FFileType.AddOrSetValue('stf', 'application/vnd.wt.stf');
  FFileType.AddOrSetValue('xar', 'application/vnd.xara');
  FFileType.AddOrSetValue('xfdl', 'application/vnd.xfdl');
  FFileType.AddOrSetValue('hvd', 'application/vnd.yamaha.hv-dic');
  FFileType.AddOrSetValue('hvs', 'application/vnd.yamaha.hv-script');
  FFileType.AddOrSetValue('hvp', 'application/vnd.yamaha.hv-voice');
  FFileType.AddOrSetValue('osf', 'application/vnd.yamaha.openscoreformat');
  FFileType.AddOrSetValue('osfpvg', 'application/vnd.yamaha.openscoreformat.osfpvg+xml');
  FFileType.AddOrSetValue('saf', 'application/vnd.yamaha.smaf-audio');
  FFileType.AddOrSetValue('spf', 'application/vnd.yamaha.smaf-phrase');
  FFileType.AddOrSetValue('cmp', 'application/vnd.yellowriver-custom-menu');
  FFileType.AddOrSetValue('zir', 'application/vnd.zul');
  FFileType.AddOrSetValue('zirz', 'application/vnd.zul');
  FFileType.AddOrSetValue('zaz', 'application/vnd.zzazz.deck+xml');
  FFileType.AddOrSetValue('vxml', 'application/voicexml+xml');
  FFileType.AddOrSetValue('wgt', 'application/widget');
  FFileType.AddOrSetValue('hlp', 'application/winhlp');
  FFileType.AddOrSetValue('wsdl', 'application/wsdl+xml');
  FFileType.AddOrSetValue('wspolicy', 'application/wspolicy+xml');
  FFileType.AddOrSetValue('7z', 'application/x-7z-compressed');
  FFileType.AddOrSetValue('abw', 'application/x-abiword');
  FFileType.AddOrSetValue('ace', 'application/x-ace-compressed');
  FFileType.AddOrSetValue('dmg', 'application/x-apple-diskimage');
  FFileType.AddOrSetValue('aab', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('x32', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('u32', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('vox', 'application/x-authorware-bin');
  FFileType.AddOrSetValue('aam', 'application/x-authorware-map');
  FFileType.AddOrSetValue('aas', 'application/x-authorware-seg');
  FFileType.AddOrSetValue('bcpio', 'application/x-bcpio');
  FFileType.AddOrSetValue('torrent', 'application/x-bittorrent');
  FFileType.AddOrSetValue('blb', 'application/x-blorb');
  FFileType.AddOrSetValue('blorb', 'application/x-blorb');
  FFileType.AddOrSetValue('bz', 'application/x-bzip');
  FFileType.AddOrSetValue('bz2', 'application/x-bzip2');
  FFileType.AddOrSetValue('boz', 'application/x-bzip2');
  FFileType.AddOrSetValue('cbr', 'application/x-cbr');
  FFileType.AddOrSetValue('cba', 'application/x-cbr');
  FFileType.AddOrSetValue('cbt', 'application/x-cbr');
  FFileType.AddOrSetValue('cbz', 'application/x-cbr');
  FFileType.AddOrSetValue('cb7', 'application/x-cbr');
  FFileType.AddOrSetValue('vcd', 'application/x-cdlink');
  FFileType.AddOrSetValue('cfs', 'application/x-cfs-compressed');
  FFileType.AddOrSetValue('chat', 'application/x-chat');
  FFileType.AddOrSetValue('pgn', 'application/x-chess-pgn');
  FFileType.AddOrSetValue('nsc', 'application/x-conference');
  FFileType.AddOrSetValue('cpio', 'application/x-cpio');
  FFileType.AddOrSetValue('csh', 'application/x-csh');
  FFileType.AddOrSetValue('deb', 'application/x-debian-package');
  FFileType.AddOrSetValue('udeb', 'application/x-debian-package');
  FFileType.AddOrSetValue('dgc', 'application/x-dgc-compressed');
  FFileType.AddOrSetValue('dir', 'application/x-director');
  FFileType.AddOrSetValue('dcr', 'application/x-director');
  FFileType.AddOrSetValue('dxr', 'application/x-director');
  FFileType.AddOrSetValue('cst', 'application/x-director');
  FFileType.AddOrSetValue('cct', 'application/x-director');
  FFileType.AddOrSetValue('cxt', 'application/x-director');
  FFileType.AddOrSetValue('w3d', 'application/x-director');
  FFileType.AddOrSetValue('fgd', 'application/x-director');
  FFileType.AddOrSetValue('swa', 'application/x-director');
  FFileType.AddOrSetValue('wad', 'application/x-doom');
  FFileType.AddOrSetValue('ncx', 'application/x-dtbncx+xml');
  FFileType.AddOrSetValue('dtb', 'application/x-dtbook+xml');
  FFileType.AddOrSetValue('res', 'application/x-dtbresource+xml');
  FFileType.AddOrSetValue('dvi', 'application/x-dvi');
  FFileType.AddOrSetValue('evy', 'application/x-envoy');
  FFileType.AddOrSetValue('eva', 'application/x-eva');
  FFileType.AddOrSetValue('bdf', 'application/x-font-bdf');
  FFileType.AddOrSetValue('gsf', 'application/x-font-ghostscript');
  FFileType.AddOrSetValue('psf', 'application/x-font-linux-psf');
  FFileType.AddOrSetValue('otf', 'application/x-font-otf');
  FFileType.AddOrSetValue('pcf', 'application/x-font-pcf');
  FFileType.AddOrSetValue('snf', 'application/x-font-snf');
  FFileType.AddOrSetValue('ttf', 'application/x-font-ttf');
  FFileType.AddOrSetValue('ttc', 'application/x-font-ttf');
  FFileType.AddOrSetValue('pfa', 'application/x-font-type1');
  FFileType.AddOrSetValue('pfb', 'application/x-font-type1');
  FFileType.AddOrSetValue('pfm', 'application/x-font-type1');
  FFileType.AddOrSetValue('afm', 'application/x-font-type1');
  FFileType.AddOrSetValue('woff', 'application/x-font-woff');
  FFileType.AddOrSetValue('arc', 'application/x-freearc');
  FFileType.AddOrSetValue('spl', 'application/x-futuresplash');
  FFileType.AddOrSetValue('gca', 'application/x-gca-compressed');
  FFileType.AddOrSetValue('ulx', 'application/x-glulx');
  FFileType.AddOrSetValue('gnumeric', 'application/x-gnumeric');
  FFileType.AddOrSetValue('gramps', 'application/x-gramps-xml');
  FFileType.AddOrSetValue('gtar', 'application/x-gtar');
  FFileType.AddOrSetValue('hdf', 'application/x-hdf');
  FFileType.AddOrSetValue('install', 'application/x-install-instructions');
  FFileType.AddOrSetValue('iso', 'application/x-iso9660-image');
  FFileType.AddOrSetValue('jnlp', 'application/x-java-jnlp-file');
  FFileType.AddOrSetValue('latex', 'application/x-latex');
  FFileType.AddOrSetValue('lzh', 'application/x-lzh-compressed');
  FFileType.AddOrSetValue('lha', 'application/x-lzh-compressed');
  FFileType.AddOrSetValue('mie', 'application/x-mie');
  FFileType.AddOrSetValue('prc', 'application/x-mobipocket-ebook');
  FFileType.AddOrSetValue('mobi', 'application/x-mobipocket-ebook');
  FFileType.AddOrSetValue('application', 'application/x-ms-application');
  FFileType.AddOrSetValue('lnk', 'application/x-ms-shortcut');
  FFileType.AddOrSetValue('wmd', 'application/x-ms-wmd');
  FFileType.AddOrSetValue('wmz', 'application/x-ms-wmz');
  FFileType.AddOrSetValue('xbap', 'application/x-ms-xbap');
  FFileType.AddOrSetValue('mdb', 'application/x-msaccess');
  FFileType.AddOrSetValue('obd', 'application/x-msbinder');
  FFileType.AddOrSetValue('crd', 'application/x-mscardfile');
  FFileType.AddOrSetValue('clp', 'application/x-msclip');
  FFileType.AddOrSetValue('exe', 'application/x-msdownload');
  FFileType.AddOrSetValue('dll', 'application/x-msdownload');
  FFileType.AddOrSetValue('com', 'application/x-msdownload');
  FFileType.AddOrSetValue('bat', 'application/x-msdownload');
  FFileType.AddOrSetValue('msi', 'application/x-msdownload');
  FFileType.AddOrSetValue('mvb', 'application/x-msmediaview');
  FFileType.AddOrSetValue('m13', 'application/x-msmediaview');
  FFileType.AddOrSetValue('m14', 'application/x-msmediaview');
  FFileType.AddOrSetValue('wmf', 'application/x-msmetafile');
  FFileType.AddOrSetValue('wmz', 'application/x-msmetafile');
  FFileType.AddOrSetValue('emf', 'application/x-msmetafile');
  FFileType.AddOrSetValue('emz', 'application/x-msmetafile');
  FFileType.AddOrSetValue('mny', 'application/x-msmoney');
  FFileType.AddOrSetValue('pub', 'application/x-mspublisher');
  FFileType.AddOrSetValue('scd', 'application/x-msschedule');
  FFileType.AddOrSetValue('trm', 'application/x-msterminal');
  FFileType.AddOrSetValue('wri', 'application/x-mswrite');
  FFileType.AddOrSetValue('nc', 'application/x-netcdf');
  FFileType.AddOrSetValue('cdf', 'application/x-netcdf');
  FFileType.AddOrSetValue('nzb', 'application/x-nzb');
  FFileType.AddOrSetValue('p12', 'application/x-pkcs12');
  FFileType.AddOrSetValue('pfx', 'application/x-pkcs12');
  FFileType.AddOrSetValue('p7b', 'application/x-pkcs7-certificates');
  FFileType.AddOrSetValue('spc', 'application/x-pkcs7-certificates');
  FFileType.AddOrSetValue('p7r', 'application/x-pkcs7-certreqresp');
  FFileType.AddOrSetValue('rar', 'application/x-rar-compressed');
  FFileType.AddOrSetValue('ris', 'application/x-research-info-systems');
  FFileType.AddOrSetValue('sh', 'application/x-sh');
  FFileType.AddOrSetValue('shar', 'application/x-shar');
  FFileType.AddOrSetValue('swf', 'application/x-shockwave-flash');
  FFileType.AddOrSetValue('xap', 'application/x-silverlight-app');
  FFileType.AddOrSetValue('sql', 'application/x-sql');
  FFileType.AddOrSetValue('sit', 'application/x-stuffit');
  FFileType.AddOrSetValue('sitx', 'application/x-stuffitx');
  FFileType.AddOrSetValue('srt', 'application/x-subrip');
  FFileType.AddOrSetValue('sv4cpio', 'application/x-sv4cpio');
  FFileType.AddOrSetValue('sv4crc', 'application/x-sv4crc');
  FFileType.AddOrSetValue('t3', 'application/x-t3vm-image');
  FFileType.AddOrSetValue('gam', 'application/x-tads');
  FFileType.AddOrSetValue('tar', 'application/x-tar');
  FFileType.AddOrSetValue('tcl', 'application/x-tcl');
  FFileType.AddOrSetValue('tex', 'application/x-tex');
  FFileType.AddOrSetValue('tfm', 'application/x-tex-tfm');
  FFileType.AddOrSetValue('texinfo', 'application/x-texinfo');
  FFileType.AddOrSetValue('texi', 'application/x-texinfo');
  FFileType.AddOrSetValue('obj', 'application/x-tgif');
  FFileType.AddOrSetValue('ustar', 'application/x-ustar');
  FFileType.AddOrSetValue('src', 'application/x-wais-source');
  FFileType.AddOrSetValue('der', 'application/x-x509-ca-cert');
  FFileType.AddOrSetValue('crt', 'application/x-x509-ca-cert');
  FFileType.AddOrSetValue('fig', 'application/x-xfig');
  FFileType.AddOrSetValue('xlf', 'application/x-xliff+xml');
  FFileType.AddOrSetValue('xpi', 'application/x-xpinstall');
  FFileType.AddOrSetValue('xz', 'application/x-xz');
  FFileType.AddOrSetValue('yaml', 'application/x-yaml');
  FFileType.AddOrSetValue('z1', 'application/x-zmachine');
  FFileType.AddOrSetValue('z2', 'application/x-zmachine');
  FFileType.AddOrSetValue('z3', 'application/x-zmachine');
  FFileType.AddOrSetValue('z4', 'application/x-zmachine');
  FFileType.AddOrSetValue('z5', 'application/x-zmachine');
  FFileType.AddOrSetValue('z6', 'application/x-zmachine');
  FFileType.AddOrSetValue('z7', 'application/x-zmachine');
  FFileType.AddOrSetValue('z8', 'application/x-zmachine');
  FFileType.AddOrSetValue('xaml', 'application/xaml+xml');
  FFileType.AddOrSetValue('xdf', 'application/xcap-diff+xml');
  FFileType.AddOrSetValue('xenc', 'application/xenc+xml');
  FFileType.AddOrSetValue('xhtml', 'application/xhtml+xml');
  FFileType.AddOrSetValue('xht', 'application/xhtml+xml');
  FFileType.AddOrSetValue('xml', 'application/xml');
  FFileType.AddOrSetValue('xsl', 'application/xml');
  FFileType.AddOrSetValue('dtd', 'application/xml-dtd');
  FFileType.AddOrSetValue('xop', 'application/xop+xml');
  FFileType.AddOrSetValue('xpl', 'application/xproc+xml');
  FFileType.AddOrSetValue('xslt', 'application/xslt+xml');
  FFileType.AddOrSetValue('xspf', 'application/xspf+xml');
  FFileType.AddOrSetValue('mxml', 'application/xv+xml');
  FFileType.AddOrSetValue('xhvml', 'application/xv+xml');
  FFileType.AddOrSetValue('xvml', 'application/xv+xml');
  FFileType.AddOrSetValue('xvm', 'application/xv+xml');
  FFileType.AddOrSetValue('yang', 'application/yang');
  FFileType.AddOrSetValue('yin', 'application/yin+xml');
  FFileType.AddOrSetValue('zip', 'application/zip');
  FFileType.AddOrSetValue('adp', 'audio/adpcm');
  FFileType.AddOrSetValue('au', 'audio/basic');
  FFileType.AddOrSetValue('snd', 'audio/basic');
  FFileType.AddOrSetValue('mid', 'audio/midi');
  FFileType.AddOrSetValue('midi', 'audio/midi');
  FFileType.AddOrSetValue('kar', 'audio/midi');
  FFileType.AddOrSetValue('rmi', 'audio/midi');
  FFileType.AddOrSetValue('mp4a', 'audio/mp4');
  FFileType.AddOrSetValue('mpga', 'audio/mpeg');
  FFileType.AddOrSetValue('mp2', 'audio/mpeg');
  FFileType.AddOrSetValue('mp2a', 'audio/mpeg');
  FFileType.AddOrSetValue('mp3', 'audio/mpeg');
  FFileType.AddOrSetValue('m2a', 'audio/mpeg');
  FFileType.AddOrSetValue('m3a', 'audio/mpeg');
  FFileType.AddOrSetValue('oga', 'audio/ogg');
  FFileType.AddOrSetValue('ogg', 'audio/ogg');
  FFileType.AddOrSetValue('spx', 'audio/ogg');
  FFileType.AddOrSetValue('s3m', 'audio/s3m');
  FFileType.AddOrSetValue('sil', 'audio/silk');
  FFileType.AddOrSetValue('uva', 'audio/vnd.dece.audio');
  FFileType.AddOrSetValue('uvva', 'audio/vnd.dece.audio');
  FFileType.AddOrSetValue('eol', 'audio/vnd.digital-winds');
  FFileType.AddOrSetValue('dra', 'audio/vnd.dra');
  FFileType.AddOrSetValue('dts', 'audio/vnd.dts');
  FFileType.AddOrSetValue('dtshd', 'audio/vnd.dts.hd');
  FFileType.AddOrSetValue('lvp', 'audio/vnd.lucent.voice');
  FFileType.AddOrSetValue('pya', 'audio/vnd.ms-playready.media.pya');
  FFileType.AddOrSetValue('ecelp4800', 'audio/vnd.nuera.ecelp4800');
  FFileType.AddOrSetValue('ecelp7470', 'audio/vnd.nuera.ecelp7470');
  FFileType.AddOrSetValue('ecelp9600', 'audio/vnd.nuera.ecelp9600');
  FFileType.AddOrSetValue('rip', 'audio/vnd.rip');
  FFileType.AddOrSetValue('weba', 'audio/webm');
  FFileType.AddOrSetValue('aac', 'audio/x-aac');
  FFileType.AddOrSetValue('aif', 'audio/x-aiff');
  FFileType.AddOrSetValue('aiff', 'audio/x-aiff');
  FFileType.AddOrSetValue('aifc', 'audio/x-aiff');
  FFileType.AddOrSetValue('caf', 'audio/x-caf');
  FFileType.AddOrSetValue('flac', 'audio/x-flac');
  FFileType.AddOrSetValue('mka', 'audio/x-matroska');
  FFileType.AddOrSetValue('m3u', 'audio/x-mpegurl');
  FFileType.AddOrSetValue('wax', 'audio/x-ms-wax');
  FFileType.AddOrSetValue('wma', 'audio/x-ms-wma');
  FFileType.AddOrSetValue('ram', 'audio/x-pn-realaudio');
  FFileType.AddOrSetValue('ra', 'audio/x-pn-realaudio');
  FFileType.AddOrSetValue('rmp', 'audio/x-pn-realaudio-plugin');
  FFileType.AddOrSetValue('wav', 'audio/x-wav');
  FFileType.AddOrSetValue('xm', 'audio/xm');
  FFileType.AddOrSetValue('cdx', 'chemical/x-cdx');
  FFileType.AddOrSetValue('cif', 'chemical/x-cif');
  FFileType.AddOrSetValue('cmdf', 'chemical/x-cmdf');
  FFileType.AddOrSetValue('cml', 'chemical/x-cml');
  FFileType.AddOrSetValue('csml', 'chemical/x-csml');
  FFileType.AddOrSetValue('xyz', 'chemical/x-xyz');
  FFileType.AddOrSetValue('bmp', 'image/bmp');
  FFileType.AddOrSetValue('cgm', 'image/cgm');
  FFileType.AddOrSetValue('g3', 'image/g3fax');
  FFileType.AddOrSetValue('gif', 'image/gif');
  FFileType.AddOrSetValue('ief', 'image/ief');
  FFileType.AddOrSetValue('jpeg', 'image/jpeg');
  FFileType.AddOrSetValue('jpg', 'image/jpeg');
  FFileType.AddOrSetValue('jpe', 'image/jpeg');
  FFileType.AddOrSetValue('ktx', 'image/ktx');
  FFileType.AddOrSetValue('png', 'image/png');
  FFileType.AddOrSetValue('btif', 'image/prs.btif');
  FFileType.AddOrSetValue('sgi', 'image/sgi');
  FFileType.AddOrSetValue('svg', 'image/svg+xml');
  FFileType.AddOrSetValue('svgz', 'image/svg+xml');
  FFileType.AddOrSetValue('tiff', 'image/tiff');
  FFileType.AddOrSetValue('tif', 'image/tiff');
  FFileType.AddOrSetValue('psd', 'image/vnd.adobe.photoshop');
  FFileType.AddOrSetValue('uvi', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvvi', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvg', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('uvvg', 'image/vnd.dece.graphic');
  FFileType.AddOrSetValue('sub', 'image/vnd.dvb.subtitle');
  FFileType.AddOrSetValue('djvu', 'image/vnd.djvu');
  FFileType.AddOrSetValue('djv', 'image/vnd.djvu');
  FFileType.AddOrSetValue('dwg', 'image/vnd.dwg');
  FFileType.AddOrSetValue('dxf', 'image/vnd.dxf');
  FFileType.AddOrSetValue('fbs', 'image/vnd.fastbidsheet');
  FFileType.AddOrSetValue('fpx', 'image/vnd.fpx');
  FFileType.AddOrSetValue('fst', 'image/vnd.fst');
  FFileType.AddOrSetValue('mmr', 'image/vnd.fujixerox.edmics-mmr');
  FFileType.AddOrSetValue('rlc', 'image/vnd.fujixerox.edmics-rlc');
  FFileType.AddOrSetValue('mdi', 'image/vnd.ms-modi');
  FFileType.AddOrSetValue('wdp', 'image/vnd.ms-photo');
  FFileType.AddOrSetValue('npx', 'image/vnd.net-fpx');
  FFileType.AddOrSetValue('wbmp', 'image/vnd.wap.wbmp');
  FFileType.AddOrSetValue('xif', 'image/vnd.xiff');
  FFileType.AddOrSetValue('webp', 'image/webp');
  FFileType.AddOrSetValue('3ds', 'image/x-3ds');
  FFileType.AddOrSetValue('ras', 'image/x-cmu-raster');
  FFileType.AddOrSetValue('cmx', 'image/x-cmx');
  FFileType.AddOrSetValue('fh', 'image/x-freehand');
  FFileType.AddOrSetValue('fhc', 'image/x-freehand');
  FFileType.AddOrSetValue('fh4', 'image/x-freehand');
  FFileType.AddOrSetValue('fh5', 'image/x-freehand');
  FFileType.AddOrSetValue('fh7', 'image/x-freehand');
  FFileType.AddOrSetValue('ico', 'image/x-icon');
  FFileType.AddOrSetValue('sid', 'image/x-mrsid-image');
  FFileType.AddOrSetValue('pcx', 'image/x-pcx');
  FFileType.AddOrSetValue('pic', 'image/x-pict');
  FFileType.AddOrSetValue('pct', 'image/x-pict');
  FFileType.AddOrSetValue('pnm', 'image/x-portable-anymap');
  FFileType.AddOrSetValue('pbm', 'image/x-portable-bitmap');
  FFileType.AddOrSetValue('pgm', 'image/x-portable-graymap');
  FFileType.AddOrSetValue('ppm', 'image/x-portable-pixmap');
  FFileType.AddOrSetValue('rgb', 'image/x-rgb');
  FFileType.AddOrSetValue('tga', 'image/x-tga');
  FFileType.AddOrSetValue('xbm', 'image/x-xbitmap');
  FFileType.AddOrSetValue('xpm', 'image/x-xpixmap');
  FFileType.AddOrSetValue('xwd', 'image/x-xwindowdump');
  FFileType.AddOrSetValue('eml', 'message/rfc822');
  FFileType.AddOrSetValue('mime', 'message/rfc822');
  FFileType.AddOrSetValue('igs', 'model/iges');
  FFileType.AddOrSetValue('iges', 'model/iges');
  FFileType.AddOrSetValue('msh', 'model/mesh');
  FFileType.AddOrSetValue('mesh', 'model/mesh');
  FFileType.AddOrSetValue('silo', 'model/mesh');
  FFileType.AddOrSetValue('dae', 'model/vnd.collada+xml');
  FFileType.AddOrSetValue('dwf', 'model/vnd.dwf');
  FFileType.AddOrSetValue('gdl', 'model/vnd.gdl');
  FFileType.AddOrSetValue('gtw', 'model/vnd.gtw');
  FFileType.AddOrSetValue('mts', 'model/vnd.mts');
  FFileType.AddOrSetValue('vtu', 'model/vnd.vtu');
  FFileType.AddOrSetValue('wrl', 'model/vrml');
  FFileType.AddOrSetValue('vrml', 'model/vrml');
  FFileType.AddOrSetValue('x3db', 'model/x3d+binary');
  FFileType.AddOrSetValue('x3dbz', 'model/x3d+binary');
  FFileType.AddOrSetValue('x3dv', 'model/x3d+vrml');
  FFileType.AddOrSetValue('x3dvz', 'model/x3d+vrml');
  FFileType.AddOrSetValue('x3d', 'model/x3d+xml');
  FFileType.AddOrSetValue('x3dz', 'model/x3d+xml');
  FFileType.AddOrSetValue('appcache', 'text/cache-manifest');
  FFileType.AddOrSetValue('manifest', 'text/cache-manifest');
  FFileType.AddOrSetValue('ics', 'text/calendar');
  FFileType.AddOrSetValue('ifb', 'text/calendar');
  FFileType.AddOrSetValue('cmd', 'text/cmd');
  FFileType.AddOrSetValue('css', 'text/css');
  FFileType.AddOrSetValue('csv', 'text/csv');
  FFileType.AddOrSetValue('html', 'text/html');
  FFileType.AddOrSetValue('htm', 'text/html');
  FFileType.AddOrSetValue('n3', 'text/n3');
  FFileType.AddOrSetValue('txt', 'text/plain');
  FFileType.AddOrSetValue('text', 'text/plain');
  FFileType.AddOrSetValue('conf', 'text/plain');
  FFileType.AddOrSetValue('def', 'text/plain');
  FFileType.AddOrSetValue('list', 'text/plain');
  FFileType.AddOrSetValue('log', 'text/plain');
  FFileType.AddOrSetValue('in', 'text/plain');
  FFileType.AddOrSetValue('dsc', 'text/prs.lines.tag');
  FFileType.AddOrSetValue('rtx', 'text/richtext');
  FFileType.AddOrSetValue('sgml', 'text/sgml');
  FFileType.AddOrSetValue('sgm', 'text/sgml');
  FFileType.AddOrSetValue('tsv', 'text/tab-separated-values');
  FFileType.AddOrSetValue('t', 'text/troff');
  FFileType.AddOrSetValue('tr', 'text/troff');
  FFileType.AddOrSetValue('roff', 'text/troff');
  FFileType.AddOrSetValue('man', 'text/troff');
  FFileType.AddOrSetValue('me', 'text/troff');
  FFileType.AddOrSetValue('ms', 'text/troff');
  FFileType.AddOrSetValue('ttl', 'text/turtle');
  FFileType.AddOrSetValue('uri', 'text/uri-list');
  FFileType.AddOrSetValue('uris', 'text/uri-list');
  FFileType.AddOrSetValue('urls', 'text/uri-list');
  FFileType.AddOrSetValue('vcard', 'text/vcard');
  FFileType.AddOrSetValue('curl', 'text/vnd.curl');
  FFileType.AddOrSetValue('dcurl', 'text/vnd.curl.dcurl');
  FFileType.AddOrSetValue('scurl', 'text/vnd.curl.scurl');
  FFileType.AddOrSetValue('mcurl', 'text/vnd.curl.mcurl');
  FFileType.AddOrSetValue('sub', 'text/vnd.dvb.subtitle');
  FFileType.AddOrSetValue('fly', 'text/vnd.fly');
  FFileType.AddOrSetValue('flx', 'text/vnd.fmi.flexstor');
  FFileType.AddOrSetValue('gv', 'text/vnd.graphviz');
  FFileType.AddOrSetValue('3dml', 'text/vnd.in3d.3dml');
  FFileType.AddOrSetValue('spot', 'text/vnd.in3d.spot');
  FFileType.AddOrSetValue('jad', 'text/vnd.sun.j2me.app-descriptor');
  FFileType.AddOrSetValue('wml', 'text/vnd.wap.wml');
  FFileType.AddOrSetValue('wmls', 'text/vnd.wap.wmlscript');
  FFileType.AddOrSetValue('s', 'text/x-asm');
  FFileType.AddOrSetValue('asm', 'text/x-asm');
  FFileType.AddOrSetValue('c', 'text/x-c');
  FFileType.AddOrSetValue('cc', 'text/x-c');
  FFileType.AddOrSetValue('cxx', 'text/x-c');
  FFileType.AddOrSetValue('cpp', 'text/x-c');
  FFileType.AddOrSetValue('h', 'text/x-c');
  FFileType.AddOrSetValue('hh', 'text/x-c');
  FFileType.AddOrSetValue('dic', 'text/x-c');
  FFileType.AddOrSetValue('f', 'text/x-fortran');
  FFileType.AddOrSetValue('for', 'text/x-fortran');
  FFileType.AddOrSetValue('f77', 'text/x-fortran');
  FFileType.AddOrSetValue('f90', 'text/x-fortran');
  FFileType.AddOrSetValue('java', 'text/x-java-source');
  FFileType.AddOrSetValue('opml', 'text/x-opml');
  FFileType.AddOrSetValue('p', 'text/x-pascal');
  FFileType.AddOrSetValue('pas', 'text/x-pascal');
  FFileType.AddOrSetValue('nfo', 'text/x-nfo');
  FFileType.AddOrSetValue('etx', 'text/x-setext');
  FFileType.AddOrSetValue('sfv', 'text/x-sfv');
  FFileType.AddOrSetValue('uu', 'text/x-uuencode');
  FFileType.AddOrSetValue('vcs', 'text/x-vcalendar');
  FFileType.AddOrSetValue('vcf', 'text/x-vcard');
  FFileType.AddOrSetValue('vcf', 'text/x-yaml');
  FFileType.AddOrSetValue('xml', 'text/xml');
  FFileType.AddOrSetValue('xsl', 'text/xml');
  FFileType.AddOrSetValue('dtd', 'text/xml-dtd');
  FFileType.AddOrSetValue('yaml', 'text/yaml');
  FFileType.AddOrSetValue('3gp', 'video/3gpp');
  FFileType.AddOrSetValue('3g2', 'video/3gpp2');
  FFileType.AddOrSetValue('h261', 'video/h261');
  FFileType.AddOrSetValue('h263', 'video/h263');
  FFileType.AddOrSetValue('h264', 'video/h264');
  FFileType.AddOrSetValue('jpgv', 'video/jpeg');
  FFileType.AddOrSetValue('jpm', 'video/jpm');
  FFileType.AddOrSetValue('jpgm', 'video/jpm');
  FFileType.AddOrSetValue('mj2', 'video/mj2');
  FFileType.AddOrSetValue('mjp2', 'video/mj2');
  FFileType.AddOrSetValue('mp4', 'video/mp4');
  FFileType.AddOrSetValue('mp4v', 'video/mp4');
  FFileType.AddOrSetValue('mpg4', 'video/mp4');
  FFileType.AddOrSetValue('mpeg', 'video/mpeg');
  FFileType.AddOrSetValue('mpg', 'video/mpeg');
  FFileType.AddOrSetValue('mpe', 'video/mpeg');
  FFileType.AddOrSetValue('m1v', 'video/mpeg');
  FFileType.AddOrSetValue('m2v', 'video/mpeg');
  FFileType.AddOrSetValue('ogv', 'video/ogg');
  FFileType.AddOrSetValue('qt', 'video/quicktime');
  FFileType.AddOrSetValue('mov', 'video/quicktime');
  FFileType.AddOrSetValue('uvh', 'video/vnd.dece.hd');
  FFileType.AddOrSetValue('uvvh', 'video/vnd.dece.hd');
  FFileType.AddOrSetValue('uvm', 'video/vnd.dece.mobile');
  FFileType.AddOrSetValue('uvvm', 'video/vnd.dece.mobile');
  FFileType.AddOrSetValue('uvp', 'video/vnd.dece.pd');
  FFileType.AddOrSetValue('uvvp', 'video/vnd.dece.pd');
  FFileType.AddOrSetValue('uvs', 'video/vnd.dece.sd');
  FFileType.AddOrSetValue('uvvs', 'video/vnd.dece.sd');
  FFileType.AddOrSetValue('uvv', 'video/vnd.dece.video');
  FFileType.AddOrSetValue('uvvv', 'video/vnd.dece.video');
  FFileType.AddOrSetValue('dvb', 'video/vnd.dvb.file');
  FFileType.AddOrSetValue('fvt', 'video/vnd.fvt');
  FFileType.AddOrSetValue('mxu', 'video/vnd.mpegurl');
  FFileType.AddOrSetValue('m4u', 'video/vnd.mpegurl');
  FFileType.AddOrSetValue('pyv', 'video/vnd.ms-playready.media.pyv');
  FFileType.AddOrSetValue('uvu', 'video/vnd.uvvu.mp4');
  FFileType.AddOrSetValue('uvvu', 'video/vnd.uvvu.mp4');
  FFileType.AddOrSetValue('viv', 'video/vnd.vivo');
  FFileType.AddOrSetValue('webm', 'video/webm');
  FFileType.AddOrSetValue('f4v', 'video/x-f4v');
  FFileType.AddOrSetValue('fli', 'video/x-fli');
  FFileType.AddOrSetValue('flv', 'video/x-flv');
  FFileType.AddOrSetValue('m4v', 'video/x-m4v');
  FFileType.AddOrSetValue('mkv', 'video/x-matroska');
  FFileType.AddOrSetValue('mk3d', 'video/x-matroska');
  FFileType.AddOrSetValue('mks', 'video/x-matroska');
  FFileType.AddOrSetValue('mng', 'video/x-mng');
  FFileType.AddOrSetValue('asf', 'video/x-ms-asf');
  FFileType.AddOrSetValue('asx', 'video/x-ms-asf');
  FFileType.AddOrSetValue('vob', 'video/x-ms-vob');
  FFileType.AddOrSetValue('wm', 'video/x-ms-wm');
  FFileType.AddOrSetValue('wmv', 'video/x-ms-wmv');
  FFileType.AddOrSetValue('wmx', 'video/x-ms-wmx');
  FFileType.AddOrSetValue('wvx', 'video/x-ms-wvx');
  FFileType.AddOrSetValue('avi', 'video/x-msvideo');
  FFileType.AddOrSetValue('movie', 'video/x-sgi-movie');
  FFileType.AddOrSetValue('smv', 'video/x-smv');
  FFileType.AddOrSetValue('ice', 'x-conference/x-cooltalk');
  {$ENDREGION}
end;
"
c:\fontes\Curso Horse\modules\horse\tests\src\tests\Tests.Horse.Core.Param.pas;Método muito longo;25;"    function RequiredMessage(const AKey: String): string;
    function ConvertErrorMessage(const AKey, AValue, AType: String): string;

  public
    [Setup]
    procedure Setup;

    [TearDown]
    procedure TearDown;

    [Test]
    procedure ContainsKey;

    [Test]
    procedure NotContainsKey;

    [Test]
    procedure ContainsKeyDiferentCase;

    [Test]
    procedure ContainsValue;

    [Test]
    procedure NotContainsValue;

    [Test]
    procedure ToArray;

    [Test]
    procedure TryGetValueTrue;

    [Test]
    procedure TryGetValueFalse;

    [Test]
    procedure TryGetValueDiferentCase;

    [Test]
    procedure Content;

    [Test]
    procedure Count;

    [Test]
    procedure List;

    [Test]
    procedure Index;

    [Test]
    procedure IndexNotFound;

    [Test]
    procedure IndexDiferentCase;

    [Test]
    procedure AsBoolean;

    [Test]
    [TestCase('TrueValue1', 'True,true,true')]
    [TestCase('TrueValue2', '1,1,true')]
    [TestCase('FalseValue1', 'False,true,false')]
    [TestCase('FalseValue2', '5,1,false')]
    procedure AsBooleanParam(AParamValue, ATrueValue: string; AResult: Boolean);

    [Test]
    procedure AsBooleanNotRequired;

    [Test]
    procedure AsBooleanRequired;

    [Test]
    procedure AsCurrency;

    [Test]
    procedure AsCurrencyDecimalSeparator;

    [Test]
    procedure AsCurrencyNotRequired;

    [Test]
    procedure AsCurrencyRequired;

    [Test]
    procedure AsCurrencyErrorFormat;

    [Test]
    procedure AsDateTime;

    [Test]
    procedure AsDateTimeRequired;

    [Test]
    procedure AsDateTimeNotRequired;

    [Test]
    procedure AsDateTimeOnlyData;

    [Test]
    procedure AsDateTimeChangeFormat;

    [Test]
    procedure AsDateTimeInvalidFormat;

    [Test]
    procedure AsDate;

    [Test]
    procedure AsDateRequired;

    [Test]
    procedure AsDateNotRequired;

    [Test]
    procedure AsDateChangeFormat;

    [Test]
    procedure AsDateInvalidFormat;

    [Test]
    procedure AsExtended;

    [Test]
    procedure AsExtendedDecimalSeparator;

    [Test]
    procedure AsExtendedNotRequired;

    [Test]
    procedure AsExtendedRequired;

    [Test]
    procedure AsExtendedErrorFormat;

    [Test]
    procedure AsFloat;

    [Test]
    procedure AsFloatDecimalSeparator;

    [Test]
    procedure AsFloatNotRequired;

    [Test]
    procedure AsFloatRequired;

    [Test]
    procedure AsFloatErrorFormat;

    [Test]
    procedure AsInteger;

    [Test]
    procedure AsIntegerNotRequired;

    [Test]
    procedure AsIntegerRequired;

    [Test]
    procedure AsIntegerErrorFormat;

    [Test]
    procedure AsInt64;

    [Test]
    procedure AsInt64NotRequired;

    [Test]
    procedure AsInt64Required;

    [Test]
    procedure AsInt64ErrorFormat;

    [Test]
    procedure AsISO8601DateTime;

    [Test]
    procedure AsISO8601DateTimeOnlyData;

    [Test]
    procedure AsISO8601DateTimeNotRequired;

    [Test]
    procedure AsISO8601DateTimeRequired;

    [Test]
    procedure AsISO8601DateTimeErrorFormat;

    [Test]
    procedure AsStream;

    [Test]
    procedure AsStreamNotFoundNotRequired;

    [Test]
    procedure AsStreamNotFoundRequired;

    [Test]
    procedure AsStreamSaveToFile;

    [Test]
    procedure AsStreamNotFoundSaveToFile;

    [Test]
    procedure AsString;

    [Test]
    procedure AsStringRequired;

    [Test]
    procedure AsStringNotRequired;

    [Test]
    procedure AsStringDiferentCase;

    [Test]
    procedure AsTime;

    [Test]
    procedure AsTimeRequired;

    [Test]
    procedure AsTimeNotRequired;

    [Test]
    procedure AsTimeChangeFormat;

    [Test]
    procedure AsTimeInvalidFormat;
  end;
"
c:\fontes\lerjasonparagrid\Model\uModelJSON.pas;Método muito longo;57;"class procedure TJSONModel.CarregarJSONArrayGenerico(
  const Caminho: string;
  Pagina, LinhasPorPagina: Integer;
  DataSet: TClientDataSet;
  TreeView: TTreeView;
  out Total: Integer;
  ProgressBar: TProgressBar = nil);
var
  JSONStr: string;
  JSONValue: TJSONValue;
  JSONArray: TJSONArray;
  Campos: TDictionary<string, TFieldType>;
  ListaCampos: TArray<string>;
  Campo: string;
  Pair: TJSONPair;
  DummyInt: Integer;
  i, j, StartIdx, EndIdx: Integer;
  Obj: TJSONObject;
  Fld: TField;
  Objeto: TJSONObject;
  RootNode, Sub: TTreeNode;
begin
  JSONStr := TFile.ReadAllText(Caminho, TEncoding.UTF8);
  JSONStr := CorrigirJSONSimples(JSONStr);
  JSONValue := TJSONObject.ParseJSONValue(JSONStr);

  if not Assigned(JSONValue) then
    raise Exception.Create('Conteúdo JSON inválido.');

  if JSONValue is TJSONArray then
    JSONArray := TJSONArray(JSONValue)
  else if JSONValue is TJSONObject then
  begin
    JSONArray := TJSONArray.Create;
    JSONArray.AddElement(JSONValue); // transfere a posse
  end
  else
    raise Exception.Create('JSON não é um array ou objeto.');

  Total := JSONArray.Count;
  if Total = 0 then Exit;

  Campos := TDictionary<string, TFieldType>.Create;
  try
    for i := 0 to JSONArray.Count - 1 do
    begin
      if JSONArray.Items[i] is TJSONObject then
      begin
        Obj := JSONArray.Items[i] as TJSONObject;
        for j := 0 to Obj.Count - 1 do
        begin
          Pair := Obj.Pairs[j];
          Campo := Pair.JsonString.Value;
          if not Campos.ContainsKey(Campo) then
          begin
            if TryStrToInt(Pair.JsonValue.Value, DummyInt) then
              Campos.Add(Campo, ftInteger)
            else if SameText(Pair.JsonValue.Value, 'true') or SameText(Pair.JsonValue.Value, 'false') then
              Campos.Add(Campo, ftBoolean)
            else
              Campos.Add(Campo, ftString);
          end;
"
c:\fontes\Loja\Loja\Unit1.pas;Uso de with;67;"with D2Bridge.Items.add do"
c:\fontes\Loja\Loja\Unit1.pas;Uso de with;90;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\Loja\Loja\Unit_D2Bridge_Server_Console.pas;Método muito longo;231;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TLojaWebAppGlobal.Create(nil);
 
 //App Information
 {
 D2BridgeServerController.ServerAppTitle:= 'My App D2Bridge';
 D2BridgeServerController.ServerAppDescription:= 'My App Descrition';
 D2BridgeServerController.ServerAppAuthor:= 'Talis Jonatas Gomes';
 }
  
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'Loja';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TForm_Login;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Letï¿½s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;104;"with D2Bridge.Items.add do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;109;"with Card do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;115;"with BodyItems.Add do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;117;"with Row.Items.Add do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;120;"with Row.Items.Add do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;123;"with Row.Items.Add do"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;124;"with Col.Items.add do //Example Edit + Button same row and col"
c:\fontes\Loja\Loja\Unit_Login.pas;Uso de with;130;"with Row.Items.Add do"
c:\fontes\Loja\Loja2\Unit1.pas;Uso de with;64;"with D2Bridge.Items.add do"
c:\fontes\Loja\Loja2\Unit1.pas;Uso de with;87;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\Loja\Loja2\Unit_D2Bridge_Server_Console.pas;Método muito longo;231;"class procedure TD2BridgeServerConsole.Run;
begin
 D2BridgeServerController:= TLoja2WebAppGlobal.Create(nil);
 
 //App Information
 {
 D2BridgeServerController.ServerAppTitle:= 'My App D2Bridge';
 D2BridgeServerController.ServerAppDescription:= 'My App Descrition';
 D2BridgeServerController.ServerAppAuthor:= 'Talis Jonatas Gomes';
 }
  
 vServerPort:= D2BridgeServerController.Prism.INIConfig.ServerPort(8888);
 vServerName:= D2BridgeServerController.Prism.INIConfig.ServerName('D2Bridge Server');

 D2BridgeServerController.APPName:= 'Loja2';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 D2BridgeServerController.PrimaryFormClass:= TForm1;

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 //D2BridgeServerController.Prism.Options.DataSetLog:= true;

 D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Letï¿½s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\Loja\Loja3\Loja3\Unit1.pas;Uso de with;67;"with D2Bridge.Items.add do"
c:\fontes\Loja\Loja3\Loja3\Unit1.pas;Uso de with;90;"with PrismControl.AsMainMenu do  //or in SideMenu use asSideMenu"
c:\fontes\Loja\Loja3\Loja3\Unit_D2Bridge_Server.pas;Uso de with;93;"with Button_Options.ClientToScreen(point(0, 1 + Button_Options.Height)) do"
c:\fontes\Loja\Loja3\Loja3\Unit_D2Bridge_Server.pas;Método muito longo;97;"procedure TForm_D2Bridge_Server.Button_StartClick(Sender: TObject);
begin
 D2BridgeServerController.PrimaryFormClass:= TForm_Login;

 D2BridgeServerController.APPName:= 'Loja3';
 //D2BridgeServerController.APPDescription:= 'My D2Bridge Web APP';

 //Security
 {
 D2BridgeServerController.Prism.Options.Security.Enabled:= false; //True Default
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSpamhausList:= false; //Disable Default Blocked Spamhaus list
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('192.168.10.31'); //Block just IP
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.Add('200.200.200.0/24'); //Block CDIR
 D2BridgeServerController.Prism.Options.Security.IP.IPv4BlackList.EnableSelfDelist:= false; //Disable Delist
 D2BridgeServerController.Prism.Options.Security.IP.IPv4WhiteList.Add('192.168.0.1'); //Add IP or CDIR to WhiteList
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitNewConnPerIPMin:= 30; //Limite Connections from IP *minute
 D2BridgeServerController.Prism.Options.Security.IP.IPConnections.LimitActiveSessionsPerIP:= 50; //Limite Sessions from IP
 D2BridgeServerController.Prism.Options.Security.UserAgent.EnableCrawlerUserAgents:= false; //Disable Default Blocked Crawler User Agents
 D2BridgeServerController.Prism.Options.Security.UserAgent.Add('NewUserAgent'); //Block User Agent
 D2BridgeServerController.Prism.Options.Security.UserAgent.Delete('MyUserAgent'); //Allow User Agent
 }

 //seconds to Send Session to TimeOut and Destroy after Disconnected
 //D2BridgeServerController.Prism.Options.SessionTimeOut:= 300;

 //secounds to set Session in Idle
 //D2BridgeServerController.Prism.Options.SessionIdleTimeOut:= 0;


 D2BridgeServerController.Prism.Options.IncludeJQuery:= true;

 D2BridgeServerController.Prism.Options.DataSetLog:= true;

 //D2BridgeServerController.Prism.Options.CoInitialize:= true;

 //D2BridgeServerController.Prism.Options.VCLStyles:= false;

 //D2BridgeServerController.Prism.Options.ShowError500Page:= false;

 //Uncomment to Dual Mode force http just in Debug Mode
 //if IsDebuggerPresent then
 // D2BridgeServerController.Prism.Options.SSL:= false
 //else
 //D2BridgeServerController.Prism.Options.SSL:= true;

 D2BridgeServerController.Languages:= [TD2BridgeLang.Portuguese];

 if D2BridgeServerController.Prism.Options.SSL then
 begin
  //Cert File
  D2BridgeServerController.Prism.SSLOptions.CertFile:= '';
  //Cert Key Domain File
  D2BridgeServerController.Prism.SSLOptions.KeyFile:= '';
  //Cert Intermediate (case Letï¿½s Encrypt)
  D2BridgeServerController.Prism.SSLOptions.RootCertFile:= '';
 end;
"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;104;"with D2Bridge.Items.add do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;109;"with Card do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;115;"with BodyItems.Add do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;117;"with Row.Items.Add do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;120;"with Row.Items.Add do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;123;"with Row.Items.Add do"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;124;"with Col.Items.add do //Example Edit + Button same row and col"
c:\fontes\Loja\Loja3\Loja3\Unit_Login.pas;Uso de with;130;"with Row.Items.Add do"
c:\fontes\mostrawmi\Unit1.pas;Método muito longo;90;"procedure TForm1.ListWMIClasses;
var
  Locator: OLEVariant;
  Services: OLEVariant;
  ClassesEnum: IEnumvariant;
  WMIClass: OLEVariant;
  PropertiesEnum: IEnumvariant;
  Prop: OLEVariant;
  Fetched: Cardinal;
  CurrClass: string;
  ScriptBuilder: TStringList;
  ClassProps: TStringList;
  i: Integer;
  FirebirdType: string;
  DatabasePath, User, Password: string;
begin
  ScriptBuilder := TStringList.Create;
  ClassProps := TStringList.Create;
  ClassProps.Sorted := True;
  ClassProps.Duplicates := dupIgnore;

  // Ajuste aqui o caminho, usuário e senha do banco Firebird desejado
  DatabasePath := 'C:\bancoWMI.fdb';
  User := 'SYSDBA';
  Password := 'masterkey';

  CoInitialize(nil);
  try
    try
      Locator := CreateOleObject('WbemScripting.SWbemLocator');
      Services := Locator.ConnectServer('.', 'root\cimv2');
      ClassesEnum := IUnknown(Services.ExecQuery('SELECT * FROM meta_class', 'WQL', 0)._NewEnum) as IEnumVariant;

      // Criação do banco de dados no script
      ScriptBuilder.Add('-- Script gerado para criação do banco Firebird e tabelas das classes WMI');
      ScriptBuilder.Add(Format('CREATE DATABASE ''%s'' USER ''%s'' PASSWORD ''%s'';', [DatabasePath, User, Password]));
      ScriptBuilder.Add('');

      while ClassesEnum.Next(1, WMIClass, Fetched) = 0 do
      begin
        CurrClass := WMIClass.Path_.Class;

        Memo1.Lines.Add('Classe: ' + CurrClass);
        Memo1.Lines.Add('  Propriedades:');

        ClassProps.Clear;

        PropertiesEnum := IUnknown(WMIClass.Properties_._NewEnum) as IEnumVariant;

        while PropertiesEnum.Next(1, Prop, Fetched) = 0 do
        begin
          FirebirdType := CIMTypeToFirebirdType(Prop.CIMType);

          ClientDataSet1.Append;
          ClientDataSet1.FieldByName('Tabela').AsString := CurrClass;
          ClientDataSet1.FieldByName('Campos').AsString := Prop.Name;
          ClientDataSet1.FieldByName('Tamanho').AsString := VarToStr(Prop.CIMType);
          ClientDataSet1.Post;

          Memo1.Lines.Add('    ' + Prop.Name + ' : ' + VarToStr(Prop.CIMType));

          ClassProps.Add(Format('  ""%s"" %s', [Prop.Name, FirebirdType]));

          Prop := Unassigned;
        end;
"
c:\fontes\Nova pasta\geradorlicitacao\UPrincipal.pas;Método muito longo;109;"    procedure Button1Click(Sender: TObject);
    procedure Edit1Change(Sender: TObject);
    procedure DBGrid1DblClick(Sender: TObject);
    procedure Edit3Change(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure DBGrid1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure DBGrid1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure Button2Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1ColEnter(Sender: TObject);
    procedure FDQuery1ativoGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure SpeedButton1Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure BtnDesmarcarItensClick(Sender: TObject);
    procedure BtnExrpotarTabelaDeItensClick(Sender: TObject);
    procedure CBCabosClick(Sender: TObject);
    procedure ClientDataSet1FilterRecord(DataSet: TDataSet;
      var Accept: Boolean);

  private
    { Private declarations }
     ShiftClick: Boolean;
     ShiftStartRow, ShiftEndRow: Integer;
     ListaItens: TStringList;

     procedure CarregarGrid;
    procedure DesmarcarTodosItens;
    procedure ExpDOC(DataSet: TDataSet; Arq: string);
    procedure FiltrarRegistros;
    procedure CriarDataSet;
  public
    { Public declarations }
    qryFabricantes: TFDQuery;
    numero: integer;
    PartNumbers: TPartNumberInfo; //TStringList;
    procedure ExportToUTF8Text(descritivo: string; outputPath: string);
    procedure CopiarParaAreaDeTransferencia(const texto: string);
    procedure ExportSelectedRecordsToTextFiles;
    procedure SelectRows(StartRow, EndRow: Integer);
    procedure Swap(var A, B: Integer);
    procedure GerarArquivoWord;
    procedure ConcatenateWordFiles(const FilePaths: array of string; const OutputFile: string);
    function FindAllDocxFiles(const DirectoryPath: string): TArray<string>;
    function FiltrarNomeArquivo(const NomeOriginal: string): string;
    procedure GerarAruivoWordunico;
    function ExtrairNomeArquivo(const NomeOriginal: string): string;
  end;
"
c:\fontes\Projeto Rodas\CriadorDeBancoWheelPro\uPrincipal.pas;Método muito longo;94;"procedure TFrmPrincipal.BtnCriarBaseClick(Sender: TObject);
var
  Connection: TFDConnection;
  Query: TFDQuery;
  ScriptFile: TStringList;
  OpenDialog: TOpenDialog;
  ScriptText: string;
  ScriptsPath: string;
  DatabaseName: string;
begin
  ScriptsPath := ExtractFilePath(Application.ExeName) + 'scripts\'; // Caminho para a pasta ""scripts"" da aplicação

  OpenDialog            := TOpenDialog.Create(nil);
  OpenDialog.Filter     := 'Arquivos SQL (*.sql)|*.sql'; // Filtro para selecionar apenas arquivos SQL
  OpenDialog.InitialDir := ScriptsPath; // Define a pasta inicial do OpenDialog como a pasta ""scripts"" da aplicação

  if OpenDialog.Execute then
  begin
    Connection := TFDConnection.Create(nil);
    try
      Connection.DriverName := 'MySQL'; // Driver do FireDAC para MySQL
      Connection.Params.Add('Server=localhost'); // Endereço do servidor MySQL
      Connection.Params.Add('User_Name=root'); // Usuário do MySQL
      Connection.Params.Add('Password=19741974'); // Senha do MySQL

      Connection.Connected := True;

      Query := TFDQuery.Create(nil);
      try
        Query.Connection := Connection;

        ScriptFile := TStringList.Create;
        try
          ScriptFile.LoadFromFile(OpenDialog.FileName); // Carrega o script do arquivo selecionado

          ScriptText := ScriptFile.Text; // Obtém o texto do script

          // Substitui o texto ""fulanorodas2"" pelo valor do TEdit (Edit1.Text)
          ScriptText := StringReplace(ScriptText, 'fulanorodas2', Edit1.Text, [rfReplaceAll]);

          Query.SQL.Text := ScriptText; // Define o script carregado como texto SQL do Query

          // Procura o nome do banco de dados dentro do script
          DatabaseName := ExtractDatabaseNameFromScript(ScriptText);

          if DatabaseName <> '' then
          begin
            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Criando o banco de dados: ' + DatabaseName);

            // Cria o banco de dados com o nome extraído
            Query.SQL.Text := 'CREATE SCHEMA IF NOT EXISTS `' + DatabaseName + '`';
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado com sucesso.');

            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Executando o restante do script...');

            // Executa o restante do script
            Query.SQL.Text := ScriptText;
            Query.ExecSQL;

            // Adicionar registro à tabela de login
            Memo1.Lines.Add('Adicionando o usuario admin à tabela de login...');

            Query.SQL.Text :=
              'INSERT INTO login (usuario, senha, email, tipo, ativo, idcliente) ' +
              'VALUES (:usuario, :senha, :email, :tipo, :ativo, :idcliente)';
            Query.Params.ParamByName('usuario').AsString    := 'admin';
            Query.Params.ParamByName('senha').AsString      := '123';
            Query.Params.ParamByName('email').AsString      := Edit2.Text;
            Query.Params.ParamByName('tipo').AsString       := 'A';
            Query.Params.ParamByName('ativo').AsString      := 'S';
            Query.Params.ParamByName('idcliente').AsInteger := 1;
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado e script executado com sucesso: ' + DatabaseName);

            //se é demo temos que adicionar a data do termino do demo na tabela registro
            if cbDemo.Checked then
            begin

              //id, id_chave, chave, data_inc (now) ,  data_exp now+30, contrasenha, ativado ='S' e serialhd
              Query.SQL.Clear;
              Query.SQL.Text :=
              'INSERT INTO registro (id, id_chave, data_inc, data_exp, contrasenha, ativo, serialhd ) ' +
              'VALUES (:id, :id_chave, :data_inc, :data_exp, :contrasenha, :ativo, :serialhd)';
              Query.Params.ParamByName('id').AsString          := '1';
              Query.Params.ParamByName('id_chave').AsString    := '1';
              Query.Params.ParamByName('data_inc').AsDate      := now;
              Query.Params.ParamByName('data_exp').AsDate      := now+30;
              Query.Params.ParamByName('contrasenha').AsString := 'Conect';
              Query.Params.ParamByName('ativo').AsString       := 'S';
              Query.Params.ParamByName('serialhd').AsString    := '0';
              Query.ExecSQL;

              Memo1.Lines.Add('Foi criada uma data de expiração ' + DateToStr(Now+30) + ' , pois o programa foi marcado como Demo');
            end;
"
c:\fontes\Projeto Rodas\DAO\DAO.Clientes.pas;Método muito longo;89;"function TClientes.AlterarCliente(Cliente: TClientes): Boolean;
begin
  //Alterar oo cliente do parâmetro acNPJ
  Result:=False;
  qry:=qry.Create(nil);
  qry.Connection := FConn;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE fulanorodas.clientes  ' +
                  'SET                          ' +
                  'idclientes  = :idclientes,   ' +
                  'razao       = :razao,        ' +
                  'cnpj_cpf    = :cnpj_cpf,     ' +
                  'endereco    = :endereco,     ' +
                  'numero      = :numero,       ' +
                  'complemento = :complemento,  ' +
                  'cep         = :cep,          ' +
                  'cidade      = :cidade,       ' +
                  'bairro      = :bairro,       ' +
                  'ativo       = :ativo,        ' +
                  'uf          = :uf            ' +
                  'WHERE                        ' +
                  'idclientes = :CNPJ           ';

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

    qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB
    qry.ParamByName('CNPJ').DataType:= ftString;
    qry.ParamByName('CNPJ').AsString:= Cliente.cnpj;

    qry.ExecSQL;

    Result:=True;

  finally
    qry.Free;
  end;
"
c:\fontes\Projeto Rodas\DAO\DAO.Clientes.pas;Método muito longo;238;"function TClientes.SalvarCliente(Cliente: TClientes): Boolean;
var
  Ativo : string;
  UF    : string;
begin
  Result:= False;
  try
    qry:=TFDQuery.Create(nil);
    qry.Connection := FConn;
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' Clientes '    +
                '(idclientes, ' +
                'razao, '       +
                'cnpj_cpf, '    +
                'endereco, '    +
                'numero, '      +
                'complemento, ' +
                'cep, '         +
                'cidade, '      +
                'bairro, '      +
                'ativo, '       +
                'uf) '          +
                'VALUES ('      +
                ':idclientes, ' +
                ':razao, '      +
                ':cnpj_cpf, '   +
                ':endereco, '   +
                ':numero,  '    +
                ':complemento, '+
                ':cep, '        +
                ':cidade, '     +
                ':bairro, '     +
                ':ativo, '      +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB

     qry.ExecSQL;

     Result:=True;

  finally
    qry.Close;
    qry.Free;
  end;
"
c:\fontes\Projeto Rodas\DAO\Dao.Conexao.pas;Uso de with;73;"with Connection.Params do"
c:\fontes\Projeto Rodas\DAO\DAO.ConexaoLicencas.pas;Uso de with;72;"with Connection.Params do"
c:\fontes\Projeto Rodas\Dao.Conexao.pas;Uso de with;63;"with Connection.Params do"
c:\fontes\Projeto Rodas\Encriptografar\View\View.Principal.pas;Método muito longo;75;"procedure TFrmPrincipal.BtnEncriptarClick(Sender: TObject);
var
  IniFile: TIniFile;
  EncryptedServer   : string;
  EncryptedPassword : string;
  EncryptedDataBase : string;
  EncryptedUserName : string;
  EncryptedServerLicencas   : string;
  EncryptedPasswordLicencas : string;
  EncryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas : string;
  Funcoes: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Server.ini');
  Funcoes:= TCriptografia.Create;
  try
     EncryptedServer   := Funcoes.EncryptString(EdtDadosBancoServer.Text, 123);
     EncryptedPassword := Funcoes.EncryptString(EdtDadosBancoPassword.Text, 123);
     EncryptedDataBase := Funcoes.EncryptString(EdtDadosBancoDataBase.Text,123);
     EncryptedUserName := Funcoes.EncryptString(EdtDadosBancoUserName.Text,123);

     EncryptedServerLicencas   := Funcoes.EncryptString(EdtDadosLicenasServer.Text,123);
     EncryptedPasswordLicencas := Funcoes.EncryptString(EdtDadosLicencasPassword.Text,123);
     EncryptedDataBaseLicencas := Funcoes.EncryptString(EdtDadosLicenasDataBase.Text,123);
     EncryptedUserNameLicencas := Funcoes.EncryptString(EdtDadosLicencasUserName.Text,123);

     //Escreve no arquivo ini
     IniFile.WriteString('Banco de Dados', 'Server', EncryptedServer);
     IniFile.WriteString('Banco de Dados', 'Password', EncryptedPassword);
     IniFile.WriteString('Banco de Dados', 'Database', EncryptedDataBase);
     IniFile.WriteString('Banco de Dados', 'User_Name', EncryptedUserName);

     IniFile.WriteString('BancoLicencas', 'Server',    EncryptedServerLicencas);
     IniFile.WriteString('BancoLicencas', 'Password',  EncryptedPasswordLicencas);
     IniFile.WriteString('BancoLicencas', 'Database',  EncryptedDataBaseLicencas);
     IniFile.WriteString('BancoLicencas', 'User_Name', EncryptedUserNameLicencas);

     //Preenche os Edits da Aba Encriptada - Banco
     EdtEncryptadosBancoServer.Text   := EncryptedServer;
     EdtEncryptadosBancoPassword.Text := EncryptedPassword;
     EdtEncryptadosBancoDataBase.Text := EncryptedDataBase;
     EdtEncryptadosBancoUserName.Text := EncryptedUserName;

     //Preenche os Edits da Aba Encriptada - Banco Licenças
     EdtEncryptadosBancoLicencasServer.Text   := EncryptedServerLicencas;
     EdtEncryptadosBancoLicencasPassword.Text := EncryptedPasswordLicencas;
     EdtEncryptadosBancoLicencasDataBase.Text := EncryptedDataBaseLicencas;
     EdtEncryptadosBancoLicencasUserName.Text := EncryptedUserNameLicencas;

     inifile.UpdateFile;

  finally
    IniFile.Free;
    Funcoes.Free;
  end;
"
c:\fontes\Projeto Rodas\Encriptografar\View\View.Principal.pas;Método muito longo;133;"procedure TFrmPrincipal.CarregarEdits;
var
  IniFile: TIniFile;
  EncryptedServer    : string;
  DecryptedServer    : string;
  EncryptedPassword  : string;
  DecryptedPassword  : string;
  EncryptedDataBase  : string;
  DescryptedDataBase : string;
  EncryptedUserName  : string;
  DescryptedUserName : string;

  EncryptedServerLicencas    : string;
  DecryptedServerLicencas    : string;
  EncryptedPasswordLicencas  : string;
  DecryptedPasswordLicencas  : string;
  EncryptedDataBaseLicencas  : string;
  DescryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas  : string;
  DescryptedUserNameLicencas : string;

  Funcao: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Server.ini');
  Funcao  := TCriptografia.Create;
  try
    EncryptedServer   := IniFile.ReadString('Banco de Dados', 'Server', '');
    EncryptedPassword := IniFile.ReadString('Banco de Dados', 'Password', '');
    EncryptedDataBase := IniFile.ReadString('Banco de Dados', 'Database', '');
    EncryptedUserName := IniFile.ReadString('Banco de Dados', 'User_Name', '');

    DecryptedServer    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPassword  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBase := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserName := Funcao.DecryptString(EncryptedUserName, 123);

    EncryptedServerLicencas   := IniFile.ReadString('BancoLicencas', 'Server', '');
    EncryptedPasswordLicencas := IniFile.ReadString('BancoLicencas', 'Password', '');
    EncryptedDataBaseLicencas := IniFile.ReadString('BancoLicencas', 'Database', '');
    EncryptedUserNameLicencas := IniFile.ReadString('BancoLicencas', 'User_Name', '');

    DecryptedServerLicencas    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPasswordLicencas  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBaseLicencas := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserNameLicencas := Funcao.DecryptString(EncryptedUserName, 123);

    // Carregar Edits Aba Banco - GroupBox Banco
    EdtDadosBancoServer.Text   := DecryptedServer;
    EdtDadosBancoPassword.Text := DecryptedPassword;
    EdtDadosBancoDataBase.Text := DescryptedDataBase;
    EdtDadosBancoUserName.Text := DescryptedUserName;

    //Carregar Edits Aba Dados Encryptados - GroupBox Licenças
    EdtEncryptadosBancoLicencasServer.Text   := DecryptedServerLicencas;
    EdtEncryptadosBancoLicencasPassword.Text := DecryptedPasswordLicencas;
    EdtEncryptadosBancoLicencasDataBase.Text := DescryptedDataBaseLicencas;
    EdtEncryptadosBancoLicencasUserName.Text := DescryptedUserNameLicencas;

  finally
    IniFile.Free;
    Funcao.Free;
  end;
"
c:\fontes\Projeto Rodas\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;22;"function TCNPJCPF.ValidarCNPJ(const CNPJ: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CNPJCalc: string;
  Multiplicador: array[1..14] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CNPJ
  CNPJCalc := '';
  for i := 1 to Length(CNPJ) do
    if CharInSet(CNPJ[i], ['0'..'9']) then
      CNPJCalc := CNPJCalc + CNPJ[i];

  // Verifica se o CNPJ possui 14 dígitos
  if Length(CNPJCalc) <> 14 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CNPJCalc = '00000000000000') or (CNPJCalc = '11111111111111') or
    (CNPJCalc = '22222222222222') or (CNPJCalc = '33333333333333') or
    (CNPJCalc = '44444444444444') or (CNPJCalc = '55555555555555') or
    (CNPJCalc = '66666666666666') or (CNPJCalc = '77777777777777') or
    (CNPJCalc = '88888888888888') or (CNPJCalc = '99999999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 5;
  Multiplicador[2] := 4;
  Multiplicador[3] := 3;
  Multiplicador[4] := 2;
  Multiplicador[5] := 9;
  Multiplicador[6] := 8;
  Multiplicador[7] := 7;
  Multiplicador[8] := 6;
  Multiplicador[9] := 5;
  Multiplicador[10] := 4;
  Multiplicador[11] := 3;
  Multiplicador[12] := 2;
  for i := 1 to 12 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[13]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 6;
  Multiplicador[2] := 5;
  Multiplicador[3] := 4;
  Multiplicador[4] := 3;
  Multiplicador[5] := 2;
  Multiplicador[6] := 9;
  Multiplicador[7] := 8;
  Multiplicador[8] := 7;
  Multiplicador[9] := 6;
  Multiplicador[10] := 5;
  Multiplicador[11] := 4;
  Multiplicador[12] := 3;
  Multiplicador[13] := 2;
  for i := 1 to 13 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[14]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Projeto Rodas\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;97;"function TCNPJCPF.ValidarCPF(const CPF: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CPFCalc: string;
  Multiplicador: array[1..11] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CPF
  CPFCalc := '';
  for i := 1 to Length(CPF) do
    if CharInSet(CPF[i], ['0'..'9']) then
      CPFCalc := CPFCalc + CPF[i];

  // Verifica se o CPF possui 11 dígitos
  if Length(CPFCalc) <> 11 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CPFCalc = '00000000000') or (CPFCalc = '11111111111') or
    (CPFCalc = '22222222222') or (CPFCalc = '33333333333') or
    (CPFCalc = '44444444444') or (CPFCalc = '55555555555') or
    (CPFCalc = '66666666666') or (CPFCalc = '77777777777') or
    (CPFCalc = '88888888888') or (CPFCalc = '99999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 10;
  Multiplicador[2] := 9;
  Multiplicador[3] := 8;
  Multiplicador[4] := 7;
  Multiplicador[5] := 6;
  Multiplicador[6] := 5;
  Multiplicador[7] := 4;
  Multiplicador[8] := 3;
  Multiplicador[9] := 2;
  for i := 1 to 9 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[10]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 11;
  Multiplicador[2] := 10;
  Multiplicador[3] := 9;
  Multiplicador[4] := 8;
  Multiplicador[5] := 7;
  Multiplicador[6] := 6;
  Multiplicador[7] := 5;
  Multiplicador[8] := 4;
  Multiplicador[9] := 3;
  Multiplicador[10] := 2;
  for i := 1 to 10 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[11]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Projeto Rodas\Funcoes\Funcoes.EnviarEmail.pas;Método muito longo;68;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure SetCEP(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setcontato(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
      procedure Setdataregistro(const Value: TDatetime);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setid_chave(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Setserial(const Value: string);
      procedure Setserialhd(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);

    public
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property ativo       : string read Fativo write Setativo;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
       property Linguagem   : string read FLinguagem write SetLinguagem;
       property serial      : string read Fserial write Setserial;
       property serialhd    : string read Fserialhd write Setserialhd;
       property ContraSenha : String read FContraSenha write SetContraSenha;
       property Data_exp    : TDateTime read FData_exp write SetData_exp;
       property id_chave    : string read Fid_chave write Setid_chave;
       function enviarPedido(aEmail: String): Boolean;
  end;
"
c:\fontes\Projeto Rodas\Funcoes\Funcoes.EnviarPedido.pas;Método muito longo;74;"    procedure SetidCliente(const Value: Integer);
    procedure SetStatusPedido(const Value: Integer);
    procedure SetTotalPedido(const Value: currency);
    procedure Setbairro(const Value: string);
    procedure SetCEP(const Value: string);
    procedure Setcidade(const Value: string);
    procedure Setcnpj(const Value: string);
    procedure Setcomplemento(const Value: string);
    procedure Setcontato(const Value: string);
    procedure Setemail(const Value: string);
    procedure Setendereco(const Value: string);
    procedure Setie(const Value: string);
    procedure Setim(const Value: string);
    procedure Setnumero(const Value: integer);
    procedure Setrazao(const Value: string);
    procedure Setresponsavel(const Value: string);
    procedure Settelcontato(const Value: string);
    procedure Settelefone(const Value: string);
    procedure Setuf(const Value: string);
    procedure SetidPedido(const Value: Integer);
    procedure SetidProduto(const Value: Integer);
    procedure SetPrecoUnitario(const Value: Currency);
    procedure SetQuantidade(const Value: Integer);
    procedure SetTotaldoItem(const Value: Currency);
    procedure SetCelularContato(const Value: String);
    procedure SetEmailContato(const Value: String);
    procedure SetNomeContato(const Value: String);
    procedure SetTelefoneConteto(const Value: String);
    procedure SetLinguagem(const Value: string);

    public
      //Dados do Pedido
      property IdPedido: Integer read FIdPedido write SetIdPedido;
      property idCliente: Integer read FidCliente write SetidCliente;
      property StatusPedido: Integer read FStatusPedido write SetStatusPedido;
      property TotalPedido: currency read FTotalPedido write SetTotalPedido;

      //Itens do Pedido
      property idProduto: Integer read FidProduto write SetidProduto;
      property Quantidade: Integer read FQuantidade write SetQuantidade;
      property PrecoUnitario: Currency read FPrecoUnitario write SetPrecoUnitario;
      property TotaldoItem: Currency read FTotaldoItem write SetTotaldoItem;

      //Dados do cliente
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property NomeContato: String read FNomeContato write SetNomeContato;
       property TelefoneConteto: String read FTelefoneConteto write SetTelefoneConteto;
       property CelularContato: String read FCelularContato write SetCelularContato;
       property EmailContato: String read FEmailContato write SetEmailContato;
       property Linguagem   : string read FLinguagem write SetLinguagem;

      function enviarPedido(aEmail: String): Boolean;
      procedure PrencherDadosDoPedido(aidcliente: Integer;aStatusPedido:Integer;aTotalPedido: Currency);
  end;
"
c:\fontes\Projeto Rodas\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de Application.ProcessMessages em loop;95;"Application.ProcessMessages;"
c:\fontes\Projeto Rodas\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de with;159;"with FDQuery1 do;"
c:\fontes\Projeto Rodas\Gerar Contra Senha\UnitGerarContrasenha.pas;Método muito longo;134;"procedure TFRMGerarContraSenha.Button1Click(Sender: TObject);
var
  strsql: string;
  strsql2: string;
  contrasenha: string;
  senhafinal: string;
  i: Integer;
const
  str = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%?';
  max = 15;
begin
  if Edit1.Text = '' then
  begin
    ShowMessage('Entre com a chave.');
    Edit1.SetFocus;
  end
  else
  begin
    if EdtData.Text = '' then
    begin
      ShowMessage('Entre com a data de vencimento.');
      EdtData.SetFocus;
    end
    else
    begin
      with FDQuery1 do;
      begin
        strsql := 'select * from registro where chave=' + #39 +
          Edit1.Text + #39;
        strsql := strsql + ' and contrasenha=0';

        strsql2 :=
          'select razao from chaves,registro where chaves.id_chave= registro.id_chave and registro.chave='
          + #39 + Edit1.Text + #39;
        FDQuery2.SQL.Clear;
        FDQuery2.SQL.Add(strsql2);
        FDQuery2.Open();
        Label6.Caption := FDQuery2.FieldByName('razao').AsString;

        // ShowMessage(strsql);
        FDQuery1.SQL.Clear;
        FDQuery1.SQL.Add(strsql);
        FDQuery1.Open();
        if (FDQuery1.RecordCount) = 1 then
        begin
          ShowMessage('Chave encontrada');
          // rotina de gerar a contra-senha
          contrasenha := FDQuery1.FieldByName('chave').AsString;
          // ShowMessage(contrasenha);
          // Gerar contra-senha
          Randomize;
          Label3.Caption := '';
          for i := 1 to max do
          begin
            try
              FDConnection1.StartTransaction;

              FDQuery1.Edit;
              Label3.Caption := Label3.Caption + str[Random(Length(str)) + 1];
              FDQuery1.FieldByName('contrasenha').AsString := contrasenha +
              Label3.Caption;
              senhafinal := contrasenha + Label3.Caption;

              Memo1.Lines.Clear;
              Memo1.Lines.Add(senhafinal);

              // Encriptar
              // Memo1.Lines.Add(Crypt('D',senhafinal));
              // fim de encriptar

              FDQuery1.FieldByName('ativado').AsString := 'S';
              FDQuery1.FieldByName('data_exp').AsDateTime :=
              StrToDateTime(EdtData.Text);
              FDQuery1.Post;
              FDCOnnection1.Commit;

             Except
             on E: Exception do
             begin
               ShowMessage('Erro ao gravar Contra Senha' + e.Message);
               FDConnection1.Rollback;
               Exit;
             end;
"
c:\fontes\Projeto Rodas\Model\Model.Categorias.pas;Método muito longo;380;"class function TModelCategorias.SalvarCategoria(
  aCategoria: TCategorias): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.categoria  ' +
                '(idcategorias,          ' +   //1
                'categoria,              ' +   //2
                'ativo,                  ' +   //3
                'datacadastro,           ' +   //4
                'dataalteracao,          ' +   //5
                'dataexclusao            ' +   //6
                ')                       ' +
                'VALUES (                ' +
                ':idcategorias,          ' +   //1 ok
                ':categoria,             ' +   //2 ok
                ':ativo,                 ' +   //3 ok
                ':datacadastro,          ' +   //4 ok
                ':dataalteracao,         ' +   //5 ok
                ':dataexclusao           ' +   //6 ok
                ')                       ');

     qry.ParamByName('idcategorias').DataType  := ftInteger;            //1

     qry.ParamByName('categoria').DataType     := ftString;
     qry.ParamByName('categoria').AsString     := aCategoria.categoria; //2


     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCategoria.ativo) > 0 then
       Ativo := Copy(aCategoria.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //3

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //4

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //5
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ParamByName('dataexclusao').DataType := ftDateTime;
     qry.ParamByName('dataexclusao').AsDateTime:= aCategoria.dataExclusao; //6

     //CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\CategoriasSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar a categoria: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Categoria - Linha : 460 - Finalizou o Alterar Categoria finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Categorias.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\Model\Model.Clientes.pas;Método muito longo;580;"class function TModelCliente.SalvarCliente(aCliente: TClientes): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Clientes ' +
                '(idclientes,          ' +   //1
                'razao,                ' +   //2
                'cnpj_cpf,             ' +   //3
                'endereco,             ' +   //4
                'numero,               ' +   //5
                'complemento,          ' +   //6
                'cep,                  ' +   //7
                'cidade,               ' +   //8
                'bairro,               ' +   //9
                'ativo,                ' +   //10
                'uf,                   ' +   //11
                'datacadastro,         ' +   //12
                'dataalteracao,        ' +   //13
               // 'dataexclusao,       ' +   //14
                'idmodelocarro         ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idclientes,          ' +   //1 ok
                ':razao,               ' +   //2 ok
                ':cnpj_cpf,            ' +   //3 ok
                ':endereco,            ' +   //4 ok
                ':numero,              ' +   //5 ok
                ':complemento,         ' +   //6 ok
                ':cep,                 ' +   //7 ok
                ':cidade,              ' +   //8 ok
                ':bairro,              ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':uf,                  ' +   //11 ok
                ':datacadastro,        ' +   //12 ok
                ':dataalteracao,       ' +   //13 ok
              //  ':dataexclusao,        ' + //14 ok
                ':idmodelocarro        ' +   //15 ok
                ')                     ');

     qry.ParamByName('idclientes').DataType    := ftInteger;            //1

     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aCliente.razaosocial; //2
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aCliente.cnpj ;       //3
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aCliente.endereco;    //4
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aCliente.numero;      //5
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aCliente.complemento; //6
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aCliente.CEP;         //7
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aCliente.Cidade;      //8
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aCliente.Bairro;      //9

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCliente.ativo) > 0 then
       Ativo := Copy(aCliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //10

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aCliente.UF) > 0 then
       UF := Copy(aCliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;                  //11

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //12

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //13
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

//     qry.ParamByName('dataexclusao').DataType := ftDateTime;
//     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //14

     qry.ParamByName('idmodelocarro').DataType := ftInteger;
     qry.ParamByName('idmodelocarro').AsInteger:= aCliente.Idmodelocarro; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ClientesSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o cliente: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Clientes - Linha : 629 - Finalizou o Alterar Cliente finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Clientes.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\Model\Model.Contatos.pas;Método muito longo;253;"class function TModelContato.SalvarContato(aContato: TContato; aCliente: TClientes): Boolean;
var
  qry        : TFDQuery;
  Ativo      : string;
  UF         : string;
  LogManager : TLogManager;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.Close;
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO     ' +
                  'idcontatos,     ' +
                  'idcliente,      ' +
                  'telefone,       ' +
                  'celular,        ' +
                  'email,          ' +
                  'datacadastro    ' +
                  'dataalteracao,  ' +
                  'cnpjrevenda,    ' +
                  'ativo,          ' +
                  'nomecontato)    ' +
                  'VALUES(         ' +
                  ':idcontatos,    ' +
                  ':idcliente,     ' +
                  ':telefone,      ' +
                  ':celular,       ' +
                  ':email,         ' +
                  ':datacadastro   ' +
                  ':dataalteracao, ' +
                  ':cnpjrevenda,   ' +
                  ':ativo,         ' +
                  ':nomecontato)   ');

     qry.ParamByName('idcontatos').DataType      := ftInteger;
     qry.ParamByName('idcliente').DataType       := ftInteger;
     qry.ParamByName('idcliente').AsInteger      := aCliente.idcliente;
     qry.ParamByName('telefone').DataType        := ftString;
     qry.ParamByName('telefone').AsString        := aContato.telefone;
     qry.ParamByName('celular').DataType         := ftString;
     qry.ParamByName('celular').AsString         := aContato.celular;
     qry.ParamByName('email').DataType           := ftString;
     qry.ParamByName('email').AsString           := aContato.email;
     qry.ParamByName('datacadastro').DataType    := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime  := Now;
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;
     qry.ParamByName('cnpjrevenda').DataType     := ftString;
     qry.ParamByName('cnpjrevenda').AsString     := aContato.cnpjrevenda;
     qry.ParamByName('ativo').DataType           := ftString;

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aContato.ativo) > 0 then
       Ativo := Copy(aContato.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;

     qry.ParamByName('ativo').AsString           := aContato.ativo;

     qry.ParamByName('nomecontato').DataType     := ftString;
     qry.ParamByName('nomecontato').AsString     := aContato.NomeContato;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
    on E: Exception do
    begin
      Result:= False;
      qry.Connection.Rollback;
      ShowMessage('Houve um erro ao gravar os dados do contato' + E.Message);
      qry.Close;
      qry.Free;

      if True then

      LogManager := TLogManager.Create;
      try
        LogManager.SaveLogToFile('Log_Model_Contatos.txt');
        LogManager.AddLog('Saiu na Model.Contatos - SalvarContato: Linha 320: e deu erro ao gravar o contato.');
      finally
        LogManager.Free;
      end;
"
c:\fontes\Projeto Rodas\Model\Model.Fabricantes.pas;Método muito longo;64;"class function TModelFabricante.AlterarFabricante(
  aFabricante: TFabricante): Boolean;
var
   qry: TFDQuery;
   UF: String;
   Ativo: String;
begin
  Result:=False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE FABRICANTES              ' +
                  'SET                             ' +
                  'idfabricantes = :idfabricantes, ' +
                  'razao         = :razao,         ' +
                  'cnpj          = :cnpj,          ' +
                  'endereco      = :endereco,      ' +
                  'numero        = :numero,        ' +
                  'complemento   = :complemento,   ' +
                  'cep           = :cep,           ' +
                  'cidade        = :cidade,        ' +
                  'bairro        = :bairro,        ' +
                  'ativo         = :ativo,         ' +
                  'uf            = :uf,            ' +
                  'datacadastro  = now,            ' +
                  'datalateracao = now,            ' +
                  'WHERE                           ' +
                  'CNPJ          = :CNPJ           ';

    qry.ParamByName('idfabricantes').DataType   := ftInteger;
    qry.ParamByName('idfabricantes').AsInteger  := aFabricante.idFabricantes;
    qry.ParamByName('razao').DataType           := ftString;
    qry.ParamByName('razao').AsString           := aFabricante.razaosocial;
    qry.ParamByName('cnpj').DataType            := ftString;
    qry.ParamByName('cnpj').AsString            := aFabricante.cnpj ;
    qry.ParamByName('endereco').DataType        := ftString;
    qry.ParamByName('endereco').AsString        := aFabricante.endereco;
    qry.ParamByName('numero').DataType          := ftInteger;
    qry.ParamByName('numero').AsInteger         := aFabricante.numero;
    qry.ParamByName('complemento').DataType     := ftString;
    qry.ParamByName('complemento').AsString     := aFabricante.complemento;
    qry.ParamByName('cep').DataType             := ftString;
    qry.ParamByName('cep').AsString             := aFabricante.CEP;
    qry.ParamByName('cidade').DataType          := ftString;
    qry.ParamByName('cidade').AsString          := aFabricante.Cidade;
    qry.ParamByName('bairro').DataType          := ftString;
    qry.ParamByName('bairro').AsString          := aFabricante.Bairro;

    qry.ParamByName('uf').DataType              := ftString;

    if Length(aFabricante.UF) > 0 then
      UF := Copy(aFabricante.UF, 1, 2)
    else
      UF := '';

    qry.ParamByName('uf').AsString              := UF;

    qry.ParamByName('ativo').DataType           := ftString;
    if Length(aFabricante.ativo) > 0 then
      Ativo := Copy(aFabricante.ativo, 1, 1)
    else
      Ativo := '';

    qry.ParamByName('ativo').AsString           := Ativo;

    qry.ParamByName('dataalteracao').DataType   := ftDatetime;
    qry.ParamByName('dataalteracao').AsDateTime := aFabricante.DataAlteracao;

    qry.ParamByName('CNPJ').DataType            := ftString;
    qry.ParamByName('CNPJ').AsString            := aFabricante.cnpj;

    qry.ExecSQL;
    qry.connection.Commit;

    Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar atualizar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\Projeto Rodas\Model\Model.Fabricantes.pas;Método muito longo;306;"class function TModelFabricante.SalvarFabricante(
  aFabricante: TFabricante): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '     +
                ' fabricantes '    +
                '(idfabricantes, ' +
                'razao, '          +
                'cnpj, '           +
                'endereco, '       +
                'numero, '         +
                'complemento, '    +
                'cep, '            +
                'cidade, '         +
                'bairro, '         +
                'ativo, '          +
                'datacadastro, '   +
                'dataalteracao, '  +
//                'dataexclusao, '   +
                'uf) '             +
                'VALUES ('         +
                ':idclientes, '    +
                ':razao, '         +
                ':cnpj_cpf, '      +
                ':endereco, '      +
                ':numero,  '       +
                ':complemento, '   +
                ':cep, '           +
                ':cidade, '        +
                ':bairro, '        +
                ':ativo, '         +
                ':datacadastro, '  +
                ':dataalteracao, ' +
//                ':dataexclusao, '  +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aFabricante.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aFabricante.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aFabricante.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aFabricante.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aFabricante.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aFabricante.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aFabricante.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aFabricante.Bairro;

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aFabricante.UF) > 0 then
       UF := Copy(aFabricante.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aFabricante.ativo) > 0 then
       Ativo := Copy(aFabricante.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;

     qry.ParamByName('datacadastro').DataType:= ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;

     qry.ParamByName('dataalteracao').DataType:= ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar salvar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\Projeto Rodas\Model\Model.Produtos.pas;Método muito longo;630;"class function TModelProduto.SalvarProduto(aProduto: TProduto): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Produtos ' +
                '(idprodutos,          ' +   //1
                'produto,              ' +   //2
                'foto,                 ' +   //3
                'preco,                ' +   //4
                'aro,                  ' +   //5
                'idFabricante,         ' +   //6
                'datainclusao,         ' +   //7
                'dataalteracao,        ' +   //8
                'dataexclusao,         ' +   //9
                'ativo,                ' +   //10
                'lancamento,           ' +   //11
                'furacao,              ' +   //12
                'offset_et,            ' +   //13
                'idlinha,              ' +   //14
                'idacabamento          ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idprodutos,          ' +   //1 ok
                ':produto,             ' +   //2 ok
                ':foto,                ' +   //3 ok
                ':preco,               ' +   //4 ok
                ':aro,                 ' +   //5 ok
                ':idFabricante,        ' +   //6 ok
                ':datainclusao,        ' +   //7 ok
                ':dataalteracao,       ' +   //8 ok
                ':dataexclusao,        ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':lancamento,          ' +   //11 ok
                ':furacao,             ' +   //12 ok
                ':offset_et,           ' +   //13 ok
                ':idlinha,             ' +   //14 ok
                ':idacabamento         ' +   //15 ok
                ')                     ');

     qry.ParamByName('idprodutos').DataType    := ftInteger;               //1

     qry.ParamByName('produto').DataType         := ftString;
     qry.ParamByName('produto').AsString         := aProduto.produto;      //2
     qry.ParamByName('foto').DataType            := ftStream;
     qry.ParamByName('foto').AsStream            := aProduto.foto;         //3 - Verificar
     qry.ParamByName('preco').DataType           := ftCurrency;
     qry.ParamByName('preco').AsCurrency         := aProduto.preco;        //4
     qry.ParamByName('aro').DataType             := ftInteger;
     qry.ParamByName('aro').AsInteger            := aProduto.aro;          //5
     qry.ParamByName('idfabricante').DataType    := ftInteger;
     qry.ParamByName('idfabricante').AsInteger   := aProduto.idfabricante; //6
     qry.ParamByName('datainclusao').DataType    := ftDateTime;
     qry.ParamByName('datainclusao').AsDateTime  := Now;                   //7
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;                   //8
     //qry.ParamByName('dataexclusao').DataType    := ftDateTime;
     //qry.ParamByName('dataexclusao').AsDateTime  := Now;                 //9

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aProduto.ativo) > 0 then
       Ativo := Copy(aProduto.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;                 //10

     qry.ParamByName('lancamento').DataType      := ftString;
     qry.ParamByName('lancamento').AsString      := aProduto.lancamento;   //11
     qry.ParamByName('furacao').DataType         := ftInteger;
     qry.ParamByName('furacao').AsInteger        := aProduto.furacao;      //12
     qry.ParamByName('offset_et').DataType       := ftInteger;
     qry.ParamByName('offset_et').AsInteger      := aProduto.OffsetEt;     //13
     qry.ParamByName('idlinha').DataType         := ftInteger;
     qry.ParamByName('idlinha').AsInteger        := aProduto.idlinha;      //14
     qry.ParamByName('idacabamento').DataType    := ftInteger;
     qry.ParamByName('idacabamento').AsInteger   := aProduto.idacabamento; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ProdutosSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o produto: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Produtos - Linha : 271 - Finalizou o salvar produto finalizou qry às ' + DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Produtos.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Método muito longo;70;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);
      procedure Setdataregistro(const Value: TDatetime);
      procedure SetCEP(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setcontato(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Setserial(const Value: string);
      function  GetWMIstring(const WMIClass, WMIProperty:string): string;
      procedure SetOnLabel6TextChanged(const Value: TNotifyEvent);
      procedure Setserialhd(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
    procedure Setid_chave(const Value: string);
    public
      property razao       : string    read Frazao write Setrazao;
      property cnpj        : string    read Fcnpj write Setcnpj;
      property ie          : string    read Fie write Setie;
      property im          : string    read Fim write Setim;
      property endereco    : string    read Fendereco write Setendereco;
      property numero      : integer   read Fnumero write Setnumero;
      property complemento : string    read Fcomplemento write Setcomplemento;
      property bairro      : string    read Fbairro write Setbairro;
      property cidade      : string    read Fcidade write Setcidade;
      property uf          : string    read Fuf write Setuf;
      property CEP         : string    read FCEP write SetCEP;
      property ativo       : string    read Fativo write Setativo;
      property responsavel : string    read Fresponsavel write Setresponsavel;
      property contato     : string    read Fcontato write Setcontato;
      property telcontato  : string    read Ftelcontato write Settelcontato;
      property telefone    : string    read Ftelefone write Settelefone;
      property email       : string    read Femail write Setemail;
      property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
      property Linguagem   : string    read FLinguagem write SetLinguagem;
      property serial      : string    read Fserial write Setserial;  //transferir do projeto antigo para esse
      property serialhd    : string    read Fserialhd write Setserialhd;
      property ContraSenha : String    read FContraSenha write SetContraSenha;
      property Data_exp    : TDateTime read FData_exp write SetData_exp;
      property id_chave    : string    read Fid_chave write Setid_chave;

      //Verificar se será necessário criar mais propertys para a tabela Registro
      property OnLabel6TextChanged: TNotifyEvent read FOnLabel6TextChanged write SetOnLabel6TextChanged;
      procedure enviarEmail; //Já chama  aqui a gravação no banco de  licenças
      function GerarSerial: string;
      class function validarDados(aRegistro: TModelRegistro ; aLingua: string) : boolean;
      class function GravarNoBancoLicencas(aRegistro : TModelRegistro): Boolean;  //Tabela Chaves
      class function ValidarLicenca(adata: TDateTime; acnpj: string): Boolean;
      class function GravarRegistro(aRegistro: TModelRegistro; achave: String): Boolean;
      class function GravarContraSenha(aRegistro: TModelRegistro): Boolean;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Uso de with;304;"with qry do"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Método muito longo;273;"function TModelRegistro.GerarSerial: string;
var
  x:string;
  Y:string;
  z:string;
  data : TDateTime;
  qry, qry2: TFDQuery;
  Registrarfrm: TFrmRegistrar;
begin
  Result:= '';
  FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  FWMIService   := FSWbemLocator.ConnectServer('localhost', 'root\CIMV2', '', '');
  X:=Trim(GetWMIstring('Win32_BIOS','SerialNumber')); //Serial da Bios
  Y:=Trim(GetWMIstring('Win32_PhysicalMedia','SerialNumber')); //Serial do HD

  //label6.Caption:= x;
  //label4.Caption:= y;
  z:=x+y+(DateToStr(date));
  //label5.Caption:=z;
  Result:= z;

  qry:= TFDquery.Create(nil);
  qry.Connection  := TConexaoLicencas.CreateConnection;
  try
    qry.SQL.Clear;
    qry.SQL.Add('select * from registro');
    qry.SQL.Add('');

    qry.ExecSQL;
    qry.Connection.Commit;

    with qry do

     //FDQuery1.Edit;
     //Desabilitar botao Geral Serial
     //Edit1.Enabled:=False;
     //BtnRegistrar.Enabled:=False;
     //Button1.Enabled:=False;
     //PageControl1.Pages[1].TabVisible := False;
     // fim


     qry.FieldByName('chave').AsString      := z;
     qry.FieldByName('Data_inc').AsDateTime := Date;
     Data := date;
     qry.FieldByName('Data_exp').AsDateTime:=Data;
     //ShowMessage(DateToStr(Data+30));
     qry.FieldByName('serialhd').AsString:=y;

     qry.FieldByName('ID_Chave').AsInteger := qry2.FieldByName('ID_Chave').AsInteger;

     qry.FieldByName('contrasenha').AsString:='0';
     qry.FieldByName('ativado').AsString:='N';
     qry.Post;

  finally
     qry.Free;
  end;
"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Método muito longo;354;"class function TModelRegistro.GravarContraSenha(
  aRegistro: TModelRegistro): Boolean;
var
  qry: TFDQuery;
begin
  Result := False;
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  //Checar se a CONTRASENHA Existe se não avisar ao usuário que a Contra Senha está errada e encerrar o programa?
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('select contrasenha from registro');
    qry.SQL.Add(' where contrasenha = :contrasenha');
    qry.ParamByName('contrasenha').DataType := ftString;
    qry.ParamByName('contrasenha').AsString := aRegistro.ContraSenha;
    qry.Open;

    if qry.RecordCount > 0 then //Encontrou a ContraSenha faz o update
    begin
      qry.Connection.StartTransaction;
      try
        qry.close;
        qry.SQL.Clear;

        qry.SQL.Text:='UPDATE LICENCAS.REGISTRO      ' +
                      'SET                           ' +
                     // 'ID           = :id,           ' +
                     // 'ID_CHAVE     = :ID_CHAVE,     ' +
                     // 'CHAVE        = :CHAVE,        ' +
                      'DATA_INC     = :DATA_INC,     ' +
                      'DATA_EXP     = :DATA_EXP,     ' +
                      'CONTRASENHA  = :CONTRASENHA,  ' +
                      'ATIVADO      = :ATIVADO,      ' +
                    //  'SERIALHD     = :SERIALHD      ' +
                      'WHERE                         ' +
                      'CONTRASENHA     = :CONTRASENHA      ';


        qry.ParamByName('DATA_INC').DataType     := ftDate;
        qry.ParamByName('DATA_INC').AsDateTime   := Now;
        qry.ParamByName('DATA_EXP').DataType     := ftDate;
        qry.ParamByName('DATA_EXP').AsDate       := aRegistro.Data_exp + 30;
        qry.ParamByName('CONTRASENHA').DataType  := ftString;
        qry.ParamByName('CONTRASENHA').AsString  := aRegistro.ContraSenha;
        qry.ParamByName('ATIVADO').DataType      := ftString;
        qry.ParamByName('ATIVADO').AsString      := aRegistro.ativo;

        qry.ExecSQL;
        qry.Connection.Commit;

        Result := True;
      Except
      On E: Exception do
        begin
           Showmessage('Erro ao gravar tabela registro!'+ E.Message);
           qry.Connection.Rollback;
           Result := False;
        end;
"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Método muito longo;426;"class function TModelRegistro.GravarNoBancoLicencas(
  aRegistro: TModelRegistro): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
  idChave : integer;
begin
  //Testar se a Licença já existe no banco de dados  buscar pelo cnpj  trazer o id e pesquisar na tabela registro
  //Se já existir o cnpj na tabela chaves e estiver aguardando a gravação da contrasenha na tabela registro o que fazer?
  // Informar o usuário que está aguardando a contrasenha e pular fora?
  qry:= TFDquery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('Select * from chaves');
    qry.SQL.Add(' where cnpj =:cnpj');
    qry.ParamByName('cnpj').DataType := ftString;
    qry.ParamByName('cnpj').AsString := aRegistro.cnpj;
    qry.Open;

    if qry.RecordCount > 0 then //O registro dos dados do cliente existe na tabela chaves
    begin
      ShowMessage('Registro encontrado');
      idChave:= qry.FieldByName('id_chave').AsInteger;

      qry.Close;
      qry.SQL.Clear;
      qry.SQL.Add('Select contrasenha from registro');
      qry.SQL.Add(' where id_chave=:id_chave');
      qry.ParamByName('id_chave').DataType  := ftInteger;
      qry.ParamByName('id_chave').AsInteger := idChave;
      qry.Open;

      if (qry.RecordCount > 0) and (qry.fieldbyname('contrasenha').AsString='') then
      begin
          //Gravar no Banco primeiro registro
          qry:= TFDquery.Create(nil);
          qry.Connection := TConexaoLicencas.CreateConnection;
          qry.Connection.StartTransaction;
          try
            qry.Close;
            qry.SQL.Clear;
            qry.SQL.Add('INSERT INTO      ' +
                        ' licencas.chaves ' +
                        '(id_chave,       ' + //1
                        'razao,           ' + //2
                        'cnpj,            ' + //3
                        'ie,              ' + //4
                        'im,              ' + //5
                        'endereco,        ' + //6
                        'numero,          ' + //7
                        'complemento,     ' + //8
                        'bairro,          ' + //9
                        'cidade,          ' + //10
                        'cep,             ' + //11
                        'uf,              ' + //12
                        'ativo,           ' + //13
                        'contato,         ' + //14
                        'telcontato,      ' + //15
                        'email,           ' + //16
                        'datacadastro,    ' + //17
                        'dataalteracao    ' + //18
                       // 'dataexclusao   ' + //19
                        ')                ' +
                        'VALUES (         ' +
                        ':id_chave,       ' + //1 ok
                        ':razao,          ' + //2 ok
                        ':cnpj,           ' + //3 ok
                        ':ie,             ' + //4 ok
                        ':im,             ' + //5 ok
                        ':endereco,       ' + //6 ok
                        ':numero,         ' + //7 ok
                        ':complemento,    ' + //8 ok
                        ':bairro,         ' + //9 ok
                        ':cidade,         ' + //10 ok
                        ':cep,            ' + //11 ok
                        ':uf,             ' + //12 ok
                        ':ativo,          ' + //13 ok
                        ':contato,        ' + //14
                        ':telcontato,     ' + //15
                        ':email,          ' + //16
                        ':datacadastro,   ' + //17 ok
                        ':dataalteracao   ' + //18 ok
                      //  ':dataexclusao, ' + //19 ok
                        ')                ');

             qry.ParamByName('id_chave').DataType    := ftInteger;             //1
             qry.ParamByName('razao').DataType       := ftString;
             qry.ParamByName('razao').AsString       := aRegistro.razao;       //2
             qry.ParamByName('cnpj').DataType        := ftString;
             qry.ParamByName('cnpj').AsString        := aRegistro.cnpj ;       //3
             qry.ParamByName('ie').DataType          := ftString;
             qry.ParamByName('ie').AsString          := aRegistro.ie;          //4
             qry.ParamByName('im').DataType          := ftString;
             qry.ParamByName('im').AsString          := aRegistro.im;          //5
             qry.ParamByName('endereco').DataType    := ftString;
             qry.ParamByName('endereco').AsString    := aRegistro.endereco;    //6
             qry.ParamByName('numero').DataType      := ftInteger;
             qry.ParamByName('numero').AsInteger     := aRegistro.numero;      //7
             qry.ParamByName('complemento').DataType := ftString;
             qry.ParamByName('complemento').AsString := aRegistro.complemento; //8
             qry.ParamByName('cep').DataType         := ftString;
             qry.ParamByName('cep').AsString         := aRegistro.CEP;         //9
             qry.ParamByName('cidade').DataType      := ftString;
             qry.ParamByName('cidade').AsString      := aRegistro.Cidade;      //10
             qry.ParamByName('bairro').DataType      := ftString;
             qry.ParamByName('bairro').AsString      := aRegistro.Bairro;      //11
             qry.ParamByName('uf').DataType          := ftString;
             if Length(aRegistro.UF) > 0 then
               UF := Copy(aRegistro.UF, 1, 2)
             else
               UF := '';

             qry.ParamByName('uf').AsString          := UF;                    //12

             qry.ParamByName('ativo').DataType       := ftString;
             if Length(aRegistro.ativo) > 0 then
               Ativo := Copy(aRegistro.ativo, 1, 1)
             else
               Ativo := '';

             qry.ParamByName('ativo').AsString       := Ativo;                 //13

             qry.ParamByName('contato').DataType     := ftString;
             qry.ParamByName('contato').AsString     := aRegistro.contato;     //14

             qry.ParamByName('telcontato').DataType     := ftString;
             qry.ParamByName('telcontato').AsString     := aRegistro.telcontato; //15

             qry.ParamByName('email').DataType     := ftString;
             qry.ParamByName('email').AsString     := aRegistro.email;           //16

             qry.ParamByName('datacadastro').DataType  := ftDateTime;
             qry.ParamByName('datacadastro').AsDateTime:= Now;                 //17

             qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //18
             qry.ParamByName('dataalteracao').AsDateTime:= Now;

        //     qry.ParamByName('dataexclusao').DataType := ftDateTime;
        //     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //19

             qry.ExecSQL;
             qry.Connection.Commit;

             Result := True;
          Except
           On E: Exception do
              begin
                if aRegistro.Linguagem='Portugues' then
                  ShowMessage('Erro ao tentar gravar licença!' + E.Message)
                else
                  ShowMessage('Error trying to write license!!' + E.Message);

                qry.Connection.Rollback;
                qry.Free;
              end;
"
c:\fontes\Projeto Rodas\Model\Model.Registro.pas;Método muito longo;739;"class function TModelRegistro.GravarRegistro(
  aRegistro: TModelRegistro; achave: String): Boolean;
var
  qry: TFDQuery;
  data: TDateTime;
begin
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO REGISTRO      ' +
                 '(id,                      ' +
                 'id_chave,                 ' +
                 'chave,                    ' +
                 'data_inc,                 ' +
                 'data_exp,                 ' +
                 'contrasenha,              ' +
                 'ativado,                  ' +
                 'serialhd                  ' +
               //  'WHERE id_chave =:id_chave ' +
                 ')                         ' +
                 'VALUES (                  ' +
                 ':id,                      ' +
                 ':id_chave,                ' +
                 ':chave,                   ' +
                 ':data_inc,                ' +
                 ':data_exp,                ' +
                 ':contrasenha,             ' +
                 ':ativado,                 ' +
                 ':serialhd                 ' +
                 ')                         ');

     qry.ParamByName('id').DataType :=ftinteger;
     qry.ParamByName('id_chave').DataType:= ftInteger;

     qry.ParamByName('chave').DataType     := ftString;
     qry.ParamByName('chave').AsString      := aChave;

     qry.ParamByName('Data_inc').DataType   := ftDateTime;
     qry.ParamByName('Data_inc').AsDateTime := Date;

     Data := Date;

     qry.ParamByName('Data_exp').DataType    := ftDateTime;
     qry.ParamByName('Data_exp').AsDateTime  :=Data;

     //ShowMessage(DateToStr(Data+30));
     qry.ParamByName('serialhd').DataType    := ftDateTime;
     qry.ParamByName('serialhd').AsString    :=aRegistro.serialhd;

     qry.ParamByName('contrasenha').AsString :='0';
     qry.ParamByName('ativado').AsString     :='N';

     //Ver como fazer?
     //qry.ParamByName('id_chave').AsInteger := //qry2.FieldByName('ID_Chave').AsInteger;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
  On E: Exception do
    begin
       Showmessage('Erro ao gravar tabela registro!'+ E.Message);
       qry.Connection.Rollback;
       Result := False;
    end;
"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\Unit1.pas;Uso de with;106;"with FDQuery1 do"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\Unit1.pas;Uso de with;136;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\Unit1.pas;Uso de with;166;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;181;"with FDQuery1,FDQuery2 do"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;220;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;250;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Método muito longo;306;"procedure TFRMGERARSERIAL.Button4Click(Sender: TObject);
var
    IdSMTP1: TIdSMTP;
    Idmessage: TIdMessage;
    TextoMsg: TidText;
    IdSSL: TIdSSLIOHandlerSocketOpenSSL;
    contatol:string;
    emaill:string;
    telcontatol:string;
    const
    CRFL = #13#10;

begin
    IdSMTP1                 := TIdSMTP.create(nil);
    IdSMTP1.ConnectTimeout  := 10000;
    IdSMTP1.ReadTimeout     := 10000;

    IdMessage               := TIdMessage.create(nil);
    IdMessage.Clear;
    IdMessage.CharSet       := 'iso-8859-1';
    IdMessage.Encoding      := MeMIME;
    IdMessage.ContentType   := 'multipart/related'   ;
    IdMessage.subject       := 'Novo Serial Gerado do cliente: ' +FDQuery2.FieldByName('razao').AsString ;

    textomsg                := TIdText.Create(IdMessage.MessageParts);
    //textomsg.Body.Text      := 'Se você consegue ler isto então é porque funcionou o teste!';
    contatol    := FDQuery2.FieldByName('contato').AsString;
    emaill      := FDQuery2.FieldByName('email').AsString;
    telcontatol := FDQuery2.FieldByName('telcontato').AsString;
    Memo1.Lines.Add(contatol);
    Memo1.Lines.Add(emaill);
    Memo1.Lines.Add(telcontatol);
    //TextoMsg.Body.Text      :=Memo1.Lines.Text + #13 + 'Serial gerado: '+Label5.Caption;

    //TextoMsg.Body.Text      :=Memo1.Lines.Text;
    TextoMsg.Body.Add('Chave Gerada: '+Label5.Caption+'<br/>');
    TextoMsg.Body.Add(contatol+'<br/>');
    TextoMsg.Body.Add(emaill+'<br/>');
    TextoMsg.Body.Add(telcontatol+'<br/>');


    textomsg.ContentType    := 'text/html';

    if ((cbtipo.itemindex = 0) or (cbtipo.itemindex = 2)) then
    begin
        // GMAIL e YAHOO

        if cbtipo.itemindex = 0 then
        begin
            idSMTP1.Host            := 'smtp.gmail.com';
            idSMTP1.Username        := 'delphi.send@gmail.com';
            idSMTP1.Password        := 'delphi.send12345';
        end
        else begin
            idSMTP1.Host            := 'smtp.mail.yahoo.com';
            idSMTP1.Username        := 'email@yahoo.com.br';
            idSMTP1.Password        := 'senha';
        end;
"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;368;"with idSMTP1 do"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;418;"with idSMTP1 do"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\Unitsendemail.pas;Uso de with;77;"with idSMTP1 do"
c:\fontes\Projeto Rodas\obtendo numero serial do hd\Unitsendemail.pas;Uso de with;126;"with idSMTP1 do"
c:\fontes\Projeto Rodas\UPrincipal.pas;Método muito longo;209;"    procedure Circle1Gesture(Sender: TObject;
      const EventInfo: TGestureEventInfo; var Handled: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure Circle1Click(Sender: TObject);
    procedure Circle1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Layout1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Single);
    procedure Image4Gesture(Sender: TObject; const EventInfo: TGestureEventInfo;
      var Handled: Boolean);
    procedure Image4MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Image4MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1DblClick(Sender: TObject);
    procedure Image4DblClick(Sender: TObject);
    procedure MenuItemFabricantesCategoriasClick(Sender: TObject);
    procedure NewImagemDbClick(Sender: TObject);
    procedure NewImagemMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure NewImagemGesture(Sender: TObject;
              const EventInfo: TGestureEventInfo;
              var Handled: Boolean);
    procedure NewImagemMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure FormShow(Sender: TObject);
    procedure BtnCarregarFotoClick(Sender: TObject);
    procedure MenuItemConfiguracoesSistemaClick(Sender: TObject);
    procedure MenuItem16Click(Sender: TObject);
    procedure BtnCopiarFotoClick(Sender: TObject);
    procedure Image4MouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure TrackBar1Change(Sender: TObject);
    procedure CBMarcasChange(Sender: TObject);
    procedure CBModeloChange(Sender: TObject);
    procedure CBFabricantesChange(Sender: TObject);
    procedure CBCategoriasChange(Sender: TObject);
    procedure CBLinhasChange(Sender: TObject);
    procedure CBProdutosChange(Sender: TObject);
    procedure BtnCopiarRodaClick(Sender: TObject);
    procedure MenuItemClientesDadosClick(Sender: TObject);
    procedure MenuItemClientesVeiculosClick(Sender: TObject);
    procedure MenuItemFabricantesDadosClick(Sender: TObject);
    procedure MenuItemClientesOrcamentosClick(Sender: TObject);
    procedure MenuItemRegistrarClick(Sender: TObject);
    procedure BtnCarregarRodaCalotaClick(Sender: TObject);
    procedure SairExecute(Sender: TObject);
    procedure LogOffExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure MediaReceiverProfileResourceReceived(const Sender: TObject;
      const AResource: TRemoteResource);
    procedure MediaReceiverManagerRequestManagerPassword(const Sender: TObject;
      const ARemoteIdentifier: string; var Password: string);
    procedure MenuItemFabricanteProdutosClick(Sender: TObject);
    procedure MenuItemFabricantesDeVeiculosClick(Sender: TObject);
    procedure Image5Click(Sender: TObject);
    procedure ImageLogoClick(Sender: TObject);
    procedure MenuItem2Click(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure MenuItem4Click(Sender: TObject);
    procedure MenuItemBackupClick(Sender: TObject);
    procedure Button5Click(Sender: TObject);


  private
    { Private declarations }
    MoveObjeto: Boolean;
    OffSet: TPointF;
    NewCircle: TCircle;
    NewImagem: TImage;
    FIdMarcaSelecionada: integer;
    FIdFabricante: integer;
    FIdCategoria: integer;
    FidLinha: integer;
    FMemoryStream: TMemoryStream;
    FBlobStream: TStream;
    FIdProduto: integer;
    FValorTotalOrcamento: Double;
    ProdutoDS: TDataSet;
    qry: TFDQuery;
    FConexao: TFDConnection;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FArquivoLogo: String; //Nome do Arquivo da Logo a Ser carregado

    procedure Modo_Edicao(editar: Boolean);
    procedure Modo_Edicao2(editar: Boolean);
    procedure NewImagemMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure SetidUsuario(const Value: Integer);
    procedure SaveBitmapToFile(Bitmap: TBitmap; const FileName: string);
    procedure EnviarImagemWhatsApp(const FileName: string);
    procedure EnviarAnexoWhatsApp(const FileName: string);
    function ImageToBase64(const FileName: string): string;
    function DesabilitaEdtWhatsApp:Boolean;

    function CapturaTela:TBitMap;

  public
    { Public declarations }
     FidUsuario: Integer;
     FLinguagem: string;
     property idUsuario: Integer read FidUsuario write SetidUsuario;
     procedure CarregarCores;
     procedure CarregarLinguagem;
     procedure CarregarLogo;
     constructor create;
     destructor destroy;override;

  end;
"
c:\fontes\Projeto Rodas\UPrincipal.pas;Método muito longo;416;"procedure TFrmPrincipal.BtnCopiarRodaClick(Sender: TObject);
begin
  if MoveObjeto then
    Modo_Edicao(False);

  if NOT Assigned(NewCircle) then
    begin
      // Create a new TCircle component
      NewCircle := TCircle.Create(Self);

      // Copy the properties of the original TCircle component
      NewCircle.Position.X := Circle1.Position.X + 50;
      NewCircle.Position.Y := Circle1.Position.Y + 50;
      NewCircle.Width      := Circle1.Width;
      NewCircle.Height     := Circle1.Height;
      NewCircle.Fill.Color := Circle1.Fill.Color;

      //Criar o TImage dentro do NewCircle
      NewImagem:= TImage.Create(NewCircle);
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Eventos
      //NewImagem.OnClick      :=  NewImagemClick;
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      NewCircle.Parent := Self; //Cria no Formulário Principal
    end
    else //apagar o mesmo ou receber a copia da Matrix Atual
    begin
      //Criar o TImage dentro do NewCircle
      NewImagem.BitMap.Clear($000000);
      NewImagem:= TImage.Create(nil); //NewCircle - original
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Copy the events from the original TImage to the new TImage
      //NewImagem.OnClick      :=  NewImagemClick; //Ficou com o clique esquerdo sem função
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      //Exit;
    end;
"
c:\fontes\Projeto Rodas\UPrincipal.pas;Uso de with;1459;"With FrmPrincipal do"
c:\fontes\Projeto Rodas\UPrincipal.pas;Uso de with;1480;"With FrmPrincipal do"
c:\fontes\Projeto Rodas\View\UCadastroClientes.pas;Método muito longo;185;"    procedure FormShow(Sender: TObject);
    procedure BtnNovoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BtnPrimeiroClick(Sender: TObject);
    procedure btnAnteriorClick(Sender: TObject);
    procedure BtnProximoClick(Sender: TObject);
    procedure BtnUltimoClick(Sender: TObject);
    procedure BtnAlterarClick(Sender: TObject);
    procedure BtnGravarClick(Sender: TObject);
    procedure CBAtivoExit(Sender: TObject);
    procedure EdtNumeroKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure EdtCnpjKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure EdtCepKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure BtnExcluirClick(Sender: TObject);
    procedure BtnPesquisarClick(Sender: TObject);
    procedure TabItemPesquisaClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EdtCnpjExit(Sender: TObject);
  private
    { Private declarations }
    FConexao: TFDConnection;
    FCliente: TClientes;
    FContato: TContato;
    PodeGravar: Boolean;
    FUFCliente: string;
    FAtivoCliente: string;
    qry: TFDQuery;
    RegrasDeNegocios: TModelCliente;
    FModelContato: TModelContato;
    FTipo: String;
    FController: TControllerCliente;
    CDS: TClientDataSet;
    FLinguagem: string;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FGravarLog: Boolean;        //Para uso com o Log
    FHabilitarLogsSistema: string;
    FNextIDContato: Integer;
    FGravacaoSucesso: Boolean;
    procedure DesabilitaBotoes(const BotaoSet:TBotaoSet);
    Procedure PopularGridClientes;
    procedure PreencheDadosEncontradosDoCliente;
    procedure PopularDataSet;
    procedure CarregarConfiguracao;
    procedure PopularContatos;
    function LerSalvarLogsBancoDeDados: Boolean;
    function GravarLogsBancoDeDados: Boolean;
  public
    { Public declarations }
    DataSet: TClientDataSet;
    FSomenteAtivos: string;
    FSemContatos  : string;
    FBtnUltimo    : string;
    Function CriarDataSet(aDadaSet: TClientDataSet): TClientDataSet;
    procedure OnDataSetChange;
    procedure PopularClientes;
    procedure CarregarCores;
    procedure CarregarLinguagem;
    function ProximoIDContato: integer;


  end;
"
c:\fontes\Projeto Rodas\View\UCadastroFabricantes.pas;Método muito longo;417;"procedure TFrmFabricantes.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     LblCodCliente.Text      := 'Cod. Fabricante';
     LblRazao.Text           := 'Razão Social / Nome';
     LblCnpj.Text            := 'CNPJ / CPF';
     LblEndereco.Text        := 'Endereço';
     LblNumero.Text          := 'Número';
     LblComplemento.Text     := 'Complemento';
     LblCEP.Text             := 'CEP';
     LblCidade.Text          := 'Cidade';
     LblCEP.Text             := 'CEP';
     LblUF.Text              := 'UF';
     LblAtivo.Text           := 'Ativo';
     LblPesquisar.Text       := 'Pesquisar';
     BtnNovo.Text            := '&Novo';
     BtnAlterar.Text         := '&Alterar';
     BtnExcluir.Text         := '&Excluir';
     BtnSalvar.Text          := '&Salvar';
     TabItemCadastro.Text    := 'Cadastro';
     TabItemPesquisa.Text    := 'Pesquisa';
     TabItemContato.Text     := 'Contato';
     lblTitulo.Text          := 'Cadastro do Fabricantes';
     FrmFabricantes.Caption  := 'Cadastro do Fabricantes';

   end
   else if FLinguagem = 'Ingles' then
   begin
     LblCodCliente.Text      := 'Id. Manufacturer';
     LblRazao.Text           := 'Corporate Name / Name';
     LblCnpj.Text            := 'Tax Identification Number - TIN';
     LblEndereco.Text        := 'Address';
     LblNumero.Text          := 'Number';
     LblComplemento.Text     := 'Complement';
     LblCidade.Text          := 'City';
     LblCEP.Text             := 'Zip Code';
     LblUF.Text              := 'State';
     LblAtivo.Text           := 'Active';
     LblPesquisar.Text       := 'Search';
     BtnNovo.Text            := '&New';
     BtnAlterar.Text         := '&Alter';
     BtnExcluir.Text         := '&Delete';
     BtnSalvar.Text          := '&Save';
     TabItemCadastro.Text    := 'Register';
     TabItemPesquisa.Text    := 'Search';
     TabItemContato.Text     := 'Contact';
     lblTitulo.Text          := 'Manufacturer Registration';
     FrmFabricantes.Caption  := 'Manufacturer Registration';
   end;
"
c:\fontes\Projeto Rodas\View\URegistrar.pas;Método muito longo;349;"procedure TFrmRegistrar.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     lblRazao.Text        := 'Razão Social / Nome';
     lblCnpj_cpf.Text     := 'CNPJ / CPF';
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Endereço';
     lblNumero.Text       := 'Número';
     LblComplemento.Text  := 'Complemento';
     LblBairro.Text       := 'Bairro';
     LblCidade.Text       := 'Cidade';
     LblResponnsavel.Text := 'Nome do responsável pelo registro';
     LblTelefone.Text     := 'Telefone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     BtnRegistrar.Text    := '&Registrar';
     LblTitulo.Text       := 'Registro do Wheel Pro';
     lblCEP.Text          := 'CEP';
     FrmRegistrar.Caption := 'Registro do Wheel Pro';
     TabItem1.Text        := 'Cadastro';
     TabItem2.Text        := 'Gerar senha';
     TabItem3.Text        := 'Enviar Serial';
     TabItem4.Text        := 'Inserir Contra-Senha';
     lblEntreseuCNPJ.Text := 'Entre seu CNPJ';
     lblSeuSerial.Text    := 'Seu Serial';
     lblNumserialHD.Text  := 'O número serial do seu HD é:';
     lblseuSErialBios.Text:= 'Seu Serial da Bios é :';
     lblContraSenha.Text  := 'Contra - Senha';
   end
   else if FLinguagem = 'Ingles' then
   begin
     lblRazao.Text        := 'Corporate Name / Name';
     lblCnpj_cpf.Text     := 'Tax Identification Number - TIN';
     lblIe.Visible        := False;
     EdtInscricaoEstadual.Visible:= False;
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Visible        := False;
     EdtIncricaoMunicipal.Visible:= False;
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Address';
     lblNumero.Text       := 'Number';
     LblComplemento.Text  := 'Complement';
     LblBairro.Text       := 'Neighborhood';
     LblCidade.Text       := 'City';
     LblResponnsavel.Text := 'Name of person responsible for registration';
     LblTelefone.Text     := 'Phone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     lblCEP.Text          := 'ZIP CODE';
     BtnRegistrar.Text    := '&Register';
     LblTitulo.Text       := 'Wheel Pro registration';
     FrmRegistrar.Caption := 'Wheel Pro registration';
     TabItem1.Text        := 'Register';
     TabItem2.Text        := 'Generate Password';
     TabItem3.Text        := 'Send Serial';
     TabItem4.Text        := 'Enter Password';
     lblEntreseuCNPJ.Text := 'Enter your EIN';
     lblSeuSerial.Text    := 'Your Serial';
     lblNumserialHD.Text  := 'Serial number of your HD is:';
     lblseuSErialBios.Text:= 'Your Bios Serial is:';
     lblContraSenha.Text  := 'Password';
   end;
"
c:\fontes\Projeto Rodas\WheelPro\CriadorDeBancoWheelPro\uPrincipal.pas;Método muito longo;94;"procedure TFrmPrincipal.BtnCriarBaseClick(Sender: TObject);
var
  Connection: TFDConnection;
  Query: TFDQuery;
  ScriptFile: TStringList;
  OpenDialog: TOpenDialog;
  ScriptText: string;
  ScriptsPath: string;
  DatabaseName: string;
begin
  ScriptsPath := ExtractFilePath(Application.ExeName) + 'scripts\'; // Caminho para a pasta ""scripts"" da aplicação

  OpenDialog            := TOpenDialog.Create(nil);
  OpenDialog.Filter     := 'Arquivos SQL (*.sql)|*.sql'; // Filtro para selecionar apenas arquivos SQL
  OpenDialog.InitialDir := ScriptsPath; // Define a pasta inicial do OpenDialog como a pasta ""scripts"" da aplicação

  if OpenDialog.Execute then
  begin
    Connection := TFDConnection.Create(nil);
    try
      Connection.DriverName := 'MySQL'; // Driver do FireDAC para MySQL
      Connection.Params.Add('Server=localhost'); // Endereço do servidor MySQL
      Connection.Params.Add('User_Name=root'); // Usuário do MySQL
      Connection.Params.Add('Password=19741974'); // Senha do MySQL

      Connection.Connected := True;

      Query := TFDQuery.Create(nil);
      try
        Query.Connection := Connection;

        ScriptFile := TStringList.Create;
        try
          ScriptFile.LoadFromFile(OpenDialog.FileName); // Carrega o script do arquivo selecionado

          ScriptText := ScriptFile.Text; // Obtém o texto do script

          // Substitui o texto ""fulanorodas2"" pelo valor do TEdit (Edit1.Text)
          ScriptText := StringReplace(ScriptText, 'fulanorodas2', Edit1.Text, [rfReplaceAll]);

          Query.SQL.Text := ScriptText; // Define o script carregado como texto SQL do Query

          // Procura o nome do banco de dados dentro do script
          DatabaseName := ExtractDatabaseNameFromScript(ScriptText);

          if DatabaseName <> '' then
          begin
            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Criando o banco de dados: ' + DatabaseName);

            // Cria o banco de dados com o nome extraído
            Query.SQL.Text := 'CREATE SCHEMA IF NOT EXISTS `' + DatabaseName + '`';
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado com sucesso.');

            // Adiciona informações ao Memo1.Text
            Memo1.Lines.Add('Executando o restante do script...');

            // Executa o restante do script
            Query.SQL.Text := ScriptText;
            Query.ExecSQL;

            // Adicionar registro à tabela de login
            Memo1.Lines.Add('Adicionando o usuario admin à tabela de login...');

            Query.SQL.Text :=
              'INSERT INTO login (usuario, senha, email, tipo, ativo, idcliente) ' +
              'VALUES (:usuario, :senha, :email, :tipo, :ativo, :idcliente)';
            Query.Params.ParamByName('usuario').AsString    := 'admin';
            Query.Params.ParamByName('senha').AsString      := '123';
            Query.Params.ParamByName('email').AsString      := Edit2.Text;
            Query.Params.ParamByName('tipo').AsString       := 'A';
            Query.Params.ParamByName('ativo').AsString      := 'S';
            Query.Params.ParamByName('idcliente').AsInteger := 1;
            Query.ExecSQL;

            Memo1.Lines.Add('Banco de dados criado e script executado com sucesso: ' + DatabaseName);

            //se é demo temos que adicionar a data do termino do demo na tabela registro
            if cbDemo.Checked then
            begin

              //id, id_chave, chave, data_inc (now) ,  data_exp now+30, contrasenha, ativado ='S' e serialhd
              Query.SQL.Clear;
              Query.SQL.Text :=
              'INSERT INTO registro (id, id_chave, data_inc, data_exp, contrasenha, ativo, serialhd ) ' +
              'VALUES (:id, :id_chave, :data_inc, :data_exp, :contrasenha, :ativo, :serialhd)';
              Query.Params.ParamByName('id').AsString          := '1';
              Query.Params.ParamByName('id_chave').AsString    := '1';
              Query.Params.ParamByName('data_inc').AsDate      := now;
              Query.Params.ParamByName('data_exp').AsDate      := now+30;
              Query.Params.ParamByName('contrasenha').AsString := 'Conect';
              Query.Params.ParamByName('ativo').AsString       := 'S';
              Query.Params.ParamByName('serialhd').AsString    := '0';
              Query.ExecSQL;

              Memo1.Lines.Add('Foi criada uma data de expiração ' + DateToStr(Now+30) + ' , pois o programa foi marcado como Demo');
            end;
"
c:\fontes\Projeto Rodas\WheelPro\DAO\DAO.Clientes.pas;Método muito longo;89;"function TClientes.AlterarCliente(Cliente: TClientes): Boolean;
begin
  //Alterar oo cliente do parâmetro acNPJ
  Result:=False;
  qry:=qry.Create(nil);
  qry.Connection := FConn;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE fulanorodas.clientes  ' +
                  'SET                          ' +
                  'idclientes  = :idclientes,   ' +
                  'razao       = :razao,        ' +
                  'cnpj_cpf    = :cnpj_cpf,     ' +
                  'endereco    = :endereco,     ' +
                  'numero      = :numero,       ' +
                  'complemento = :complemento,  ' +
                  'cep         = :cep,          ' +
                  'cidade      = :cidade,       ' +
                  'bairro      = :bairro,       ' +
                  'ativo       = :ativo,        ' +
                  'uf          = :uf            ' +
                  'WHERE                        ' +
                  'idclientes = :CNPJ           ';

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

    qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB
    qry.ParamByName('CNPJ').DataType:= ftString;
    qry.ParamByName('CNPJ').AsString:= Cliente.cnpj;

    qry.ExecSQL;

    Result:=True;

  finally
    qry.Free;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\DAO\DAO.Clientes.pas;Método muito longo;238;"function TClientes.SalvarCliente(Cliente: TClientes): Boolean;
var
  Ativo : string;
  UF    : string;
begin
  Result:= False;
  try
    qry:=TFDQuery.Create(nil);
    qry.Connection := FConn;
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' Clientes '    +
                '(idclientes, ' +
                'razao, '       +
                'cnpj_cpf, '    +
                'endereco, '    +
                'numero, '      +
                'complemento, ' +
                'cep, '         +
                'cidade, '      +
                'bairro, '      +
                'ativo, '       +
                'uf) '          +
                'VALUES ('      +
                ':idclientes, ' +
                ':razao, '      +
                ':cnpj_cpf, '   +
                ':endereco, '   +
                ':numero,  '    +
                ':complemento, '+
                ':cep, '        +
                ':cidade, '     +
                ':bairro, '     +
                ':ativo, '      +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := Cliente.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := Cliente.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := Cliente.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := Cliente.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := Cliente.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := Cliente.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := Cliente.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := Cliente.Bairro;

     qry.ParamByName('uf').DataType            := ftString; //ver como vai ser pois é CB

     if Length(Cliente.UF) > 0 then
       UF := Copy(Cliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF; //ver como vai ser pois é CB

     qry.ParamByName('ativo').DataType         := ftString; //ver como vai ser pois é CB

     if Length(Cliente.ativo) > 0 then
       Ativo := Copy(Cliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo; //ver como vai ser pois é CB

     qry.ExecSQL;

     Result:=True;

  finally
    qry.Close;
    qry.Free;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\DAO\Dao.Conexao.pas;Uso de with;73;"with Connection.Params do"
c:\fontes\Projeto Rodas\WheelPro\DAO\DAO.ConexaoLicencas.pas;Uso de with;72;"with Connection.Params do"
c:\fontes\Projeto Rodas\WheelPro\Dao.Conexao.pas;Uso de with;63;"with Connection.Params do"
c:\fontes\Projeto Rodas\WheelPro\Encriptografar\View\View.Principal.pas;Método muito longo;75;"procedure TFrmPrincipal.BtnEncriptarClick(Sender: TObject);
var
  IniFile: TIniFile;
  EncryptedServer   : string;
  EncryptedPassword : string;
  EncryptedDataBase : string;
  EncryptedUserName : string;
  EncryptedServerLicencas   : string;
  EncryptedPasswordLicencas : string;
  EncryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas : string;
  Funcoes: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'Server.ini');
  Funcoes:= TCriptografia.Create;
  try
     EncryptedServer   := Funcoes.EncryptString(EdtDadosBancoServer.Text, 123);
     EncryptedPassword := Funcoes.EncryptString(EdtDadosBancoPassword.Text, 123);
     EncryptedDataBase := Funcoes.EncryptString(EdtDadosBancoDataBase.Text,123);
     EncryptedUserName := Funcoes.EncryptString(EdtDadosBancoUserName.Text,123);

     EncryptedServerLicencas   := Funcoes.EncryptString(EdtDadosLicenasServer.Text,123);
     EncryptedPasswordLicencas := Funcoes.EncryptString(EdtDadosLicencasPassword.Text,123);
     EncryptedDataBaseLicencas := Funcoes.EncryptString(EdtDadosLicenasDataBase.Text,123);
     EncryptedUserNameLicencas := Funcoes.EncryptString(EdtDadosLicencasUserName.Text,123);

     //Escreve no arquivo ini
     IniFile.WriteString('Banco de Dados', 'Server', EncryptedServer);
     IniFile.WriteString('Banco de Dados', 'Password', EncryptedPassword);
     IniFile.WriteString('Banco de Dados', 'Database', EncryptedDataBase);
     IniFile.WriteString('Banco de Dados', 'User_Name', EncryptedUserName);

     IniFile.WriteString('BancoLicencas', 'Server',    EncryptedServerLicencas);
     IniFile.WriteString('BancoLicencas', 'Password',  EncryptedPasswordLicencas);
     IniFile.WriteString('BancoLicencas', 'Database',  EncryptedDataBaseLicencas);
     IniFile.WriteString('BancoLicencas', 'User_Name', EncryptedUserNameLicencas);

     //Preenche os Edits da Aba Encriptada - Banco
     EdtEncryptadosBancoServer.Text   := EncryptedServer;
     EdtEncryptadosBancoPassword.Text := EncryptedPassword;
     EdtEncryptadosBancoDataBase.Text := EncryptedDataBase;
     EdtEncryptadosBancoUserName.Text := EncryptedUserName;

     //Preenche os Edits da Aba Encriptada - Banco Licenças
     EdtEncryptadosBancoLicencasServer.Text   := EncryptedServerLicencas;
     EdtEncryptadosBancoLicencasPassword.Text := EncryptedPasswordLicencas;
     EdtEncryptadosBancoLicencasDataBase.Text := EncryptedDataBaseLicencas;
     EdtEncryptadosBancoLicencasUserName.Text := EncryptedUserNameLicencas;

     inifile.UpdateFile;

  finally
    IniFile.Free;
    Funcoes.Free;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\Encriptografar\View\View.Principal.pas;Método muito longo;133;"procedure TFrmPrincipal.CarregarEdits;
var
  IniFile: TIniFile;
  EncryptedServer    : string;
  DecryptedServer    : string;
  EncryptedPassword  : string;
  DecryptedPassword  : string;
  EncryptedDataBase  : string;
  DescryptedDataBase : string;
  EncryptedUserName  : string;
  DescryptedUserName : string;

  EncryptedServerLicencas    : string;
  DecryptedServerLicencas    : string;
  EncryptedPasswordLicencas  : string;
  DecryptedPasswordLicencas  : string;
  EncryptedDataBaseLicencas  : string;
  DescryptedDataBaseLicencas : string;
  EncryptedUserNameLicencas  : string;
  DescryptedUserNameLicencas : string;

  Funcao: TCriptografia;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Server.ini');
  Funcao  := TCriptografia.Create;
  try
    EncryptedServer   := IniFile.ReadString('Banco de Dados', 'Server', '');
    EncryptedPassword := IniFile.ReadString('Banco de Dados', 'Password', '');
    EncryptedDataBase := IniFile.ReadString('Banco de Dados', 'Database', '');
    EncryptedUserName := IniFile.ReadString('Banco de Dados', 'User_Name', '');

    DecryptedServer    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPassword  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBase := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserName := Funcao.DecryptString(EncryptedUserName, 123);

    EncryptedServerLicencas   := IniFile.ReadString('BancoLicencas', 'Server', '');
    EncryptedPasswordLicencas := IniFile.ReadString('BancoLicencas', 'Password', '');
    EncryptedDataBaseLicencas := IniFile.ReadString('BancoLicencas', 'Database', '');
    EncryptedUserNameLicencas := IniFile.ReadString('BancoLicencas', 'User_Name', '');

    DecryptedServerLicencas    := Funcao.DecryptString(EncryptedServer, 123);
    DecryptedPasswordLicencas  := Funcao.DecryptString(EncryptedPassword, 123);
    DescryptedDataBaseLicencas := Funcao.DecryptString(EncryptedDataBase, 123);
    DescryptedUserNameLicencas := Funcao.DecryptString(EncryptedUserName, 123);

    // Carregar Edits Aba Banco - GroupBox Banco
    EdtDadosBancoServer.Text   := DecryptedServer;
    EdtDadosBancoPassword.Text := DecryptedPassword;
    EdtDadosBancoDataBase.Text := DescryptedDataBase;
    EdtDadosBancoUserName.Text := DescryptedUserName;

    //Carregar Edits Aba Dados Encryptados - GroupBox Licenças
    EdtEncryptadosBancoLicencasServer.Text   := DecryptedServerLicencas;
    EdtEncryptadosBancoLicencasPassword.Text := DecryptedPasswordLicencas;
    EdtEncryptadosBancoLicencasDataBase.Text := DescryptedDataBaseLicencas;
    EdtEncryptadosBancoLicencasUserName.Text := DescryptedUserNameLicencas;

  finally
    IniFile.Free;
    Funcao.Free;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;22;"function TCNPJCPF.ValidarCNPJ(const CNPJ: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CNPJCalc: string;
  Multiplicador: array[1..14] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CNPJ
  CNPJCalc := '';
  for i := 1 to Length(CNPJ) do
    if CharInSet(CNPJ[i], ['0'..'9']) then
      CNPJCalc := CNPJCalc + CNPJ[i];

  // Verifica se o CNPJ possui 14 dígitos
  if Length(CNPJCalc) <> 14 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CNPJCalc = '00000000000000') or (CNPJCalc = '11111111111111') or
    (CNPJCalc = '22222222222222') or (CNPJCalc = '33333333333333') or
    (CNPJCalc = '44444444444444') or (CNPJCalc = '55555555555555') or
    (CNPJCalc = '66666666666666') or (CNPJCalc = '77777777777777') or
    (CNPJCalc = '88888888888888') or (CNPJCalc = '99999999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 5;
  Multiplicador[2] := 4;
  Multiplicador[3] := 3;
  Multiplicador[4] := 2;
  Multiplicador[5] := 9;
  Multiplicador[6] := 8;
  Multiplicador[7] := 7;
  Multiplicador[8] := 6;
  Multiplicador[9] := 5;
  Multiplicador[10] := 4;
  Multiplicador[11] := 3;
  Multiplicador[12] := 2;
  for i := 1 to 12 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[13]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 6;
  Multiplicador[2] := 5;
  Multiplicador[3] := 4;
  Multiplicador[4] := 3;
  Multiplicador[5] := 2;
  Multiplicador[6] := 9;
  Multiplicador[7] := 8;
  Multiplicador[8] := 7;
  Multiplicador[9] := 6;
  Multiplicador[10] := 5;
  Multiplicador[11] := 4;
  Multiplicador[12] := 3;
  Multiplicador[13] := 2;
  for i := 1 to 13 do
    Soma := Soma + (StrToInt(CNPJCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CNPJCalc[14]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Projeto Rodas\WheelPro\Funcoes\Funcoes.CNPJCPF.pas;Método muito longo;97;"function TCNPJCPF.ValidarCPF(const CPF: string): Boolean;
var
  Digito, Soma, i, j: Integer;
  CPFCalc: string;
  Multiplicador: array[1..11] of Integer;
begin
  Result := False;

  // Remove caracteres não numéricos do CPF
  CPFCalc := '';
  for i := 1 to Length(CPF) do
    if CharInSet(CPF[i], ['0'..'9']) then
      CPFCalc := CPFCalc + CPF[i];

  // Verifica se o CPF possui 11 dígitos
  if Length(CPFCalc) <> 11 then
    Exit;

  // Verifica se todos os dígitos são iguais
  if (CPFCalc = '00000000000') or (CPFCalc = '11111111111') or
    (CPFCalc = '22222222222') or (CPFCalc = '33333333333') or
    (CPFCalc = '44444444444') or (CPFCalc = '55555555555') or
    (CPFCalc = '66666666666') or (CPFCalc = '77777777777') or
    (CPFCalc = '88888888888') or (CPFCalc = '99999999999') then
    Exit;

  // Calcula o primeiro dígito verificador
  Soma := 0;
  Multiplicador[1] := 10;
  Multiplicador[2] := 9;
  Multiplicador[3] := 8;
  Multiplicador[4] := 7;
  Multiplicador[5] := 6;
  Multiplicador[6] := 5;
  Multiplicador[7] := 4;
  Multiplicador[8] := 3;
  Multiplicador[9] := 2;
  for i := 1 to 9 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[10]) then
    Exit;

  // Calcula o segundo dígito verificador
  Soma := 0;
  Multiplicador[1] := 11;
  Multiplicador[2] := 10;
  Multiplicador[3] := 9;
  Multiplicador[4] := 8;
  Multiplicador[5] := 7;
  Multiplicador[6] := 6;
  Multiplicador[7] := 5;
  Multiplicador[8] := 4;
  Multiplicador[9] := 3;
  Multiplicador[10] := 2;
  for i := 1 to 10 do
    Soma := Soma + (StrToInt(CPFCalc[i]) * Multiplicador[i]);
  Digito := 11 - (Soma mod 11);
  if Digito >= 10 then
    Digito := 0;
  if Digito <> StrToInt(CPFCalc[11]) then
    Exit;

  Result := True;

end;
"
c:\fontes\Projeto Rodas\WheelPro\Funcoes\Funcoes.EnviarEmail.pas;Método muito longo;68;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure SetCEP(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setcontato(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
      procedure Setdataregistro(const Value: TDatetime);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setid_chave(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Setserial(const Value: string);
      procedure Setserialhd(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);

    public
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property ativo       : string read Fativo write Setativo;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
       property Linguagem   : string read FLinguagem write SetLinguagem;
       property serial      : string read Fserial write Setserial;
       property serialhd    : string read Fserialhd write Setserialhd;
       property ContraSenha : String read FContraSenha write SetContraSenha;
       property Data_exp    : TDateTime read FData_exp write SetData_exp;
       property id_chave    : string read Fid_chave write Setid_chave;
       function enviarPedido(aEmail: String): Boolean;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\Funcoes\Funcoes.EnviarPedido.pas;Método muito longo;74;"    procedure SetidCliente(const Value: Integer);
    procedure SetStatusPedido(const Value: Integer);
    procedure SetTotalPedido(const Value: currency);
    procedure Setbairro(const Value: string);
    procedure SetCEP(const Value: string);
    procedure Setcidade(const Value: string);
    procedure Setcnpj(const Value: string);
    procedure Setcomplemento(const Value: string);
    procedure Setcontato(const Value: string);
    procedure Setemail(const Value: string);
    procedure Setendereco(const Value: string);
    procedure Setie(const Value: string);
    procedure Setim(const Value: string);
    procedure Setnumero(const Value: integer);
    procedure Setrazao(const Value: string);
    procedure Setresponsavel(const Value: string);
    procedure Settelcontato(const Value: string);
    procedure Settelefone(const Value: string);
    procedure Setuf(const Value: string);
    procedure SetidPedido(const Value: Integer);
    procedure SetidProduto(const Value: Integer);
    procedure SetPrecoUnitario(const Value: Currency);
    procedure SetQuantidade(const Value: Integer);
    procedure SetTotaldoItem(const Value: Currency);
    procedure SetCelularContato(const Value: String);
    procedure SetEmailContato(const Value: String);
    procedure SetNomeContato(const Value: String);
    procedure SetTelefoneConteto(const Value: String);
    procedure SetLinguagem(const Value: string);

    public
      //Dados do Pedido
      property IdPedido: Integer read FIdPedido write SetIdPedido;
      property idCliente: Integer read FidCliente write SetidCliente;
      property StatusPedido: Integer read FStatusPedido write SetStatusPedido;
      property TotalPedido: currency read FTotalPedido write SetTotalPedido;

      //Itens do Pedido
      property idProduto: Integer read FidProduto write SetidProduto;
      property Quantidade: Integer read FQuantidade write SetQuantidade;
      property PrecoUnitario: Currency read FPrecoUnitario write SetPrecoUnitario;
      property TotaldoItem: Currency read FTotaldoItem write SetTotaldoItem;

      //Dados do cliente
       property razao       : string read Frazao write Setrazao;
       property cnpj        : string read Fcnpj write Setcnpj;
       property ie          : string read Fie write Setie;
       property im          : string read Fim write Setim;
       property endereco    : string read Fendereco write Setendereco;
       property numero      : integer read Fnumero write Setnumero;
       property complemento : string read Fcomplemento write Setcomplemento;
       property bairro      : string read Fbairro write Setbairro;
       property cidade      : string read Fcidade write Setcidade;
       property uf          : string read Fuf write Setuf;
       property CEP         : string read FCEP write SetCEP;
       property responsavel : string read Fresponsavel write Setresponsavel;
       property contato     : string read Fcontato write Setcontato;
       property telcontato  : string read Ftelcontato write Settelcontato;
       property telefone    : string read Ftelefone write Settelefone;
       property email       : string read Femail write Setemail;
       property NomeContato: String read FNomeContato write SetNomeContato;
       property TelefoneConteto: String read FTelefoneConteto write SetTelefoneConteto;
       property CelularContato: String read FCelularContato write SetCelularContato;
       property EmailContato: String read FEmailContato write SetEmailContato;
       property Linguagem   : string read FLinguagem write SetLinguagem;

      function enviarPedido(aEmail: String): Boolean;
      procedure PrencherDadosDoPedido(aidcliente: Integer;aStatusPedido:Integer;aTotalPedido: Currency);
  end;
"
c:\fontes\Projeto Rodas\WheelPro\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de Application.ProcessMessages em loop;95;"Application.ProcessMessages;"
c:\fontes\Projeto Rodas\WheelPro\Gerar Contra Senha\UnitGerarContrasenha.pas;Uso de with;159;"with FDQuery1 do;"
c:\fontes\Projeto Rodas\WheelPro\Gerar Contra Senha\UnitGerarContrasenha.pas;Método muito longo;134;"procedure TFRMGerarContraSenha.Button1Click(Sender: TObject);
var
  strsql: string;
  strsql2: string;
  contrasenha: string;
  senhafinal: string;
  i: Integer;
const
  str = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%?';
  max = 15;
begin
  if Edit1.Text = '' then
  begin
    ShowMessage('Entre com a chave.');
    Edit1.SetFocus;
  end
  else
  begin
    if EdtData.Text = '' then
    begin
      ShowMessage('Entre com a data de vencimento.');
      EdtData.SetFocus;
    end
    else
    begin
      with FDQuery1 do;
      begin
        strsql := 'select * from registro where chave=' + #39 +
          Edit1.Text + #39;
        strsql := strsql + ' and contrasenha=0';

        strsql2 :=
          'select razao from chaves,registro where chaves.id_chave= registro.id_chave and registro.chave='
          + #39 + Edit1.Text + #39;
        FDQuery2.SQL.Clear;
        FDQuery2.SQL.Add(strsql2);
        FDQuery2.Open();
        Label6.Caption := FDQuery2.FieldByName('razao').AsString;

        // ShowMessage(strsql);
        FDQuery1.SQL.Clear;
        FDQuery1.SQL.Add(strsql);
        FDQuery1.Open();
        if (FDQuery1.RecordCount) = 1 then
        begin
          ShowMessage('Chave encontrada');
          // rotina de gerar a contra-senha
          contrasenha := FDQuery1.FieldByName('chave').AsString;
          // ShowMessage(contrasenha);
          // Gerar contra-senha
          Randomize;
          Label3.Caption := '';
          for i := 1 to max do
          begin
            try
              FDConnection1.StartTransaction;

              FDQuery1.Edit;
              Label3.Caption := Label3.Caption + str[Random(Length(str)) + 1];
              FDQuery1.FieldByName('contrasenha').AsString := contrasenha +
              Label3.Caption;
              senhafinal := contrasenha + Label3.Caption;

              Memo1.Lines.Clear;
              Memo1.Lines.Add(senhafinal);

              // Encriptar
              // Memo1.Lines.Add(Crypt('D',senhafinal));
              // fim de encriptar

              FDQuery1.FieldByName('ativado').AsString := 'S';
              FDQuery1.FieldByName('data_exp').AsDateTime :=
              StrToDateTime(EdtData.Text);
              FDQuery1.Post;
              FDCOnnection1.Commit;

             Except
             on E: Exception do
             begin
               ShowMessage('Erro ao gravar Contra Senha' + e.Message);
               FDConnection1.Rollback;
               Exit;
             end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Categorias.pas;Método muito longo;380;"class function TModelCategorias.SalvarCategoria(
  aCategoria: TCategorias): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.categoria  ' +
                '(idcategorias,          ' +   //1
                'categoria,              ' +   //2
                'ativo,                  ' +   //3
                'datacadastro,           ' +   //4
                'dataalteracao,          ' +   //5
                'dataexclusao            ' +   //6
                ')                       ' +
                'VALUES (                ' +
                ':idcategorias,          ' +   //1 ok
                ':categoria,             ' +   //2 ok
                ':ativo,                 ' +   //3 ok
                ':datacadastro,          ' +   //4 ok
                ':dataalteracao,         ' +   //5 ok
                ':dataexclusao           ' +   //6 ok
                ')                       ');

     qry.ParamByName('idcategorias').DataType  := ftInteger;            //1

     qry.ParamByName('categoria').DataType     := ftString;
     qry.ParamByName('categoria').AsString     := aCategoria.categoria; //2


     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCategoria.ativo) > 0 then
       Ativo := Copy(aCategoria.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //3

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //4

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //5
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ParamByName('dataexclusao').DataType := ftDateTime;
     qry.ParamByName('dataexclusao').AsDateTime:= aCategoria.dataExclusao; //6

     //CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\CategoriasSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar a categoria: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Categoria - Linha : 460 - Finalizou o Alterar Categoria finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Categorias.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Clientes.pas;Método muito longo;580;"class function TModelCliente.SalvarCliente(aCliente: TClientes): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Clientes ' +
                '(idclientes,          ' +   //1
                'razao,                ' +   //2
                'cnpj_cpf,             ' +   //3
                'endereco,             ' +   //4
                'numero,               ' +   //5
                'complemento,          ' +   //6
                'cep,                  ' +   //7
                'cidade,               ' +   //8
                'bairro,               ' +   //9
                'ativo,                ' +   //10
                'uf,                   ' +   //11
                'datacadastro,         ' +   //12
                'dataalteracao,        ' +   //13
               // 'dataexclusao,       ' +   //14
                'idmodelocarro         ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idclientes,          ' +   //1 ok
                ':razao,               ' +   //2 ok
                ':cnpj_cpf,            ' +   //3 ok
                ':endereco,            ' +   //4 ok
                ':numero,              ' +   //5 ok
                ':complemento,         ' +   //6 ok
                ':cep,                 ' +   //7 ok
                ':cidade,              ' +   //8 ok
                ':bairro,              ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':uf,                  ' +   //11 ok
                ':datacadastro,        ' +   //12 ok
                ':dataalteracao,       ' +   //13 ok
              //  ':dataexclusao,        ' + //14 ok
                ':idmodelocarro        ' +   //15 ok
                ')                     ');

     qry.ParamByName('idclientes').DataType    := ftInteger;            //1

     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aCliente.razaosocial; //2
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aCliente.cnpj ;       //3
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aCliente.endereco;    //4
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aCliente.numero;      //5
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aCliente.complemento; //6
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aCliente.CEP;         //7
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aCliente.Cidade;      //8
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aCliente.Bairro;      //9

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aCliente.ativo) > 0 then
       Ativo := Copy(aCliente.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;               //10

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aCliente.UF) > 0 then
       UF := Copy(aCliente.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;                  //11

     qry.ParamByName('datacadastro').DataType  := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;                 //12

     qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //13
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

//     qry.ParamByName('dataexclusao').DataType := ftDateTime;
//     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //14

     qry.ParamByName('idmodelocarro').DataType := ftInteger;
     qry.ParamByName('idmodelocarro').AsInteger:= aCliente.Idmodelocarro; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ClientesSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o cliente: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Clientes - Linha : 629 - Finalizou o Alterar Cliente finalizou qry às '+ DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Clientes.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Contatos.pas;Método muito longo;253;"class function TModelContato.SalvarContato(aContato: TContato; aCliente: TClientes): Boolean;
var
  qry        : TFDQuery;
  Ativo      : string;
  UF         : string;
  LogManager : TLogManager;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.Close;
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO     ' +
                  'idcontatos,     ' +
                  'idcliente,      ' +
                  'telefone,       ' +
                  'celular,        ' +
                  'email,          ' +
                  'datacadastro    ' +
                  'dataalteracao,  ' +
                  'cnpjrevenda,    ' +
                  'ativo,          ' +
                  'nomecontato)    ' +
                  'VALUES(         ' +
                  ':idcontatos,    ' +
                  ':idcliente,     ' +
                  ':telefone,      ' +
                  ':celular,       ' +
                  ':email,         ' +
                  ':datacadastro   ' +
                  ':dataalteracao, ' +
                  ':cnpjrevenda,   ' +
                  ':ativo,         ' +
                  ':nomecontato)   ');

     qry.ParamByName('idcontatos').DataType      := ftInteger;
     qry.ParamByName('idcliente').DataType       := ftInteger;
     qry.ParamByName('idcliente').AsInteger      := aCliente.idcliente;
     qry.ParamByName('telefone').DataType        := ftString;
     qry.ParamByName('telefone').AsString        := aContato.telefone;
     qry.ParamByName('celular').DataType         := ftString;
     qry.ParamByName('celular').AsString         := aContato.celular;
     qry.ParamByName('email').DataType           := ftString;
     qry.ParamByName('email').AsString           := aContato.email;
     qry.ParamByName('datacadastro').DataType    := ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime  := Now;
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;
     qry.ParamByName('cnpjrevenda').DataType     := ftString;
     qry.ParamByName('cnpjrevenda').AsString     := aContato.cnpjrevenda;
     qry.ParamByName('ativo').DataType           := ftString;

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aContato.ativo) > 0 then
       Ativo := Copy(aContato.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;

     qry.ParamByName('ativo').AsString           := aContato.ativo;

     qry.ParamByName('nomecontato').DataType     := ftString;
     qry.ParamByName('nomecontato').AsString     := aContato.NomeContato;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
    on E: Exception do
    begin
      Result:= False;
      qry.Connection.Rollback;
      ShowMessage('Houve um erro ao gravar os dados do contato' + E.Message);
      qry.Close;
      qry.Free;

      if True then

      LogManager := TLogManager.Create;
      try
        LogManager.SaveLogToFile('Log_Model_Contatos.txt');
        LogManager.AddLog('Saiu na Model.Contatos - SalvarContato: Linha 320: e deu erro ao gravar o contato.');
      finally
        LogManager.Free;
      end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Fabricantes.pas;Método muito longo;64;"class function TModelFabricante.AlterarFabricante(
  aFabricante: TFabricante): Boolean;
var
   qry: TFDQuery;
   UF: String;
   Ativo: String;
begin
  Result:=False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Text:='UPDATE FABRICANTES              ' +
                  'SET                             ' +
                  'idfabricantes = :idfabricantes, ' +
                  'razao         = :razao,         ' +
                  'cnpj          = :cnpj,          ' +
                  'endereco      = :endereco,      ' +
                  'numero        = :numero,        ' +
                  'complemento   = :complemento,   ' +
                  'cep           = :cep,           ' +
                  'cidade        = :cidade,        ' +
                  'bairro        = :bairro,        ' +
                  'ativo         = :ativo,         ' +
                  'uf            = :uf,            ' +
                  'datacadastro  = now,            ' +
                  'datalateracao = now,            ' +
                  'WHERE                           ' +
                  'CNPJ          = :CNPJ           ';

    qry.ParamByName('idfabricantes').DataType   := ftInteger;
    qry.ParamByName('idfabricantes').AsInteger  := aFabricante.idFabricantes;
    qry.ParamByName('razao').DataType           := ftString;
    qry.ParamByName('razao').AsString           := aFabricante.razaosocial;
    qry.ParamByName('cnpj').DataType            := ftString;
    qry.ParamByName('cnpj').AsString            := aFabricante.cnpj ;
    qry.ParamByName('endereco').DataType        := ftString;
    qry.ParamByName('endereco').AsString        := aFabricante.endereco;
    qry.ParamByName('numero').DataType          := ftInteger;
    qry.ParamByName('numero').AsInteger         := aFabricante.numero;
    qry.ParamByName('complemento').DataType     := ftString;
    qry.ParamByName('complemento').AsString     := aFabricante.complemento;
    qry.ParamByName('cep').DataType             := ftString;
    qry.ParamByName('cep').AsString             := aFabricante.CEP;
    qry.ParamByName('cidade').DataType          := ftString;
    qry.ParamByName('cidade').AsString          := aFabricante.Cidade;
    qry.ParamByName('bairro').DataType          := ftString;
    qry.ParamByName('bairro').AsString          := aFabricante.Bairro;

    qry.ParamByName('uf').DataType              := ftString;

    if Length(aFabricante.UF) > 0 then
      UF := Copy(aFabricante.UF, 1, 2)
    else
      UF := '';

    qry.ParamByName('uf').AsString              := UF;

    qry.ParamByName('ativo').DataType           := ftString;
    if Length(aFabricante.ativo) > 0 then
      Ativo := Copy(aFabricante.ativo, 1, 1)
    else
      Ativo := '';

    qry.ParamByName('ativo').AsString           := Ativo;

    qry.ParamByName('dataalteracao').DataType   := ftDatetime;
    qry.ParamByName('dataalteracao').AsDateTime := aFabricante.DataAlteracao;

    qry.ParamByName('CNPJ').DataType            := ftString;
    qry.ParamByName('CNPJ').AsString            := aFabricante.cnpj;

    qry.ExecSQL;
    qry.connection.Commit;

    Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar atualizar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Fabricantes.pas;Método muito longo;306;"class function TModelFabricante.SalvarFabricante(
  aFabricante: TFabricante): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '     +
                ' fabricantes '    +
                '(idfabricantes, ' +
                'razao, '          +
                'cnpj, '           +
                'endereco, '       +
                'numero, '         +
                'complemento, '    +
                'cep, '            +
                'cidade, '         +
                'bairro, '         +
                'ativo, '          +
                'datacadastro, '   +
                'dataalteracao, '  +
//                'dataexclusao, '   +
                'uf) '             +
                'VALUES ('         +
                ':idclientes, '    +
                ':razao, '         +
                ':cnpj_cpf, '      +
                ':endereco, '      +
                ':numero,  '       +
                ':complemento, '   +
                ':cep, '           +
                ':cidade, '        +
                ':bairro, '        +
                ':ativo, '         +
                ':datacadastro, '  +
                ':dataalteracao, ' +
//                ':dataexclusao, '  +
                ':uf)');

     qry.ParamByName('idclientes').DataType    := ftInteger;
     qry.ParamByName('razao').DataType         := ftString;
     qry.ParamByName('razao').AsString         := aFabricante.razaosocial;
     qry.ParamByName('cnpj_cpf').DataType      := ftString;
     qry.ParamByName('cnpj_cpf').AsString      := aFabricante.cnpj ;
     qry.ParamByName('endereco').DataType      := ftString;
     qry.ParamByName('endereco').AsString      := aFabricante.endereco;
     qry.ParamByName('numero').DataType        := ftInteger;
     qry.ParamByName('numero').AsInteger       := aFabricante.numero;
     qry.ParamByName('complemento').DataType   := ftString;
     qry.ParamByName('complemento').AsString   := aFabricante.complemento;
     qry.ParamByName('cep').DataType           := ftString;
     qry.ParamByName('cep').AsString           := aFabricante.CEP;
     qry.ParamByName('cidade').DataType        := ftString;
     qry.ParamByName('cidade').AsString        := aFabricante.Cidade;
     qry.ParamByName('bairro').DataType        := ftString;
     qry.ParamByName('bairro').AsString        := aFabricante.Bairro;

     qry.ParamByName('uf').DataType            := ftString;
     if Length(aFabricante.UF) > 0 then
       UF := Copy(aFabricante.UF, 1, 2)
     else
       UF := '';

     qry.ParamByName('uf').AsString            := UF;

     qry.ParamByName('ativo').DataType         := ftString;
     if Length(aFabricante.ativo) > 0 then
       Ativo := Copy(aFabricante.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString         := Ativo;

     qry.ParamByName('datacadastro').DataType:= ftDateTime;
     qry.ParamByName('datacadastro').AsDateTime:= Now;

     qry.ParamByName('dataalteracao').DataType:= ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime:= Now;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result:=True;

  Except
     on E: Exception do
      begin
        ShowMessage('Ocorreu um erro ao tentar salvar o fabricante : ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;
        qry.Free;
      end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Produtos.pas;Método muito longo;630;"class function TModelProduto.SalvarProduto(aProduto: TProduto): Boolean;
var
  qry             : TFDQuery;
  Ativo           : string;
  UF              : string;
  LogManager      : TLogManager;
  CurrentDateTime : TDateTime;
  DateTimeStr     : string;
begin
  Result:= False;

  qry:=TFDQuery.Create(nil);
  qry.Connection := TConnection.CreateConnection;
  qry.Connection.StartTransaction;
  try

    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('INSERT INTO '  +
                ' fulanorodas.Produtos ' +
                '(idprodutos,          ' +   //1
                'produto,              ' +   //2
                'foto,                 ' +   //3
                'preco,                ' +   //4
                'aro,                  ' +   //5
                'idFabricante,         ' +   //6
                'datainclusao,         ' +   //7
                'dataalteracao,        ' +   //8
                'dataexclusao,         ' +   //9
                'ativo,                ' +   //10
                'lancamento,           ' +   //11
                'furacao,              ' +   //12
                'offset_et,            ' +   //13
                'idlinha,              ' +   //14
                'idacabamento          ' +   //15
                ')                     ' +
                'VALUES (              ' +
                ':idprodutos,          ' +   //1 ok
                ':produto,             ' +   //2 ok
                ':foto,                ' +   //3 ok
                ':preco,               ' +   //4 ok
                ':aro,                 ' +   //5 ok
                ':idFabricante,        ' +   //6 ok
                ':datainclusao,        ' +   //7 ok
                ':dataalteracao,       ' +   //8 ok
                ':dataexclusao,        ' +   //9 ok
                ':ativo,               ' +   //10 ok
                ':lancamento,          ' +   //11 ok
                ':furacao,             ' +   //12 ok
                ':offset_et,           ' +   //13 ok
                ':idlinha,             ' +   //14 ok
                ':idacabamento         ' +   //15 ok
                ')                     ');

     qry.ParamByName('idprodutos').DataType    := ftInteger;               //1

     qry.ParamByName('produto').DataType         := ftString;
     qry.ParamByName('produto').AsString         := aProduto.produto;      //2
     qry.ParamByName('foto').DataType            := ftStream;
     qry.ParamByName('foto').AsStream            := aProduto.foto;         //3 - Verificar
     qry.ParamByName('preco').DataType           := ftCurrency;
     qry.ParamByName('preco').AsCurrency         := aProduto.preco;        //4
     qry.ParamByName('aro').DataType             := ftInteger;
     qry.ParamByName('aro').AsInteger            := aProduto.aro;          //5
     qry.ParamByName('idfabricante').DataType    := ftInteger;
     qry.ParamByName('idfabricante').AsInteger   := aProduto.idfabricante; //6
     qry.ParamByName('datainclusao').DataType    := ftDateTime;
     qry.ParamByName('datainclusao').AsDateTime  := Now;                   //7
     qry.ParamByName('dataalteracao').DataType   := ftDateTime;
     qry.ParamByName('dataalteracao').AsDateTime := Now;                   //8
     //qry.ParamByName('dataexclusao').DataType    := ftDateTime;
     //qry.ParamByName('dataexclusao').AsDateTime  := Now;                 //9

     qry.ParamByName('ativo').DataType           := ftString;
     if Length(aProduto.ativo) > 0 then
       Ativo := Copy(aProduto.ativo, 1, 1)
     else
       Ativo := '';

     qry.ParamByName('ativo').AsString           := Ativo;                 //10

     qry.ParamByName('lancamento').DataType      := ftString;
     qry.ParamByName('lancamento').AsString      := aProduto.lancamento;   //11
     qry.ParamByName('furacao').DataType         := ftInteger;
     qry.ParamByName('furacao').AsInteger        := aProduto.furacao;      //12
     qry.ParamByName('offset_et').DataType       := ftInteger;
     qry.ParamByName('offset_et').AsInteger      := aProduto.OffsetEt;     //13
     qry.ParamByName('idlinha').DataType         := ftInteger;
     qry.ParamByName('idlinha').AsInteger        := aProduto.idlinha;      //14
     qry.ParamByName('idacabamento').DataType    := ftInteger;
     qry.ParamByName('idacabamento').AsInteger   := aProduto.idacabamento; //15

     CarregarFGravarLog;

     if FGravarLogs then
       qry.SQL.SaveToFile('C:\ProdutosSQL.txt');

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
     on E: Exception do
      begin
        Result := False;
        ShowMessage('Ocorreu um erro ao salvar o produto: ' + E.Message);
        qry.Connection.Rollback;
        qry.Close;

        if True then
        begin
          LogManager:= TLogManager.Create;
          try
            CurrentDateTime := Now;
            DateTimeStr     := FormatDateTime('yyyy-mm-dd hh:nn:ss', CurrentDateTime);
            LogManager.AddLog('Classe Model.Produtos - Linha : 271 - Finalizou o salvar produto finalizou qry às ' + DateTimeStr);
            LogManager.SaveLogToFile('Log_Model_Produtos.txt');
          finally
            LogManager.Free;
          end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Método muito longo;70;"      procedure Setativo(const Value: string);
      procedure Setbairro(const Value: string);
      procedure Setcidade(const Value: string);
      procedure Setcnpj(const Value: string);
      procedure Setcomplemento(const Value: string);
      procedure Setemail(const Value: string);
      procedure Setendereco(const Value: string);
      procedure Setnumero(const Value: integer);
      procedure Setrazao(const Value: string);
      procedure Setresponsavel(const Value: string);
      procedure Settelefone(const Value: string);
      procedure Setuf(const Value: string);
      procedure Setdataregistro(const Value: TDatetime);
      procedure SetCEP(const Value: string);
      procedure Setie(const Value: string);
      procedure Setim(const Value: string);
      procedure SetLinguagem(const Value: string);
      procedure Setcontato(const Value: string);
      procedure Settelcontato(const Value: string);
      procedure Setserial(const Value: string);
      function  GetWMIstring(const WMIClass, WMIProperty:string): string;
      procedure SetOnLabel6TextChanged(const Value: TNotifyEvent);
      procedure Setserialhd(const Value: string);
      procedure SetContraSenha(const Value: String);
      procedure SetData_exp(const Value: TDateTime);
    procedure Setid_chave(const Value: string);
    public
      property razao       : string    read Frazao write Setrazao;
      property cnpj        : string    read Fcnpj write Setcnpj;
      property ie          : string    read Fie write Setie;
      property im          : string    read Fim write Setim;
      property endereco    : string    read Fendereco write Setendereco;
      property numero      : integer   read Fnumero write Setnumero;
      property complemento : string    read Fcomplemento write Setcomplemento;
      property bairro      : string    read Fbairro write Setbairro;
      property cidade      : string    read Fcidade write Setcidade;
      property uf          : string    read Fuf write Setuf;
      property CEP         : string    read FCEP write SetCEP;
      property ativo       : string    read Fativo write Setativo;
      property responsavel : string    read Fresponsavel write Setresponsavel;
      property contato     : string    read Fcontato write Setcontato;
      property telcontato  : string    read Ftelcontato write Settelcontato;
      property telefone    : string    read Ftelefone write Settelefone;
      property email       : string    read Femail write Setemail;
      property dataregistro: TDatetime read Fdataregistro write Setdataregistro;
      property Linguagem   : string    read FLinguagem write SetLinguagem;
      property serial      : string    read Fserial write Setserial;  //transferir do projeto antigo para esse
      property serialhd    : string    read Fserialhd write Setserialhd;
      property ContraSenha : String    read FContraSenha write SetContraSenha;
      property Data_exp    : TDateTime read FData_exp write SetData_exp;
      property id_chave    : string    read Fid_chave write Setid_chave;

      //Verificar se será necessário criar mais propertys para a tabela Registro
      property OnLabel6TextChanged: TNotifyEvent read FOnLabel6TextChanged write SetOnLabel6TextChanged;
      procedure enviarEmail; //Já chama  aqui a gravação no banco de  licenças
      function GerarSerial: string;
      class function validarDados(aRegistro: TModelRegistro ; aLingua: string) : boolean;
      class function GravarNoBancoLicencas(aRegistro : TModelRegistro): Boolean;  //Tabela Chaves
      class function ValidarLicenca(adata: TDateTime; acnpj: string): Boolean;
      class function GravarRegistro(aRegistro: TModelRegistro; achave: String): Boolean;
      class function GravarContraSenha(aRegistro: TModelRegistro): Boolean;

      constructor create;
      destructor destroy;override;

  end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Uso de with;304;"with qry do"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Método muito longo;273;"function TModelRegistro.GerarSerial: string;
var
  x:string;
  Y:string;
  z:string;
  data : TDateTime;
  qry, qry2: TFDQuery;
  Registrarfrm: TFrmRegistrar;
begin
  Result:= '';
  FSWbemLocator := CreateOleObject('WbemScripting.SWbemLocator');
  FWMIService   := FSWbemLocator.ConnectServer('localhost', 'root\CIMV2', '', '');
  X:=Trim(GetWMIstring('Win32_BIOS','SerialNumber')); //Serial da Bios
  Y:=Trim(GetWMIstring('Win32_PhysicalMedia','SerialNumber')); //Serial do HD

  //label6.Caption:= x;
  //label4.Caption:= y;
  z:=x+y+(DateToStr(date));
  //label5.Caption:=z;
  Result:= z;

  qry:= TFDquery.Create(nil);
  qry.Connection  := TConexaoLicencas.CreateConnection;
  try
    qry.SQL.Clear;
    qry.SQL.Add('select * from registro');
    qry.SQL.Add('');

    qry.ExecSQL;
    qry.Connection.Commit;

    with qry do

     //FDQuery1.Edit;
     //Desabilitar botao Geral Serial
     //Edit1.Enabled:=False;
     //BtnRegistrar.Enabled:=False;
     //Button1.Enabled:=False;
     //PageControl1.Pages[1].TabVisible := False;
     // fim


     qry.FieldByName('chave').AsString      := z;
     qry.FieldByName('Data_inc').AsDateTime := Date;
     Data := date;
     qry.FieldByName('Data_exp').AsDateTime:=Data;
     //ShowMessage(DateToStr(Data+30));
     qry.FieldByName('serialhd').AsString:=y;

     qry.FieldByName('ID_Chave').AsInteger := qry2.FieldByName('ID_Chave').AsInteger;

     qry.FieldByName('contrasenha').AsString:='0';
     qry.FieldByName('ativado').AsString:='N';
     qry.Post;

  finally
     qry.Free;
  end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Método muito longo;354;"class function TModelRegistro.GravarContraSenha(
  aRegistro: TModelRegistro): Boolean;
var
  qry: TFDQuery;
begin
  Result := False;
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  //Checar se a CONTRASENHA Existe se não avisar ao usuário que a Contra Senha está errada e encerrar o programa?
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('select contrasenha from registro');
    qry.SQL.Add(' where contrasenha = :contrasenha');
    qry.ParamByName('contrasenha').DataType := ftString;
    qry.ParamByName('contrasenha').AsString := aRegistro.ContraSenha;
    qry.Open;

    if qry.RecordCount > 0 then //Encontrou a ContraSenha faz o update
    begin
      qry.Connection.StartTransaction;
      try
        qry.close;
        qry.SQL.Clear;

        qry.SQL.Text:='UPDATE LICENCAS.REGISTRO      ' +
                      'SET                           ' +
                     // 'ID           = :id,           ' +
                     // 'ID_CHAVE     = :ID_CHAVE,     ' +
                     // 'CHAVE        = :CHAVE,        ' +
                      'DATA_INC     = :DATA_INC,     ' +
                      'DATA_EXP     = :DATA_EXP,     ' +
                      'CONTRASENHA  = :CONTRASENHA,  ' +
                      'ATIVADO      = :ATIVADO,      ' +
                    //  'SERIALHD     = :SERIALHD      ' +
                      'WHERE                         ' +
                      'CONTRASENHA     = :CONTRASENHA      ';


        qry.ParamByName('DATA_INC').DataType     := ftDate;
        qry.ParamByName('DATA_INC').AsDateTime   := Now;
        qry.ParamByName('DATA_EXP').DataType     := ftDate;
        qry.ParamByName('DATA_EXP').AsDate       := aRegistro.Data_exp + 30;
        qry.ParamByName('CONTRASENHA').DataType  := ftString;
        qry.ParamByName('CONTRASENHA').AsString  := aRegistro.ContraSenha;
        qry.ParamByName('ATIVADO').DataType      := ftString;
        qry.ParamByName('ATIVADO').AsString      := aRegistro.ativo;

        qry.ExecSQL;
        qry.Connection.Commit;

        Result := True;
      Except
      On E: Exception do
        begin
           Showmessage('Erro ao gravar tabela registro!'+ E.Message);
           qry.Connection.Rollback;
           Result := False;
        end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Método muito longo;426;"class function TModelRegistro.GravarNoBancoLicencas(
  aRegistro: TModelRegistro): Boolean;
var
  qry   : TFDQuery;
  Ativo : string;
  UF    : string;
  idChave : integer;
begin
  //Testar se a Licença já existe no banco de dados  buscar pelo cnpj  trazer o id e pesquisar na tabela registro
  //Se já existir o cnpj na tabela chaves e estiver aguardando a gravação da contrasenha na tabela registro o que fazer?
  // Informar o usuário que está aguardando a contrasenha e pular fora?
  qry:= TFDquery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
    qry.Close;
    qry.SQL.Clear;
    qry.SQL.Add('Select * from chaves');
    qry.SQL.Add(' where cnpj =:cnpj');
    qry.ParamByName('cnpj').DataType := ftString;
    qry.ParamByName('cnpj').AsString := aRegistro.cnpj;
    qry.Open;

    if qry.RecordCount > 0 then //O registro dos dados do cliente existe na tabela chaves
    begin
      ShowMessage('Registro encontrado');
      idChave:= qry.FieldByName('id_chave').AsInteger;

      qry.Close;
      qry.SQL.Clear;
      qry.SQL.Add('Select contrasenha from registro');
      qry.SQL.Add(' where id_chave=:id_chave');
      qry.ParamByName('id_chave').DataType  := ftInteger;
      qry.ParamByName('id_chave').AsInteger := idChave;
      qry.Open;

      if (qry.RecordCount > 0) and (qry.fieldbyname('contrasenha').AsString='') then
      begin
          //Gravar no Banco primeiro registro
          qry:= TFDquery.Create(nil);
          qry.Connection := TConexaoLicencas.CreateConnection;
          qry.Connection.StartTransaction;
          try
            qry.Close;
            qry.SQL.Clear;
            qry.SQL.Add('INSERT INTO      ' +
                        ' licencas.chaves ' +
                        '(id_chave,       ' + //1
                        'razao,           ' + //2
                        'cnpj,            ' + //3
                        'ie,              ' + //4
                        'im,              ' + //5
                        'endereco,        ' + //6
                        'numero,          ' + //7
                        'complemento,     ' + //8
                        'bairro,          ' + //9
                        'cidade,          ' + //10
                        'cep,             ' + //11
                        'uf,              ' + //12
                        'ativo,           ' + //13
                        'contato,         ' + //14
                        'telcontato,      ' + //15
                        'email,           ' + //16
                        'datacadastro,    ' + //17
                        'dataalteracao    ' + //18
                       // 'dataexclusao   ' + //19
                        ')                ' +
                        'VALUES (         ' +
                        ':id_chave,       ' + //1 ok
                        ':razao,          ' + //2 ok
                        ':cnpj,           ' + //3 ok
                        ':ie,             ' + //4 ok
                        ':im,             ' + //5 ok
                        ':endereco,       ' + //6 ok
                        ':numero,         ' + //7 ok
                        ':complemento,    ' + //8 ok
                        ':bairro,         ' + //9 ok
                        ':cidade,         ' + //10 ok
                        ':cep,            ' + //11 ok
                        ':uf,             ' + //12 ok
                        ':ativo,          ' + //13 ok
                        ':contato,        ' + //14
                        ':telcontato,     ' + //15
                        ':email,          ' + //16
                        ':datacadastro,   ' + //17 ok
                        ':dataalteracao   ' + //18 ok
                      //  ':dataexclusao, ' + //19 ok
                        ')                ');

             qry.ParamByName('id_chave').DataType    := ftInteger;             //1
             qry.ParamByName('razao').DataType       := ftString;
             qry.ParamByName('razao').AsString       := aRegistro.razao;       //2
             qry.ParamByName('cnpj').DataType        := ftString;
             qry.ParamByName('cnpj').AsString        := aRegistro.cnpj ;       //3
             qry.ParamByName('ie').DataType          := ftString;
             qry.ParamByName('ie').AsString          := aRegistro.ie;          //4
             qry.ParamByName('im').DataType          := ftString;
             qry.ParamByName('im').AsString          := aRegistro.im;          //5
             qry.ParamByName('endereco').DataType    := ftString;
             qry.ParamByName('endereco').AsString    := aRegistro.endereco;    //6
             qry.ParamByName('numero').DataType      := ftInteger;
             qry.ParamByName('numero').AsInteger     := aRegistro.numero;      //7
             qry.ParamByName('complemento').DataType := ftString;
             qry.ParamByName('complemento').AsString := aRegistro.complemento; //8
             qry.ParamByName('cep').DataType         := ftString;
             qry.ParamByName('cep').AsString         := aRegistro.CEP;         //9
             qry.ParamByName('cidade').DataType      := ftString;
             qry.ParamByName('cidade').AsString      := aRegistro.Cidade;      //10
             qry.ParamByName('bairro').DataType      := ftString;
             qry.ParamByName('bairro').AsString      := aRegistro.Bairro;      //11
             qry.ParamByName('uf').DataType          := ftString;
             if Length(aRegistro.UF) > 0 then
               UF := Copy(aRegistro.UF, 1, 2)
             else
               UF := '';

             qry.ParamByName('uf').AsString          := UF;                    //12

             qry.ParamByName('ativo').DataType       := ftString;
             if Length(aRegistro.ativo) > 0 then
               Ativo := Copy(aRegistro.ativo, 1, 1)
             else
               Ativo := '';

             qry.ParamByName('ativo').AsString       := Ativo;                 //13

             qry.ParamByName('contato').DataType     := ftString;
             qry.ParamByName('contato').AsString     := aRegistro.contato;     //14

             qry.ParamByName('telcontato').DataType     := ftString;
             qry.ParamByName('telcontato').AsString     := aRegistro.telcontato; //15

             qry.ParamByName('email').DataType     := ftString;
             qry.ParamByName('email').AsString     := aRegistro.email;           //16

             qry.ParamByName('datacadastro').DataType  := ftDateTime;
             qry.ParamByName('datacadastro').AsDateTime:= Now;                 //17

             qry.ParamByName('dataalteracao').DataType  := ftDateTime;         //18
             qry.ParamByName('dataalteracao').AsDateTime:= Now;

        //     qry.ParamByName('dataexclusao').DataType := ftDateTime;
        //     qry.ParamByName('dataexclusao').AsDateTime:= aCliente.dataExclusao; //19

             qry.ExecSQL;
             qry.Connection.Commit;

             Result := True;
          Except
           On E: Exception do
              begin
                if aRegistro.Linguagem='Portugues' then
                  ShowMessage('Erro ao tentar gravar licença!' + E.Message)
                else
                  ShowMessage('Error trying to write license!!' + E.Message);

                qry.Connection.Rollback;
                qry.Free;
              end;
"
c:\fontes\Projeto Rodas\WheelPro\Model\Model.Registro.pas;Método muito longo;739;"class function TModelRegistro.GravarRegistro(
  aRegistro: TModelRegistro; achave: String): Boolean;
var
  qry: TFDQuery;
  data: TDateTime;
begin
  qry:= TFDQuery.Create(nil);
  qry.Connection := TConexaoLicencas.CreateConnection;
  qry.Connection.StartTransaction;
  try
     qry.SQL.Clear;
     qry.SQL.Add('INSERT INTO REGISTRO      ' +
                 '(id,                      ' +
                 'id_chave,                 ' +
                 'chave,                    ' +
                 'data_inc,                 ' +
                 'data_exp,                 ' +
                 'contrasenha,              ' +
                 'ativado,                  ' +
                 'serialhd                  ' +
               //  'WHERE id_chave =:id_chave ' +
                 ')                         ' +
                 'VALUES (                  ' +
                 ':id,                      ' +
                 ':id_chave,                ' +
                 ':chave,                   ' +
                 ':data_inc,                ' +
                 ':data_exp,                ' +
                 ':contrasenha,             ' +
                 ':ativado,                 ' +
                 ':serialhd                 ' +
                 ')                         ');

     qry.ParamByName('id').DataType :=ftinteger;
     qry.ParamByName('id_chave').DataType:= ftInteger;

     qry.ParamByName('chave').DataType     := ftString;
     qry.ParamByName('chave').AsString      := aChave;

     qry.ParamByName('Data_inc').DataType   := ftDateTime;
     qry.ParamByName('Data_inc').AsDateTime := Date;

     Data := Date;

     qry.ParamByName('Data_exp').DataType    := ftDateTime;
     qry.ParamByName('Data_exp').AsDateTime  :=Data;

     //ShowMessage(DateToStr(Data+30));
     qry.ParamByName('serialhd').DataType    := ftDateTime;
     qry.ParamByName('serialhd').AsString    :=aRegistro.serialhd;

     qry.ParamByName('contrasenha').AsString :='0';
     qry.ParamByName('ativado').AsString     :='N';

     //Ver como fazer?
     //qry.ParamByName('id_chave').AsInteger := //qry2.FieldByName('ID_Chave').AsInteger;

     qry.ExecSQL;
     qry.Connection.Commit;

     Result := True;
  Except
  On E: Exception do
    begin
       Showmessage('Erro ao gravar tabela registro!'+ E.Message);
       qry.Connection.Rollback;
       Result := False;
    end;
"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\Unit1.pas;Uso de with;106;"with FDQuery1 do"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\Unit1.pas;Uso de with;136;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\Unit1.pas;Uso de with;166;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;181;"with FDQuery1,FDQuery2 do"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;220;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;250;"with FDQuery2 do;"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Método muito longo;306;"procedure TFRMGERARSERIAL.Button4Click(Sender: TObject);
var
    IdSMTP1: TIdSMTP;
    Idmessage: TIdMessage;
    TextoMsg: TidText;
    IdSSL: TIdSSLIOHandlerSocketOpenSSL;
    contatol:string;
    emaill:string;
    telcontatol:string;
    const
    CRFL = #13#10;

begin
    IdSMTP1                 := TIdSMTP.create(nil);
    IdSMTP1.ConnectTimeout  := 10000;
    IdSMTP1.ReadTimeout     := 10000;

    IdMessage               := TIdMessage.create(nil);
    IdMessage.Clear;
    IdMessage.CharSet       := 'iso-8859-1';
    IdMessage.Encoding      := MeMIME;
    IdMessage.ContentType   := 'multipart/related'   ;
    IdMessage.subject       := 'Novo Serial Gerado do cliente: ' +FDQuery2.FieldByName('razao').AsString ;

    textomsg                := TIdText.Create(IdMessage.MessageParts);
    //textomsg.Body.Text      := 'Se você consegue ler isto então é porque funcionou o teste!';
    contatol    := FDQuery2.FieldByName('contato').AsString;
    emaill      := FDQuery2.FieldByName('email').AsString;
    telcontatol := FDQuery2.FieldByName('telcontato').AsString;
    Memo1.Lines.Add(contatol);
    Memo1.Lines.Add(emaill);
    Memo1.Lines.Add(telcontatol);
    //TextoMsg.Body.Text      :=Memo1.Lines.Text + #13 + 'Serial gerado: '+Label5.Caption;

    //TextoMsg.Body.Text      :=Memo1.Lines.Text;
    TextoMsg.Body.Add('Chave Gerada: '+Label5.Caption+'<br/>');
    TextoMsg.Body.Add(contatol+'<br/>');
    TextoMsg.Body.Add(emaill+'<br/>');
    TextoMsg.Body.Add(telcontatol+'<br/>');


    textomsg.ContentType    := 'text/html';

    if ((cbtipo.itemindex = 0) or (cbtipo.itemindex = 2)) then
    begin
        // GMAIL e YAHOO

        if cbtipo.itemindex = 0 then
        begin
            idSMTP1.Host            := 'smtp.gmail.com';
            idSMTP1.Username        := 'delphi.send@gmail.com';
            idSMTP1.Password        := 'delphi.send12345';
        end
        else begin
            idSMTP1.Host            := 'smtp.mail.yahoo.com';
            idSMTP1.Username        := 'email@yahoo.com.br';
            idSMTP1.Password        := 'senha';
        end;
"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;368;"with idSMTP1 do"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\UnitGerarSerial.pas;Uso de with;418;"with idSMTP1 do"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\Unitsendemail.pas;Uso de with;77;"with idSMTP1 do"
c:\fontes\Projeto Rodas\WheelPro\obtendo numero serial do hd\Unitsendemail.pas;Uso de with;126;"with idSMTP1 do"
c:\fontes\Projeto Rodas\WheelPro\UPrincipal.pas;Método muito longo;209;"    procedure Circle1Gesture(Sender: TObject;
      const EventInfo: TGestureEventInfo; var Handled: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure Circle1Click(Sender: TObject);
    procedure Circle1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Layout1MouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Single);
    procedure Image4Gesture(Sender: TObject; const EventInfo: TGestureEventInfo;
      var Handled: Boolean);
    procedure Image4MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Image4MouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure Circle1DblClick(Sender: TObject);
    procedure Image4DblClick(Sender: TObject);
    procedure MenuItemFabricantesCategoriasClick(Sender: TObject);
    procedure NewImagemDbClick(Sender: TObject);
    procedure NewImagemMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure NewImagemGesture(Sender: TObject;
              const EventInfo: TGestureEventInfo;
              var Handled: Boolean);
    procedure NewImagemMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Single);
    procedure FormShow(Sender: TObject);
    procedure BtnCarregarFotoClick(Sender: TObject);
    procedure MenuItemConfiguracoesSistemaClick(Sender: TObject);
    procedure MenuItem16Click(Sender: TObject);
    procedure BtnCopiarFotoClick(Sender: TObject);
    procedure Image4MouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure TrackBar1Change(Sender: TObject);
    procedure CBMarcasChange(Sender: TObject);
    procedure CBModeloChange(Sender: TObject);
    procedure CBFabricantesChange(Sender: TObject);
    procedure CBCategoriasChange(Sender: TObject);
    procedure CBLinhasChange(Sender: TObject);
    procedure CBProdutosChange(Sender: TObject);
    procedure BtnCopiarRodaClick(Sender: TObject);
    procedure MenuItemClientesDadosClick(Sender: TObject);
    procedure MenuItemClientesVeiculosClick(Sender: TObject);
    procedure MenuItemFabricantesDadosClick(Sender: TObject);
    procedure MenuItemClientesOrcamentosClick(Sender: TObject);
    procedure MenuItemRegistrarClick(Sender: TObject);
    procedure BtnCarregarRodaCalotaClick(Sender: TObject);
    procedure SairExecute(Sender: TObject);
    procedure LogOffExecute(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure MediaReceiverProfileResourceReceived(const Sender: TObject;
      const AResource: TRemoteResource);
    procedure MediaReceiverManagerRequestManagerPassword(const Sender: TObject;
      const ARemoteIdentifier: string; var Password: string);
    procedure MenuItemFabricanteProdutosClick(Sender: TObject);
    procedure MenuItemFabricantesDeVeiculosClick(Sender: TObject);
    procedure Image5Click(Sender: TObject);
    procedure ImageLogoClick(Sender: TObject);
    procedure MenuItem2Click(Sender: TObject);
    procedure MenuItem3Click(Sender: TObject);
    procedure MenuItem4Click(Sender: TObject);
    procedure MenuItemBackupClick(Sender: TObject);
    procedure Button5Click(Sender: TObject);


  private
    { Private declarations }
    MoveObjeto: Boolean;
    OffSet: TPointF;
    NewCircle: TCircle;
    NewImagem: TImage;
    FIdMarcaSelecionada: integer;
    FIdFabricante: integer;
    FIdCategoria: integer;
    FidLinha: integer;
    FMemoryStream: TMemoryStream;
    FBlobStream: TStream;
    FIdProduto: integer;
    FValorTotalOrcamento: Double;
    ProdutoDS: TDataSet;
    qry: TFDQuery;
    FConexao: TFDConnection;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FArquivoLogo: String; //Nome do Arquivo da Logo a Ser carregado

    procedure Modo_Edicao(editar: Boolean);
    procedure Modo_Edicao2(editar: Boolean);
    procedure NewImagemMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; var Handled: Boolean);
    procedure SetidUsuario(const Value: Integer);
    procedure SaveBitmapToFile(Bitmap: TBitmap; const FileName: string);
    procedure EnviarImagemWhatsApp(const FileName: string);
    procedure EnviarAnexoWhatsApp(const FileName: string);
    function ImageToBase64(const FileName: string): string;
    function DesabilitaEdtWhatsApp:Boolean;

    function CapturaTela:TBitMap;

  public
    { Public declarations }
     FidUsuario: Integer;
     FLinguagem: string;
     property idUsuario: Integer read FidUsuario write SetidUsuario;
     procedure CarregarCores;
     procedure CarregarLinguagem;
     procedure CarregarLogo;
     constructor create;
     destructor destroy;override;

  end;
"
c:\fontes\Projeto Rodas\WheelPro\UPrincipal.pas;Método muito longo;416;"procedure TFrmPrincipal.BtnCopiarRodaClick(Sender: TObject);
begin
  if MoveObjeto then
    Modo_Edicao(False);

  if NOT Assigned(NewCircle) then
    begin
      // Create a new TCircle component
      NewCircle := TCircle.Create(Self);

      // Copy the properties of the original TCircle component
      NewCircle.Position.X := Circle1.Position.X + 50;
      NewCircle.Position.Y := Circle1.Position.Y + 50;
      NewCircle.Width      := Circle1.Width;
      NewCircle.Height     := Circle1.Height;
      NewCircle.Fill.Color := Circle1.Fill.Color;

      //Criar o TImage dentro do NewCircle
      NewImagem:= TImage.Create(NewCircle);
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Eventos
      //NewImagem.OnClick      :=  NewImagemClick;
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      NewCircle.Parent := Self; //Cria no Formulário Principal
    end
    else //apagar o mesmo ou receber a copia da Matrix Atual
    begin
      //Criar o TImage dentro do NewCircle
      NewImagem.BitMap.Clear($000000);
      NewImagem:= TImage.Create(nil); //NewCircle - original
      NewImagem.Parent:= NewCircle;
      NewImagem.Bitmap.Assign(TImage(Circle1.Children[0]).Bitmap);
      NewImagem.Align:=  TalignLayout.Client;

      // Copy the events from the original TImage to the new TImage
      //NewImagem.OnClick      :=  NewImagemClick; //Ficou com o clique esquerdo sem função
      NewImagem.OnDblClick   :=  NewImagemDbClick;
      NewImagem.OnGesture    :=  NewImagemGesture;
      NewImagem.OnMouseDown  :=  NewImagemMouseDown;
      NewImagem.OnMouseUp    :=  NewImagemMouseUp;
      NewImagem.OnMouseWheel :=  NewImagemMouseWheel;

      //Exit;
    end;
"
c:\fontes\Projeto Rodas\WheelPro\UPrincipal.pas;Uso de with;1459;"With FrmPrincipal do"
c:\fontes\Projeto Rodas\WheelPro\UPrincipal.pas;Uso de with;1480;"With FrmPrincipal do"
c:\fontes\Projeto Rodas\WheelPro\View\UCadastroClientes.pas;Método muito longo;185;"    procedure FormShow(Sender: TObject);
    procedure BtnNovoClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BtnPrimeiroClick(Sender: TObject);
    procedure btnAnteriorClick(Sender: TObject);
    procedure BtnProximoClick(Sender: TObject);
    procedure BtnUltimoClick(Sender: TObject);
    procedure BtnAlterarClick(Sender: TObject);
    procedure BtnGravarClick(Sender: TObject);
    procedure CBAtivoExit(Sender: TObject);
    procedure EdtNumeroKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure EdtCnpjKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure EdtCepKeyDown(Sender: TObject; var Key: Word; var KeyChar: Char;
      Shift: TShiftState);
    procedure BtnExcluirClick(Sender: TObject);
    procedure BtnPesquisarClick(Sender: TObject);
    procedure TabItemPesquisaClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EdtCnpjExit(Sender: TObject);
  private
    { Private declarations }
    FConexao: TFDConnection;
    FCliente: TClientes;
    FContato: TContato;
    PodeGravar: Boolean;
    FUFCliente: string;
    FAtivoCliente: string;
    qry: TFDQuery;
    RegrasDeNegocios: TModelCliente;
    FModelContato: TModelContato;
    FTipo: String;
    FController: TControllerCliente;
    CDS: TClientDataSet;
    FLinguagem: string;
    CurrentDateTime: TDateTime; //Para uso com o Log
    DateTimeStr: string;        //Para uso com o Log
    FGravarLog: Boolean;        //Para uso com o Log
    FHabilitarLogsSistema: string;
    FNextIDContato: Integer;
    FGravacaoSucesso: Boolean;
    procedure DesabilitaBotoes(const BotaoSet:TBotaoSet);
    Procedure PopularGridClientes;
    procedure PreencheDadosEncontradosDoCliente;
    procedure PopularDataSet;
    procedure CarregarConfiguracao;
    procedure PopularContatos;
    function LerSalvarLogsBancoDeDados: Boolean;
    function GravarLogsBancoDeDados: Boolean;
  public
    { Public declarations }
    DataSet: TClientDataSet;
    FSomenteAtivos: string;
    FSemContatos  : string;
    FBtnUltimo    : string;
    Function CriarDataSet(aDadaSet: TClientDataSet): TClientDataSet;
    procedure OnDataSetChange;
    procedure PopularClientes;
    procedure CarregarCores;
    procedure CarregarLinguagem;
    function ProximoIDContato: integer;


  end;
"
c:\fontes\Projeto Rodas\WheelPro\View\UCadastroFabricantes.pas;Método muito longo;417;"procedure TFrmFabricantes.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     LblCodCliente.Text      := 'Cod. Fabricante';
     LblRazao.Text           := 'Razão Social / Nome';
     LblCnpj.Text            := 'CNPJ / CPF';
     LblEndereco.Text        := 'Endereço';
     LblNumero.Text          := 'Número';
     LblComplemento.Text     := 'Complemento';
     LblCEP.Text             := 'CEP';
     LblCidade.Text          := 'Cidade';
     LblCEP.Text             := 'CEP';
     LblUF.Text              := 'UF';
     LblAtivo.Text           := 'Ativo';
     LblPesquisar.Text       := 'Pesquisar';
     BtnNovo.Text            := '&Novo';
     BtnAlterar.Text         := '&Alterar';
     BtnExcluir.Text         := '&Excluir';
     BtnSalvar.Text          := '&Salvar';
     TabItemCadastro.Text    := 'Cadastro';
     TabItemPesquisa.Text    := 'Pesquisa';
     TabItemContato.Text     := 'Contato';
     lblTitulo.Text          := 'Cadastro do Fabricantes';
     FrmFabricantes.Caption  := 'Cadastro do Fabricantes';

   end
   else if FLinguagem = 'Ingles' then
   begin
     LblCodCliente.Text      := 'Id. Manufacturer';
     LblRazao.Text           := 'Corporate Name / Name';
     LblCnpj.Text            := 'Tax Identification Number - TIN';
     LblEndereco.Text        := 'Address';
     LblNumero.Text          := 'Number';
     LblComplemento.Text     := 'Complement';
     LblCidade.Text          := 'City';
     LblCEP.Text             := 'Zip Code';
     LblUF.Text              := 'State';
     LblAtivo.Text           := 'Active';
     LblPesquisar.Text       := 'Search';
     BtnNovo.Text            := '&New';
     BtnAlterar.Text         := '&Alter';
     BtnExcluir.Text         := '&Delete';
     BtnSalvar.Text          := '&Save';
     TabItemCadastro.Text    := 'Register';
     TabItemPesquisa.Text    := 'Search';
     TabItemContato.Text     := 'Contact';
     lblTitulo.Text          := 'Manufacturer Registration';
     FrmFabricantes.Caption  := 'Manufacturer Registration';
   end;
"
c:\fontes\Projeto Rodas\WheelPro\View\URegistrar.pas;Método muito longo;349;"procedure TFrmRegistrar.CarregarLinguagem;
var
  IniFile: TIniFile;
  I: Integer;
begin
  IniFile := TIniFile.Create(ExtractFilePath(ParamStr(0)) + '\Config.ini');
  try
    FLinguagem :=IniFile.ReadString('Traducao', 'Linguagem', '');

   if FLinguagem = 'Portuguese' then
   begin
     lblRazao.Text        := 'Razão Social / Nome';
     lblCnpj_cpf.Text     := 'CNPJ / CPF';
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Endereço';
     lblNumero.Text       := 'Número';
     LblComplemento.Text  := 'Complemento';
     LblBairro.Text       := 'Bairro';
     LblCidade.Text       := 'Cidade';
     LblResponnsavel.Text := 'Nome do responsável pelo registro';
     LblTelefone.Text     := 'Telefone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     BtnRegistrar.Text    := '&Registrar';
     LblTitulo.Text       := 'Registro do Wheel Pro';
     lblCEP.Text          := 'CEP';
     FrmRegistrar.Caption := 'Registro do Wheel Pro';
     TabItem1.Text        := 'Cadastro';
     TabItem2.Text        := 'Gerar senha';
     TabItem3.Text        := 'Enviar Serial';
     TabItem4.Text        := 'Inserir Contra-Senha';
     lblEntreseuCNPJ.Text := 'Entre seu CNPJ';
     lblSeuSerial.Text    := 'Seu Serial';
     lblNumserialHD.Text  := 'O número serial do seu HD é:';
     lblseuSErialBios.Text:= 'Seu Serial da Bios é :';
     lblContraSenha.Text  := 'Contra - Senha';
   end
   else if FLinguagem = 'Ingles' then
   begin
     lblRazao.Text        := 'Corporate Name / Name';
     lblCnpj_cpf.Text     := 'Tax Identification Number - TIN';
     lblIe.Visible        := False;
     EdtInscricaoEstadual.Visible:= False;
     lblIe.Text           := 'Inscrição Estadual';
     lblIm.Visible        := False;
     EdtIncricaoMunicipal.Visible:= False;
     lblIm.Text           := 'Inscrição Municipal';
     lblEndereco.Text     := 'Address';
     lblNumero.Text       := 'Number';
     LblComplemento.Text  := 'Complement';
     LblBairro.Text       := 'Neighborhood';
     LblCidade.Text       := 'City';
     LblResponnsavel.Text := 'Name of person responsible for registration';
     LblTelefone.Text     := 'Phone/WhatsApp';
     LblEmail.Text        := 'E-mail';
     lblCEP.Text          := 'ZIP CODE';
     BtnRegistrar.Text    := '&Register';
     LblTitulo.Text       := 'Wheel Pro registration';
     FrmRegistrar.Caption := 'Wheel Pro registration';
     TabItem1.Text        := 'Register';
     TabItem2.Text        := 'Generate Password';
     TabItem3.Text        := 'Send Serial';
     TabItem4.Text        := 'Enter Password';
     lblEntreseuCNPJ.Text := 'Enter your EIN';
     lblSeuSerial.Text    := 'Your Serial';
     lblNumserialHD.Text  := 'Serial number of your HD is:';
     lblseuSErialBios.Text:= 'Your Bios Serial is:';
     lblContraSenha.Text  := 'Password';
   end;
"
c:\fontes\salaoexecencias\Dao\uDAO.Categoria.pas;Uso de with;32;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Categoria.pas;Uso de with;53;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Categoria.pas;Uso de with;86;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Categoria.pas;Uso de with;102;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Categoria.pas;Uso de with;118;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Cliente.pas;Uso de with;33;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Cliente.pas;Uso de with;55;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Cliente.pas;Uso de with;79;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Cliente.pas;Uso de with;95;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Cliente.pas;Uso de with;137;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.FotoProcedimento.pas;Uso de with;32;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.FotoProcedimento.pas;Uso de with;51;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.FotoProcedimento.pas;Uso de with;103;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Procedimento.pas;Uso de with;32;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Procedimento.pas;Uso de with;54;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Procedimento.pas;Uso de with;76;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Procedimento.pas;Uso de with;92;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Procedimento.pas;Uso de with;121;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Servico.pas;Uso de with;31;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Servico.pas;Uso de with;53;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Servico.pas;Uso de with;76;"with TFDQuery.Create(nil) do"
c:\fontes\salaoexecencias\Dao\uDAO.Servico.pas;Uso de with;92;"with TFDQuery.Create(nil) do"
